node {
  name: "global_step/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "global_step"
    }
  }
}
node {
  name: "global_step/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/Assign"
  op: "AssignVariableOp"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "global_step/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "global_step/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond"
  op: "If"
  input: "global_step/VarIsInitializedOp"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_INT64
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "global_step_cond_false_20"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "global_step_cond_true_19"
      }
    }
  }
}
node {
  name: "global_step/cond/Identity"
  op: "Identity"
  input: "global_step/cond"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step/add"
  op: "AddV2"
  input: "global_step/cond/Identity"
  input: "global_step/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "normalize_element/component_0"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1155
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 1155
          }
          dim {
            size: 11
          }
        }
        tensor_content: "h\362e\203&_\346?\241T\230x?r\312?\232\231\231\231\231\231\341?\2008\340\361\207\003\276?\003\375\320A\nX\276?H\264\302\346@\242\325?\372{m\304\272\364\330?\245\272\220\347\330\'\346?(\225J\245R\251\324?\370rC\014H\307\322?\001\000\000\000\000\000\323?\177H\340\355\207\004\336?\353\331!pc\031\324?\000\000\000\000\000\000\340?\342\200\307\037\016x\354?\037\241Q\'\374\236\324?\334\245\236\214\337.\345?2\177\257\215X\227\336?\275\202\235\225\"\004\355?L\245R\251T*\325?\260\253\360\345\206\030\320?\020\000\000\000\000\000\250?\346:Fq\256c\324?\375\221\323|\255\236\315?)\\\217\302\365(\334?\316[\014\351\274\305\300?\343\302\210@?t\300?\347@\242\0256\007\302?*Z8\003B\311\315?\023\013\253\021\351t\341?\371|>\237\317\347\343?@:\2262\tv\305?\000\000\000\000\000\000\324?\351\251\205\225\236Z\350?j\276V\317\016\201\313?\232\231\231\231\231\231\341?\017x\374\341\200\307\277?\302$f\3278}\275?\013\233\003\211V\330\254?\241\344N\321\302\031\260?KA\002jv\275\350?\010\006\203\301`0\310?\261\253\360\345\206\030\300?\002\000\000\000\000\000\302?[X\351\251\205\225\316?~\255\236\035\0027\306?\024\256G\341z\024\336?\265\372RA\253/\265?@t\220\002\226\307\273?\013\233\003\211V\330\254?\241\344N\321\302\031\240?\347\321\202\004\324\354\332?p\267\333\355v\273\335?]\234\326l\237\250\276?\002\000\000\000\000\000\322?\2448\3271\212s\315?\231x?r\232\257\325?\354Q\270\036\205\353\301?\265\372RA\253/\265?\232\366\331\316D9\266?\251\'\343\267K=\311?\271S\264p\006\204\302?\207\027\300\231\217\262\315?\261\327\353\365z\275\336?@:\2262\tv\305?\377\377\377\377\377\377\341?\021x\373!\201\267\337?G\027]t\321E\267?\256G\341z\024\256\327?D:o1\244\363\266?\266\001d\332g;\263?\371\355RO\306o\307?\362V\3669\244&\310?Z\254F\244\323\205\334?+\026\213\305b\261\330?I\260\253\360\345\206\270?\004\000\000\000\000\000\300?\353\030\305\271\216Q\314?G\027]t\321E\307?\354Q\270\036\205\353\321?&\2736Q\262k\263?\341\220\233\214\241\352\275?Zas \321\n\333?\372{m\304\272\364\330?\251\317\030\216\026$\340?z<\036\217\307\343\341?D\365\240\221w\376\266?\002\000\000\000\000\000\302?\235\353\030\305\271\216\321?\241T\230x?r\332?{\024\256G\341z\244?\231\231\231\231\231\231\311?$i\006\367r\305\276?H\264\302\346@\242\325?:\244&\030oe\317?\206\030\'\330Y)\342?\215\307\343\361x<\336?]\234\326l\237\250\276?\000\000\000\000\000\000\304?\024x\373!\201\267\317?4(\025&\336\217\334?\000\000\000\000\000\000\000\000\016x\374\341\200\307\257?\377\233%\230\304\354\272?H\264\302\346@\242\305?\022\353\322c\376^\313?\206\030\'\330Y)\342?\331l6\233\315f\343?\266f\373D\365\240\301?\002\000\000\000\000\000\302?\352\251\205\225\236Z\330?\"pc\031\224\n\323?\366(\\\217\302\365\340?)\331\265\211\222]\313?\246K\311\177\263\004\303?\013\233\003\211V\330\234?\002\241\344N\321\302\231?\247p\264 \0015\333?\353\365z\275^\257\327?;\177\213\323\232\355\303?\377\377\377\377\377\377\341?\346:Fq\256c\324?\363\265zv\010\334\330?\000\000\000\000\000\000\000\000\361\370\303\001\217?\274?$\233\363\252\020O\301?6\007\022\255\2609\320?\321\302\031\020J\356\324?\262\204\007\014\340\314\347?\312d2\231L&\343?J\260\253\360\345\206\310?\004\000\000\000\000\000\300?Vzja\245\247\306?r\232\257\325\263C\340?{\024\256G\341z\224?GX\356i\204\345\336?\373:z\356~\201\307?O\306o\227z2\356?m\304\272\364\230\277\347?5\013\022P\263\353\345?\233L&\223\311d\342?]\234\326l\237\250\276?\002\000\000\000\000\000\314?\017\232|\331\240\311\327?\274\0379\315\327\352\331?R\270\036\205\353Q\310?)\331\265\211\222]\313?4Q\216\005\305\205\301?\202D+l\016$\332?~\016\251\t\306[\331?\374_\231(tS\342?\016\006\203\301`0\330?Nk\266OT\017\272?\000\000\000\000\000\000\316?\2448\3271\212s\335?\353\331!pc\031\324?\303\365(\\\217\302\325?\322y\213!\235\267\270?4Q\216\005\305\205\301?6\007\022\255\2609\300?:\244&\030oe\317?\177q\202\235\225\"\344?O&\223\311d2\331?\276\334\020\003\322\261\304?\374\377\377\377\377\377\307?\240\311\227\r\232|\331?\"pc\031\224\n\263?\256G\341z\024\256\327?\323y\213!\235\267\250?\374:z\356~\201\267?\347@\242\0256\007\262?\002\241\344N\321\302\231?5\226\360\200\001\234\331?+\026\213\305b\261\330?\271!\006\244c)\303?\377\377\377\377\377\377\331?0\0334\371\262A\303?4(\025&\336\217\314?{\024\256G\341z\264?\357\370\303\001\217?\254?\333\316D9\026\024\267?\013\233\003\211V\330\234?\341\014\010%w\212\266?\"X\215H\247\013\331?\215\307\343\361x<\336?\271!\006\244c)\303?\002\000\000\000\000\000\302?\346:Fq\256c\324?\330\352\331!pc\331?\303\365(\\\217\302\305?\322y\213!\235\267\270?\237W\205x\212\244\271?\347@\242\0256\007\302?\216X\227\036\363\367\332?g\251u\357KF\335?\315\345r\271\\.\327?7\304\200t,e\262?\004\000\000\000\000\000\300?\017\232|\331\240\311\327?\217eP*L\274\277?\366(\\\217\302\365\330?&\2736Q\262k\263?\226\225.%\377\315\302?\016$Zas \321?\251\t\306[\331\347\300?t\367\276d\324S\331?(\225J\245R\251\324?R&\301\256\302\227\313?\376\377\377\377\377\377\332?\352\251\205\225\236Z\330?\274\0379\315\327\352\331?\\\217\302\365(\\\337?&\2736Q\262k\263?0\276\365\247\341\220\333?\227z2~\273\324\323?\321\302\031\020J\356\344?V\375.Kx\300\340?\312d2\231L&\323?\017\032y\347oq\332?\004\000\000\000\000\000\300?5\371\262A\223/\313?\006\245\302\304\373\221\323?\\\217\302\365(\\\337?\317\352K\005\255\276\324?\027F\004\372\241\203\264? \321\n\233\003\211\326?\247h\341\014\010%\347?\243[,z\3038\341?\215\307\343\361x<\336?rZ\263}\242z\320?\000\000\000\000\000\000\324?\351:Fq\256c\304?=;\004n,\203\322?\232\231\231\231\231\231\331?a\271\247\021\226{\272?|\353O\303!7\271?\251\'\343\267K=\271?\321\302\031\020J\356\264?g\251u\357KF\335?+\225J\245R\251\344?\\\234\326l\237\250\316?\377\377\377\377\377\377\324?\346:Fq\256c\324?\370#\247\371Z=\333?\232\231\231\231\231\231\271?\265\372RA\253/\265?\275\303\272-\363\021\272?H\264\302\346@\242\325?\331\347\220\232`\274\325?\200(\r\025\210\246\335?\356v\273\335n\267\333?\260\253\360\345\206\030\320?\001\000\000\000\000\000\330?\237ZX\351\251\205\325?G\027]t\321E\327?{\024\256G\341z\244?&\2736Q\262k\263?\341\220\233\214\241\352\275?6\007\022\255\2609\300?\002\241\344N\321\302\271?9\272)\251\016\261\341?\016\006\203\301`0\330?2\tv\025\276\334\260?\376\377\377\377\377\377\305?~\331\240\311\227\r\312?b\342\375\310i\276\326?333333\303?D:o1\244\363\266?\037\010[M-Z\273?6\007\022\255\2609\320?\022\353\322c\376^\313?\316\354z\221\265U\334?:\034\016\207\303\341\340?;\177\213\323\232\355\303?\376\377\377\377\377\377\317?Vzja\245\247\346?j\276V\317\016\201\313?\037\205\353Q\270\036\345?\2008\340\361\207\003\276?\323\014\356\345\212=\300?6\007\022\255\2609\300?\032\020J\356\024-\314?\345\375\374\307\014\256\351?i\265Z\255V\253\325?\322\310;\177\213\323\312?\004\000\000\000\000\000\312?5\371\262A\223/\313?\241T\230x?r\332?\n\327\243p=\n\307?\264\372RA\253/\245?Y\036ods^\265?H\264\302\346@\242\265?\261.=\346\357\265\321?;=\225\273\305\242\327?H$\022\211D\"\321?\276\334\020\003\322\261\304?\004\000\000\000\000\000\300?\305\271\216Q\234\353\310?\314\240T\230x?\342?\232\231\231\231\231\231\251?&\2736Q\262k\263?]\177\032\016\271\311\270?\347@\242\0256\007\262?\002\241\344N\321\302\251?\201\364\355\257L\024\332?\331l6\233\315f\343?\315\r1 \035K\311?\002\000\000\000\000\000\327?\017\232|\331\240\311\307?G\027]t\321E\327?\n\327\243p=\n\267?\226{\032a\271\247\301?\201L\373lg\242\274?H\264\302\346@\242\265?\002\241\344N\321\302\271?\0003\270&q\033\337?\211D\"\221H$\342?@:\2262\tv\305?\376\377\377\377\377\377\320?\021x\373!\201\267\337?Y\006\245\302\304\373\301?\315\314\314\314\314\314\344?a\271\247\021\226{\272?\377\233%\230\304\354\272?\347@\242\0256\007\262?\261.=\346\357\265\261?t\304\006>c8\332?\016\006\203\301`0\330?E\365\240\221w\376\306?\001\000\000\000\000\200\340?U\013+=\265\260\322?\231x?r\232\257\325?\270\036\205\353Q\270\316?&\2736Q\262k\263?\237W\205x\212\244\271?\251\'\343\267K=\311?\207\324\004\343\255\354\343?\201\216}bj\335\333?\255V\253\325j\265\332?\261\253\360\345\206\030\300?\002\000\000\000\000\000\302?\345\313\006M\276l\320?\274\0379\315\327\352\331?\244p=\n\327\243\320?\226{\032a\271\247\261?\275\303\272-\363\021\272?p\227z2~\273\324?%w\212\026\316\200\340?\224\314\340\232\304m\334?\013\207\303\341p8\334?]\234\326l\237\250\276?\004\000\000\000\000\000\312?\353\030\305\271\216Q\314?4(\025&\336\217\334?\000\000\000\000\000\000\000\000a\271\247\021\226{\272?\024\345XP\\\030\261?\347@\242\0256\007\262?\241\344N\321\302\031\240?:\271\302jD:\315?\261\327\353\365z\275\336?\315\r1 \035K\311?\377\377\377\377\377\377\344?\305\271\216Q\234\353\310?\363\265zv\010\334\330?\232\231\231\231\231\231\271?\357\370\303\001\217?\254?y\212\244\031\334\313\265?\343\267K=\031\277\335?=\346\357\265\021\353\322?\347\321\202\004\324\354\332?:\034\016\207\303\341\340?Ok\266OT\017\312?\374\377\377\377\377\377\307?\345\313\006M\276l\320?\000\000\000\000\000\000\340?{\024\256G\341z\244?\264\372RA\253/\245?\037\010[M-Z\273?\251\'\343\267K=\271?\"5\301x+\373\254?u]/\262\266\212\327?\212F\243\321h4\332?]\234\326l\237\250\276?\376\377\377\377\377\377\305?0\0334\371\262A\323?\241T\230x?r\332?ffffff\326?\316[\014\351\274\305\300?cAqaD\240\277?\321\n\233\003\211V\330?\271S\264p\006\204\322?\n\2371\034-H\340?/\227\313\345r\271\334?\303\227\033b@:\306?\002\000\000\000\000\000\327?x\373!\201\267\037\322?\231x?r\232\257\325?{\024\256G\341z\244?\357\370\303\001\217?\254?\037\010[M-Z\273?\013\233\003\211V\330\314?\311\235\242\2053 \304?\264\007s\036\227\276\335?p\267\333\355v\273\335?\266f\373D\365\240\301?\000\000\000\000\000\000\316?\017\232|\331\240\311\327?\274\0379\315\327\352\331?\354Q\270\036\205\353\301?a\271\247\021\226{\272?\374:z\356~\201\267?6\007\022\255\2609\300?\"5\301x+\373\314?\343\357\262\204\007\014\340?\252\325j\265Z\255\326?;\177\213\323\232\355\303?\000\000\000\000\000\000\304?x\373!\201\267\037\322?\274\0379\315\327\352\331?\217\302\365(\\\217\322?\323y\213!\235\267\250?y\212\244\031\334\313\305?\013\233\003\211V\330\274?\271S\264p\006\204\302?\243[,z\3038\341?\212F\243\321h4\332?g\373D\365\240\221\347?\374\377\377\377\377\377\267?0\0334\371\262A\323?\314\240T\230x?\342?\000\000\000\000\000\000\320?|\032a\271\247\021\306?\037\010[M-Z\273?\343\267K=\031\277\335?\2766b]z\314\337?gC\005\242i\017\337?\252\325j\265Z\255\326?P&\301\256\302\227\253?\370\377\377\377\377\377\273?~\331\240\311\227\r\312?\030]t\321E\027\335?\270\036\205\353Q\270\256?\265\372RA\253/\265?\242\2700\"\320\017\275?\251\'\343\267K=\271?\331\347\220\232`\274\305?\377\212\3360N\260\343?\356\365z\275^\257\347?W\341\313\r1 \315?\376\377\377\377\377\377\305?\323S\013+=\265\340?\216eP*L\274\317?\037\205\353Q\270\036\345?z\213!\235\267\030\302?\232\366\331\316D9\306?\227z2~\273\324\303?\271S\264p\006\204\302?\n\2371\034-H\340?O&\223\311d2\331?\260\253\360\345\206\030\320?\376\377\377\377\377\377\337?\346:Fq\256c\324?G\027]t\321E\307?\256G\341z\024\256\327?\226{\032a\271\247\261?\266\001d\332g;\263?\277]\352\311\370\355\342?\022\353\322c\376^\333?\343\255I\334\306\327\322?+\026\213\305b\261\330?8\304\200t,e\322?\000\000\000\000\000\200\341?5\371\262A\223/\313?\253g\207\300\215e\320?333333\323?&\2736Q\262k\263?E\325;\254\3332\277?\347@\242\0256\007\262?\n\306[\331\347\220\312?\2400\347q\351\333\317?p\267\333\355v\273\335?<\177\213\323\232\355\263?\000\000\000\000\000\000\341?\304JO-\254\364\324?7\226A\2510\361\336?\270\036\205\353Q\270\276?\2008\340\361\207\003\276?\024\345XP\\\030\301?\227z2~\273\324\303?\261.=\346\357\265\301?5\013\022P\263\353\345?\331l6\233\315f\343?\331>Q=h\344\315?\000\000\000\000\000\000\316?1\212s\035\2438\327?\216eP*L\274\317?\315\314\314\314\314\314\334?a\271\247\021\226{\272?\237W\205x\212\244\271?2~\273\324\223\361\333?UUUUUU\325?\272{_2\352\251\334?p\267\333\355v\273\335?3\tv\025\276\334\320?\000\000\000\000\000\200\341?Vzja\245\247\246?\320\016\201\033\313\240\324?\n\327\243p=\n\307?\265\372RA\253/\265?\236W\205x\212\244\251?Zas \321\n\313?\177\257\215X\227\036\343?\326\222\270\215\257\345\305?\211D\"\221H$\342?\277\334\020\003\322\261\324?\000\000\000\000\000\000\346?\345\313\006M\276l\320?\353\331!pc\031\324?\n\327\243p=\n\327?B:o1\244\363\326?|\353O\303!7\271?\013\233\003\211V\330\314?\301x+\373\034R\343?\206\030\'\330Y)\342?\261\327\353\365z\275\336?w\025\276\334\020\003\322?\000\000\000\000\000\000\324?\304JO-\254\364\324?\375\221\323|\255\236\275?\256G\341z\024\256\327?\225{\032a\271\247\241?\037\010[M-Z\273?\251\'\343\267K=\271?\022\353\322c\376^\273?\243[,z\3038\341?\212F\243\321h4\332?\324\203F\336\371[\314?\376\377\377\377\377\377\305?\300\333\017\t\274\375\300?j\276V\317\016\201\313?333333\303?\016x\374\341\200\307\257?\237W\205x\212\244\271?\347@\242\0256\007\262?\321\302\031\020J\356\264?\001\267\212w\362\203\331?H$\022\211D\"\341?6\304\200t,e\302?\002\000\000\000\000\000\302?f\203&_6h\342?\353\331!pc\031\304?\366(\\\217\302\365\340?D:o1\244\363\266?\027F\004\372\241\203\264?\013\233\003\211V\330\234?\002\241\344N\321\302\231?aS\353\336\227\214\332?\013\207\303\341p8\314?\271!\006\244c)\323?\001\000\000\000\000\000\330?\352\251\205\225\236Z\330?\353\331!pc\031\304?=\n\327\243p=\342?&\2736Q\262k\263?Hh\324\t\277\'\305? \321\n\233\003\211\326?\2766b]z\314\337?0N\260\263R\204\340?\212F\243\321h4\332?]\234\326l\237\250\276?\374\377\377\377\377\377\307?\013+=\265\260\322\323?4(\025&\336\217\334?)\\\217\302\365(\314?D:o1\244\363\266?=\023\345XP\\\270?\013\233\003\211V\330\274?\022\353\322c\376^\273?z\201h\332\303\237\337?\013\207\303\341p8\334?\322\261\224I\260\253\340?\002\000\000\000\000\000\322?\346:Fq\256c\324?\320\016\201\033\313\240\324?\270\036\205\353Q\270\316?&\2736Q\262k\263?\201L\373lg\242\274?Zas \321\n\313?\241\344N\321\302\031\340?\266\231\217\262\035\311\341?\215\307\343\361x<\336?\310R&\301\256\302\307?\000\000\000\000\000\000\304?\r\232|\331\240\311\347?=;\004n,\203\322?\\\217\302\365(\\\337?\1778\340\361\207\003\316?E\325;\254\3332\277?\347@\242\0256\007\262?%w\212\026\316\200\320?\036\205nJ\252C\354?\013\207\303\341p8\334?\322\310;\177\213\323\312?\377\377\377\377\377\377\344?\017\232|\331\240\311\327?\"pc\031\224\n\303?R\270\036\205\353Q\330?\322y\213!\235\267\270?\027F\004\372\241\203\264?6\007\022\255\2609\320?\n\306[\331\347\220\332?\024(\246\326\275/\331?\031\014\006\203\301`\340?\331>Q=h\344\315?\001\000\000\000\000\200\340?~\331\240\311\227\r\312?\"pc\031\224\n\343?\341z\024\256G\341\312?\357\370\303\001\217?\314?\340/\360\342[\177\272?Zas \321\n\313?m\304\272\364\230\277\327?O#\322\351B\236\343?\371|>\237\317\347\343?\331>Q=h\344\315?\000\000\000\000\000\000\276?\351:Fq\256c\304?j\276V\317\016\201\333?\341z\024\256G\341\312?\016x\374\341\200\307\257?\302$f\3278}\275?\371\355RO\306o\307?\311\235\242\2053 \304?\026xY\302\003\006\340?Z\255V\253\325j\345?\315\r1 \035K\311?\004\000\000\000\000\000\312?\237ZX\351\251\205\325?\353\331!pc\031\304?\217\302\365(\\\217\322?&\2736Q\262k\303?\306\267\3764\034r\323?\371\355RO\306o\307?\241\344N\321\302\031\300?(\231\3015\211\333\330?\016\006\203\301`0\330?\364\2678\255\331>\321?\000\000\000\000\000\200\341?Vzja\245\247\306?\274\0379\315\327\352\331?{\024\256G\341z\204?\226{\032a\271\247\261?\242\2700\"\320\017\275?\251\'\343\267K=\271?2\177\257\215X\227\276?L+E\010\332\\\341?\374\375~\277\337\357\347?\\\234\326l\237\250\316?\000\000\000\000\000\000\324?|\331\240\311\227\r\332?\363\265zv\010\334\330?\270\036\205\353Q\270\316?\264\372RA\253/\305?\246K\311\177\263\004\303?\016$Zas \321?%w\212\026\316\200\320?O\360\031\303\321\202\344?\212F\243\321h4\332?Ok\266OT\017\312?\376\377\377\377\377\377\305?[X\351\251\205\225\316?G\027]t\321E\307?\037\205\353Q\270\036\325?\361\370\303\001\217?\274?\232\366\331\316D9\266?\347@\242\0256\007\322?\372{m\304\272\364\310?\210\233\222\352\020\033\330?\261\327\353\365z\275\336?3\tv\025\276\334\320?\377\377\377\377\377\377\341?x\373!\201\267\037\322?\353\331!pc\031\344?\000\000\000\000\000\000\000\000\2008\340\361\207\003\276?u)\371o\226`\302?H\264\302\346@\242\325?v\3511\177\257\215\330?z\201h\332\303\237\337?\315\345r\271\\.\327?\322\310;\177\213\323\312?\004\000\000\000\000\000\312?~\331\240\311\227\r\312?\264C\340\3062(\325?\000\000\000\000\000\000\320?\2008\340\361\207\003\276?\302$f\3278}\275?6\007\022\255\2609\300?\372{m\304\272\364\310?\2400\347q\351\333\337?\211D\"\221H$\342?Nk\266OT\017\272?\000\000\000\000\000\000\331?5\371\262A\223/\333?/\272\350\242\213.\332?\354Q\270\036\205\353\321?\355\332D\311\256M\304?\302VS\213\326\006\300?\273\324\223\361\333\245\316?\n\306[\331\347\220\332?\213\325\210t\272\220\347?/\227\313\345r\271\334?]\234\326l\237\250\276?\374\377\377\377\377\377\307?\017\232|\331\240\311\307?\017\201\033\313\240T\350?{\024\256G\341z\264?\322y\213!\235\267\270?\374:z\356~\201\267?6\007\022\255\2609\320?\321\302\031\020J\356\304?\315\206\nD\323\036\336?\352t:\235N\247\343?6\304\200t,e\302?\000\000\000\000\000\000\331?5\371\262A\223/\313?u\321E\027]t\341?{\024\256G\341z\264?&\2736Q\262k\263?$\233\363\252\020O\301?6\007\022\255\2609\300?\321\302\031\020J\356\264?N\025\210\246=\374\331?(\024\n\205B\241\340??:\2262\tv\265?\000\000\000\000\000\000\316?U\013+=\265\260\322?\264C\340\3062(\305?R\270\036\205\353Q\340?\016x\374\341\200\307\257?\270\3764\034r\223\341?\013\233\003\211V\330\314?\311\235\242\2053 \324?\343\357\262\204\007\014\340?\215\307\343\361x<\316?\2272\tv\025\276\334?\370\377\377\377\377\377\273?\300\333\017\t\274\375\320?\330\352\331!pc\311?\327\243p=\n\327\323?\357\370\303\001\217?\254?\201L\373lg\242\274? \321\n\233\003\211\326?m\304\272\364\230\277\327?\331\035\311Ai\250\340?\211D\"\221H$\342?\303\227\033b@:\306?\000\000\000\000\000\000\304?\177H\340\355\207\004\336?\016\201\033\313\240T\310?=\n\327\243p=\332?\322y\213!\235\267\270?\003\375\320A\nX\276?\347@\242\0256\007\302?]z\314\337k#\326?\037\325!6\360\031\343?\353\365z\275^\257\327?Nk\266OT\017\272?\000\000\000\000\000\000\304?B\223/\0334\371\342?\241T\230x?r\332?q=\n\327\243p\345?A\253/\025\264\372\322?cAqaD\240\277?\347@\242\0256\007\262?\321\302\031\020J\356\264?O\360\031\303\321\202\344?\016\006\203\301`0\330?R&\301\256\302\227\313?\000\000\000\000\000\200\350?\345\313\006M\276l\340?\330\352\331!pc\271?q=\n\327\243p\335?\016x\374\341\200\307\257?\377\233%\230\304\354\272?\347@\242\0256\007\262?\362V\3669\244&\270?9\272)\251\016\261\341?l6\233\315f\263\331?\017\032y\347oq\332?\002\000\000\000\000\000\327?\305\271\216Q\234\353\310?\274\0379\315\327\352\331?{\024\256G\341z\244?\264\372RA\253/\245?\266\001d\332g;\263?\013\233\003\211V\330\254?\002\241\344N\321\302\231?\256J\021\2026W\330?H$\022\211D\"\341?\276\334\020\003\322\261\304?\000\000\000\000\000\000\304?\304JO-\254\364\324?O\363\265zv\010\334?\232\231\231\231\231\231\271?\226{\032a\271\247\301?\343\302\210@?t\300?\013\233\003\211V\330\314?\022\353\322c\376^\313?\203\3360N\260\263\342?\356v\273\335n\267\333?3\tv\025\276\334\300?\000\000\000\000\000\000\304?\177H\340\355\207\004\336?\220\234\346k\365\354\320?q=\n\327\243p\335?D:o1\244\363\266?\003/\276\365\247\341\300?6\007\022\255\2609\300?\032\020J\356\024-\314?\200(\r\025\210\246\335?\214\305b\261X,\326?R&\301\256\302\227\313?\000\000\000\000\000\000\341?\024x\373!\201\267\317?b\342\375\310i\276\326?R\270\036\205\353Q\310?\016x\374\341\200\307\257?\341\220\233\214\241\352\275?\251\'\343\267K=\311?\341\014\010%w\212\306?\272\025\357\344\007s\336?\273\\.\227\313\345\342?\322\310;\177\213\323\312?\000\000\000\000\000\000\324?\345\313\006M\276l\340?G\027]t\321E\307?\217\302\365(\\\217\342?\323y\213!\235\267\310?#\233\363\252\020O\321?\347@\242\0256\007\262?\241\344N\321\302\031\260?\n\2371\034-H\340?\252\325j\265Z\255\326?\324\203F\336\371[\314?\002\000\000\000\000\000\334?1\212s\035\2438\327?~\255\236\035\0027\326?\244p=\n\327\243\320?\361\370\303\001\217?\274?es^\025\342)\302?H\264\302\346@\242\265?\311\235\242\2053 \304?9\272)\251\016\261\341?\255V\253\325j\265\332?\276\334\020\003\322\261\304?\004\000\000\000\000\000\300?\300\333\017\t\274\375\320?\"pc\031\224\n\323?\327\243p=\n\327\323?\316[\014\351\274\305\300?]\177\032\016\271\311\270?H\264\302\346@\242\245?\"5\301x+\373\254?\223W\277\313\022\036\340?\016\006\203\301`0\330?3\tv\025\276\334\300?\002\000\000\000\000\000\322?[X\351\251\205\225\316?4(\025&\336\217\334?\000\000\000\000\000\000\000\000&\2736Q\262k\263?$i\006\367r\305\276?\347@\242\0256\007\262?\022\353\322c\376^\273?F\204\240\315\025V\343?{\275^\257\327\353\345?\210\001\351X\312$\330?\002\000\000\000\000\000\314?Vzja\245\247\306?\353\331!pc\031\324?\000\000\000\000\000\000\000\000\016x\374\341\200\307\257?Y\036ods^\265?\347@\242\0256\007\322?\261.=\346\357\265\301?\0207%\325!6\320?i4\032\215F\243\341?3\tv\025\276\334\300?\001\000\000\000\000\000\343?x\373!\201\267\037\322?Y\006\245\302\304\373\321?\244p=\n\327\243\320?\226{\032a\271\247\261?\323\014\356\345\212=\300?\227z2~\273\324\323?=\346\357\265\021\353\322?\371%\243\236\312\335\342?Z,\026\213\305b\341?\336\371[\234\326l\317?\370\377\377\377\377\377\273?[X\351\251\205\225\316?\340\3062(\025&\336?{\024\256G\341z\324?D:o1\244\363\266?=\023\345XP\\\270?\273\324\223\361\333\245\336?E\013g@(\271\343?-\211\333\370Z^\335?p\267\333\355v\273\335?S&\301\256\302\227\273?\000\000\000\000\000\000\304?U\013+=\265\260\322?O\363\265zv\010\334?{\024\256G\341z\204?\361\370\303\001\217?\274?`\340\305\267\3764\274?\013\233\003\211V\330\314?\002\241\344N\321\302\311?g\251u\357KF\335?\215\307\343\361x<\336?\336\371[\234\326l\317?\376\377\377\377\377\377\337?|\373!\201\267\037\242?+L\274\0379\315\347?{\024\256G\341z\244?\225{\032a\271\247\241?`\340\305\267\3764\254?\347@\242\0256\007\342?\2766b]z\314\337?\303r\267X\364\206\321?^.\227\313\345r\351?D\365\240\221w\376\266?\000\000\000\000\000\000\324?\305\271\216Q\234\353\310?O\363\265zv\010\334?{\024\256G\341z\224?\265\372RA\253/\265?`\340\305\267\3764\274?\251\'\343\267K=\271?\"5\301x+\373\254?(\3771\203k\022\327?\261\327\353\365z\275\336?\303\227\033b@:\306?\001\000\000\000\000\000\323?\237ZX\351\251\205\325?G\027]t\321E\327?{\024\256G\341z\244?&\2736Q\262k\263?\341\220\233\214\241\352\275?6\007\022\255\2609\300?\002\241\344N\321\302\271?9\272)\251\016\261\341?\016\006\203\301`0\330?2\tv\025\276\334\260?\376\377\377\377\377\377\305?\235\353\030\305\271\216\321?`\253g\207\300\215\345?\205\353Q\270\036\205\333?D:o1\244\363\266?y\212\244\031\334\313\305?\277]\352\311\370\355\322?\331\347\220\232`\274\345?\n\2371\034-H\340?l6\233\315f\263\331?\\\234\326l\237\250\316?\370\377\377\377\377\377\273?\304JO-\254\364\324?\375\221\323|\255\236\275?\341z\024\256G\341\332?&\2736Q\262k\263?\242\2700\"\320\017\275?\347@\242\0256\007\302?\251\t\306[\331\347\300?\243[,z\3038\341?\353\365z\275^\257\327?w\025\276\334\020\003\322?\002\000\000\000\000\000\302?1\212s\035\2438\327?\340\3062(\025&\336?\000\000\000\000\000\000\000\000\355\332D\311\256M\304?$i\006\367r\305\276?H\264\302\346@\242\305?\331\347\220\232`\274\305?\351\254\024!hs\345?\316\347\363\371|>\337?7\304\200t,e\262?\002\000\000\000\000\000\302?\353\030\305\271\216Q\314?\330\352\331!pc\331?{\024\256G\341z\204?\322y\213!\235\267\270?\201L\373lg\242\274?p\227z2~\273\324?\372{m\304\272\364\310?\310\374`\316\343\322\327?(\024\n\205B\241\340?@:\2262\tv\305?\001\000\000\000\000\000\330?1\212s\035\2438\327?\"pc\031\224\n\323?333333\323?\316[\014\351\274\305\300?\333\316D9\026\024\267?6\007\022\255\2609\300?\261.=\346\357\265\301?\264\007s\036\227\276\335?p\267\333\355v\273\335?Ok\266OT\017\312?\376\377\377\377\377\377\332?Vzja\245\247\306?4(\025&\336\217\334?\000\000\000\000\000\000\000\000^\233(\331\265\211\302?\211@?t\220\002\306?\347@\242\0256\007\322?\311\235\242\2053 \304?\315\271\302jD:\335?z<\036\217\307\343\341?E\365\240\221w\376\306?\002\000\000\000\000\000\322?\304JO-\254\364\324?4(\025&\336\217\334?333333\303?\226{\032a\271\247\261?\201L\373lg\242\274?\013\233\003\211V\330\314?\"5\301x+\373\314?V\375.Kx\300\340?/\227\313\345r\271\334?\261\253\360\345\206\030\300?\376\377\377\377\377\377\305?f\203&_6h\342?4(\025&\336\217\314?H\341z\024\256G\341?\017x\374\341\200\307\277?D\007)`y\274\301?\347@\242\0256\007\322?\177\257\215X\227\036\343?\213\325\210t\272\220\347?\347t:\235N\247\323?S&\301\256\302\227\273?\000\000\000\000\000\000\304?\353\030\305\271\216Q\314?G\027]t\321E\307?\354Q\270\036\205\353\321?&\2736Q\262k\263?\341\220\233\214\241\352\275?Zas \321\n\333?\372{m\304\272\364\330?\251\317\030\216\026$\340?z<\036\217\307\343\341?D\365\240\221w\376\266?\002\000\000\000\000\000\302?\017\232|\331\240\311\307?\216eP*L\274\317?H\341z\024\256G\321?\300\343\017\007<\376\340?\034\247\257\243\347\356\267?p\227z2~\273\324?\236\242\2053 \224\354?U\"\235.\3449\326?L\245R\251T*\325?6\304\200t,e\302?\002\000\000\000\000\000\334?|\331\240\311\227\r\332?\264C\340\3062(\345?\270\036\205\353Q\270\316?\2008\340\361\207\003\276?\302VS\213\326\006\300?\227z2~\273\324\303?oe\237Cj\202\341?\030\310\014\256I\334\346?\251T*\225J\245\342?\261\253\360\345\206\030\300?\004\000\000\000\000\000\312?\020\t\274\375\220\300\333?*L\274\0379\315\327?H\341z\024\256G\321?\322y\213!\235\267\270?\341\220\233\214\241\352\275?\227z2~\273\324\323?\226}\016\251\t\306\353?i\010\332\\a5\342?\255V\253\325j\265\332?3\tv\025\276\334\300?\002\000\000\000\000\000\302?Vzja\245\247\326?=;\004n,\203\322?H\341z\024\256G\321?\322y\213!\235\267\270?t)\371o\226`\262?\371\355RO\306o\307?\261.=\346\357\265\301?\216\334\306\327\362\352\327?\214\305b\261X,\326?w\025\276\334\020\003\322?\376\377\377\377\377\377\332?\237ZX\351\251\205\325?\033\313\240T\230x\337?\232\231\231\231\231\231\311?a\271\247\021\226{\272?\037\010[M-Z\273?6\007\022\255\2609\300?\002\241\344N\321\302\311?\020\004m\256\260\032\341?/\227\313\345r\271\334?\310R&\301\256\302\307?\002\000\000\000\000\000\302?U\013+=\265\260\322?\360GN\363\265z\326?\270\036\205\353Q\270\256?)\331\265\211\222]\313?\302VS\213\326\006\300?\371\355RO\306o\327?]z\314\337k#\326?\223fpM\3426\336?\316\347\363\371|>\337?Ok\266OT\017\312?\376\377\377\377\377\377\325?U\013+=\265\260\322?\221\234\346k\365\354\260?ffffff\326?\357\370\303\001\217?\254?V\275\303\272-\363\261?H\264\302\346@\242\265?\"5\301x+\373\254?\365\205<\307>1\325?L\247\323\351t:\335?w\025\276\334\020\003\322?\000\000\000\000\000\000\341?\256c\024\347:F\341?\016\201\033\313\240T\310?\366(\\\217\302\365\340?\2008\340\361\207\003\276?]\177\032\016\271\311\270?\013\233\003\211V\330\254?\241\344N\321\302\031\260?V\375.Kx\300\340?(\225J\245R\251\324?J\260\253\360\345\206\310?\000\000\000\000\000\000\331?\223\373!\201\267\037\202?\330\352\331!pc\331?\303\365(\\\217\302\305?\322y\213!\235\267\270?\326m\231\217\320\250\263?\013\233\003\211V\330\314?\311\235\242\2053 \344?\307x\216}bj\315?\000\177\277\337\357\367\353?\276\334\020\003\322\261\304?\000\000\000\000\000\000\346?\237ZX\351\251\205\305?$\247\371Z=;\344?\000\000\000\000\000\000\000\000\322y\213!\235\267\270?\343\302\210@?t\320?\347@\242\0256\007\262?\301x+\373\034R\243?\233\246=\374\371\217\331?+\225J\245R\251\344?S&\301\256\302\227\273?\002\000\000\000\000\000\327?\2448\3271\212s\315?j\276V\317\016\201\273?\256G\341z\024\256\327?\361\370\303\001\217?\274?y\212\244\031\334\313\265?\347@\242\0256\007\302?\032\020J\356\024-\314?\366\270\364\355\257L\324?\352t:\235N\247\343?w\025\276\334\020\003\322?\000\000\000\000\000\200\343?\305\271\216Q\234\353\310?j\276V\317\016\201\333?\000\000\000\000\000\000\000\000\017x\374\341\200\307\277?\013\361\024I3\270\307?\251\'\343\267K=\311?\331\347\220\232`\274\305?\356x\'?\230\363\330?i4\032\215F\243\341?E\365\240\221w\376\306?\002\000\000\000\000\000\334?\345\313\006M\276l\320?\320\016\201\033\313\240\324?{\024\256G\341z\224?\357\370\303\001\217?\254?$i\006\367r\305\276?H\264\302\346@\242\305?\311\235\242\2053 \304?\356x\'?\230\363\330?\316\347\363\371|>\337?\261\253\360\345\206\030\300?\000\000\000\000\000\000\324?\345\313\006M\276l\320?b\342\375\310i\276\326?\270\036\205\353Q\270\316?&\2736Q\262k\263?`\340\305\267\3764\274?6\007\022\255\2609\300?\261.=\346\357\265\301?F\204\240\315\025V\343?z<\036\217\307\343\341?\364\2678\255\331>\321?\000\000\000\000\000\000\304?\240\311\227\r\232|\331? 9\315\327\352\331\341?\000\000\000\000\000\000\000\000\2008\340\361\207\003\276?U\275\303\272-\363\301?\347@\242\0256\007\302?\241\344N\321\302\031\300?5\013\022P\263\353\345?\261\327\353\365z\275\336?\271!\006\244c)\323?\002\000\000\000\000\000\302?\235\353\030\305\271\216\341?u\321E\027]t\321?\037\205\353Q\270\036\325?\361\370\303\001\217?\274?\206\337\223\312J\227\302?\016$Zas \321?\002\241\344N\321\302\311?<\345n\261\350\r\343?O&\223\311d2\331?W\341\313\r1 \315?\002\000\000\000\000\000\327?\017\232|\331\240\311\307?\"pc\031\224\n\323?{\024\256G\341z\224?D:o1\244\363\266?\242\2700\"\320\017\275?\224\361\333\245\236\214\337?\023\214\267\262\317!\345?\025[^\375.K\330?\211D\"\221H$\322?]\234\326l\237\250\276?\374\377\377\377\377\377\307?\017\232|\331\240\311\327?Y\006\245\302\304\373\321?\315\314\314\314\314\314\334?\2008\340\361\207\003\276?\272b\017\204\255\246\266?H\264\302\346@\242\265?\301x+\373\034R\263?\010\304\237\377\230\301\325?L\247\323\351t:\335?\265f\373D\365\240\321?\000\000\000\000\000\200\353?y\373!\201\267\037\302?\264C\340\3062(\325?{\024\256G\341z\264?HX\356i\204\345\316?|\353O\303!7\271?\347@\242\0256\007\302?\321\302\031\020J\356\304?\007\247\244:\304\006\336?+\225J\245R\251\344?E\365\240\221w\376\306?\377\377\377\377\377\377\336?0\0334\371\262A\323?\033\313\240T\230x\337?)\\\217\302\365(\314?\322y\213!\235\267\270?\377\233%\230\304\354\272?H\264\302\346@\242\305?\256\354sHM0\336?\000\000\000\000\000\000\340?O&\223\311d2\331?\261\253\360\345\206\030\300?\000\000\000\000\000\000\304?\303JO-\254\364\344?j\276V\317\016\201\313?\354Q\270\036\205\353\341?\265\372RA\253/\265?$\233\363\252\020O\301?\347@\242\0256\007\262?\"5\301x+\373\274?|\004\324\354z\221\345?\013\205B\241P(\324?W\341\313\r1 \315?\001\000\000\000\000\000\330?Vzja\245\247\306?r\232\257\325\263C\340?{\024\256G\341z\224?GX\356i\204\345\336?\373:z\356~\201\307?O\306o\227z2\356?m\304\272\364\230\277\347?5\013\022P\263\353\345?\233L&\223\311d\342?]\234\326l\237\250\276?\002\000\000\000\000\000\314?0\0334\371\262A\323?j\276V\317\016\201\273?\205\353Q\270\036\205\333?\357\370\303\001\217?\254?\374:z\356~\201\267?\277]\352\311\370\355\322?\261.=\346\357\265\321?\274e\242\320MI\325?\007\004\002\201@ \340?\276\334\020\003\322\261\304?\000\000\000\000\000\000\341?\2448\3271\212s\315?4(\025&\336\217\334?\037\205\353Q\270\036\325?\361\370\303\001\217?\274?\034\247\257\243\347\356\267?\343\267K=\031\277\335?\301x+\373\034R\343?6M{\370\363\037\323?\255V\253\325j\265\332?\364\2678\255\331>\321?\001\000\000\000\000\200\345?\300\333\017\t\274\375\320?~\255\236\035\0027\326?\244p=\n\327\243\300?\361\370\303\001\217?\274?es^\025\342)\302?p\227z2~\273\324?\362V\3669\244&\330?\031p\346\243lG\342?\031\014\006\203\301`\340?@:\2262\tv\305?\002\000\000\000\000\000\302?U\013+=\265\260\322?\017\201\033\313\240T\350?\232\231\231\231\231\231\251?D:o1\244\363\266?$i\006\367r\305\276?H\264\302\346@\242\305?\271S\264p\006\204\302?40\2003\037e\333?\016\006\203\301`0\330?3\tv\025\276\334\300?\002\000\000\000\000\000\314?\020\t\274\375\220\300\333?$\247\371Z=;\344?H\341z\024\256G\321?\322y\213!\235\267\270?$i\006\367r\305\276?Zas \321\n\333?\330F\254K\217\371\353?\206\030\'\330Y)\342?O&\223\311d2\331?]\234\326l\237\250\276?\002\000\000\000\000\000\302?\024x\373!\201\267\317?\207\300\215eP*\354?\000\000\000\000\000\000\000\000\234(\331\265\211\222\315?es^\025\342)\302?\013\233\003\211V\330\254?\002\241\344N\321\302\251?\340\304m|-\257\336?\233\315f\263\331l\346?\261\253\360\345\206\030\300?\376\377\377\377\377\377\325?\021x\373!\201\267\337?\006\245\302\304\373\221\323?)\\\217\302\365(\344?\226{\032a\271\247\301?\237W\205x\212\244\271?6\007\022\255\2609\300?\241\344N\321\302\031\300?z\201h\332\303\237\337?L\245R\251T*\325?\364\2678\255\331>\321?\000\000\000\000\000\000\344?5\371\262A\223/\313?\016\201\033\313\240T\330?\270\036\205\353Q\270\276?\226{\032a\271\247\261?\003/\276\365\247\341\300?\343\267K=\031\277\335?m\304\272\364\230\277\347?N\025\210\246=\374\331?i4\032\215F\243\341?D\365\240\221w\376\266?\000\000\000\000\000\000\324?\345\313\006M\276l\320?\320\016\201\033\313\240\324?{\024\256G\341z\224?\357\370\303\001\217?\254?$i\006\367r\305\276?H\264\302\346@\242\305?\311\235\242\2053 \304?\356x\'?\230\363\330?\316\347\363\371|>\337?\261\253\360\345\206\030\300?\000\000\000\000\000\000\324?\235\353\030\305\271\216\321?\016\201\033\313\240T\330?\232\231\231\231\231\231\271?\016x\374\341\200\307\257?\266\001d\332g;\303?\321\n\233\003\211V\330?\217\371{m\304\272\344?t\304\006>c8\332?H$\022\211D\"\321?I\260\253\360\345\206\270?\004\000\000\000\000\000\312?\017\232|\331\240\311\327?\304\373\221\323|\255\316?{\024\256G\341z\344?D:o1\244\363\266?$\233\363\252\020O\301?\013\233\003\211V\330\274?\"5\301x+\373\314?\002\222\034\224\206\n\344?\013\205B\241P(\344?\315\r1 \035K\311?\000\000\000\000\000\000\324?\353\030\305\271\216Q\314?\363\265zv\010\334\330?\000\000\000\000\000\000\000\000\265\372RA\253/\265?\003/\276\365\247\341\300?\013\233\003\211V\330\274?\002\241\344N\321\302\251?\334\2404T \232\326?H$\022\211D\"\341?3\tv\025\276\334\300?\000\000\000\000\000\000\336?5\371\262A\223/\313?(\025&\336\217\234\346?{\024\256G\341z\244?&\2736Q\262k\263?\302VS\213\326\006\300?\227z2~\273\324\303?v\3511\177\257\215\330?t\304\006>c8\332?\261\327\353\365z\275\336?\276\334\020\003\322\261\304?\002\000\000\000\000\000\302?{ja\245\247\026\326?\006\245\302\304\373\221\323?)\\\217\302\365(\274?\322y\213!\235\267\270?$i\006\367r\305\276?\013\233\003\211V\330\274?v\3511\177\257\215\330?z\201h\332\303\237\337?i\265Z\255V\253\325?]\234\326l\237\250\276?\002\000\000\000\000\000\302?U\013+=\265\260\322?\241T\230x?r\312?q=\n\327\243p\315?\016x\374\341\200\307\257?@t\220\002\226\307\273?\227z2~\273\324\323?-\234\001\241\344N\321?g\251u\357KF\335?\312f\263\331l6\333?Ok\266OT\017\312?\004\000\000\000\000\000\300?\353\030\305\271\216Q\314?Y\006\245\302\304\373\321?\232\231\231\231\231\231\311?\226{\032a\271\247\261?@t\220\002\226\307\273?\321\n\233\003\211V\330?\301x+\373\034R\323?N\025\210\246=\374\331?\361\367\373\375~\277\337?\310R&\301\256\302\307?\001\000\000\000\000\000\323?\304JO-\254\364\324?\006\245\302\304\373\221\323?\n\327\243p=\n\327?\016x\374\341\200\307\257?\251\254t)\371o\326?\347@\242\0256\007\262?\241\344N\321\302\031\260?\323v$\007\245\241\342?\214\305b\261X,\326?\276\334\020\003\322\261\304?\000\000\000\000\000\000\304?\177H\340\355\207\004\336?\216eP*L\274\337?\232\231\231\231\231\231\341?\357\370\303\001\217?\254?\337/\360\342[\177\312?p\227z2~\273\324?\271S\264p\006\204\322?\255\372]\226\360\200\341?\261\327\353\365z\275\336?\005\244c)\223`\327?\000\000\000\000\000\000\316?\306(\316u\214\342\334?\264C\340\3062(\305?H\341z\024\256G\341?\361\370\303\001\217?\274?4Q\216\005\305\205\301?\321\n\233\003\211V\330?\266\021\353\322c\376\336?l3\037e;\222\343?\312f\263\331l6\333?\370rC\014H\307\322?\376\377\377\377\377\377\305?\235\353\030\305\271\216\321?\221\234\346k\365\354\300?333333\323?&\2736Q\262k\263?Y\036ods^\265?\273\324\223\361\333\245\316?\341\014\010%w\212\306?\210\233\222\352\020\033\330?\312f\263\331l6\333?\002\351X\312$\330\325?\002\000\000\000\000\000\334?\013+=\265\260\322\323?\234\346k\365\354\020\330?)\\\217\302\365(\314?\265\372RA\253/\265?@t\220\002\226\307\273?\227z2~\273\324\303?m\304\272\364\230\277\327?-#k\253x\'\337?\356v\273\335n\267\333?S&\301\256\302\227\273?\370\377\377\377\377\377\273?\300\333\017\t\274\375\340?\330\352\331!pc\311?=\n\327\243p=\342?\322y\213!\235\267\270?\302VS\213\326\006\300?\347@\242\0256\007\262?\341\014\010%w\212\266?\355\301\234\307\245o\337?\013\205B\241P(\324?\331>Q=h\344\315?\377\377\377\377\377\377\331?\351:Fq\256c\304?\216eP*L\274\317?\n\327\243p=\n\267?\322y\213!\235\267\270?V\275\303\272-\363\261?\343\267K=\031\277\335?\3511\177\257\215X\327?\035\335\224T\207\330\340?:\034\016\207\303\341\340?\322\310;\177\213\323\312?\001\000\000\000\000\000\323?\346:Fq\256c\324?G\027]t\321E\267?\341z\024\256G\341\332?\226{\032a\271\247\261?=\023\345XP\\\270?\013\233\003\211V\330\274?\261.=\346\357\265\261?6\263\353E\326V\321?\353\365z\275^\257\327?\261\253\360\345\206\030\300?\001\000\000\000\000\000\343?U\013+=\265\260\322?\340\3062(\025&\336?\341z\024\256G\341\312?\265\372RA\253/\265?\242\2700\"\320\017\275?\013\233\003\211V\330\334?\320!5\301x+\353?\032Kx\300\000\316\334?l6\233\315f\263\331?S&\301\256\302\227\273?\002\000\000\000\000\000\314?\2448\3271\212s\315?O\363\265zv\010\334?{\024\256G\341z\224?\322y\213!\235\267\270?4Q\216\005\305\205\301?\013\233\003\211V\330\254?\311\235\242\2053 \304?\017\\\223\270\215\257\345?\334\355v\273\335n\347?w\025\276\334\020\003\322?\374\377\377\377\377\377\307?\235\353\030\305\271\216\321?\340\3062(\025&\336?)\\\217\302\365(\314?\226{\032a\271\247\261?$i\006\367r\305\276?\273\324\223\361\333\245\316?\261.=\346\357\265\341?\316\354z\221\265U\334?/\227\313\345r\271\334?D\365\240\221w\376\266?\000\000\000\000\000\000\304?\304JO-\254\364\324?\216eP*L\274\317?R\270\036\205\353Q\330?\361\370\303\001\217?\274?4Q\216\005\305\205\301?p\227z2~\273\324?\331\347\220\232`\274\325?\254\307\245o\177e\342?/\227\313\345r\271\334?\324\203F\336\371[\314?\002\000\000\000\000\000\327?|\331\240\311\227\r\332?\353\331!pc\031\304?\n\327\243p=\n\327?D:o1\244\363\266?\201L\373lg\242\274?\347@\242\0256\007\302?\311\235\242\2053 \304?\364\233\371(\333\221\334?p\267\333\355v\273\335?\375-Nk\266O\324?\000\000\000\000\000\200\341?\r\232|\331\240\311\347?=;\004n,\203\322?\\\217\302\365(\\\337?\1778\340\361\207\003\316?E\325;\254\3332\277?\347@\242\0256\007\262?%w\212\026\316\200\320?\036\205nJ\252C\354?\013\207\303\341p8\334?\322\310;\177\213\323\312?\377\377\377\377\377\377\344?|\373!\201\267\037\262?\016\201\033\313\240T\330?{\024\256G\341z\264?\226{\032a\271\247\261?\367\331\316D9\026\264?\016$Zas \321?\311\235\242\2053 \304?O\341hA\002j\326?\312d2\231L&\343?\310R&\301\256\302\307?\376\377\377\377\377\377\320?\345\313\006M\276l\320?\264C\340\3062(\325?\232\231\231\231\231\231\331?D:o1\244\363\266?\027F\004\372\241\203\264?\227z2~\273\324\303?\341\014\010%w\212\266?\002\203k\022\267\361\325?\212F\243\321h4\332?\310R&\301\256\302\307?\001\000\000\000\000\200\340?\305\271\216Q\234\353\330?u\321E\027]t\321?\\\217\302\365(\\\337?\2008\340\361\207\003\276?$i\006\367r\305\276?\347@\242\0256\007\322?\226}\016\251\t\306\333?)A\233+\254F\344?\261\327\353\365z\275\336?6\304\200t,e\302?\374\377\377\377\377\377\307?\353\030\305\271\216Q\334?\353\331!pc\031\324?\n\327\243p=\n\327?\316[\014\351\274\305\300?\232\366\331\316D9\306? \321\n\233\003\211\326?E\013g@(\271\323?9\355\341\317\177\314\340?\214\305b\261X,\326?\322\310;\177\213\323\312?\001\000\000\000\000\000\330?[X\351\251\205\225\316?fP*L\274\037\351?\n\327\243p=\n\267?\357\370\303\001\217?\254?D\007)`y\274\321?6\007\022\255\2609\300?g@(\271S\264\340?\032Kx\300\000\316\334?\013\207\303\341p8\334?6\304\200t,e\302?\000\000\000\000\000\000\264?\300\333\017\t\274\375\340?\330\352\331!pc\311?333333\343?D:o1\244\363\266?\341\220\233\214\241\352\315?H\264\302\346@\242\265?\301x+\373\034R\263?\002\222\034\224\206\n\344?\215\307\343\361x<\316?\024\325\203F\336\371\333?\002\000\000\000\000\000\302?\237ZX\351\251\205\325?\246\302\304\373\221\323\334?\205\353Q\270\036\205\343?&\2736Q\262k\263?Y\036ods^\305?H\264\302\346@\242\305?\363\367\332\210u\351\341?\n\2371\034-H\340?L\245R\251T*\325?\261\253\360\345\206\030\300?\374\377\377\377\377\377\267?Z\351\251\205\225\236\332?\264C\340\3062(\305?=\n\327\243p=\342?&\2736Q\262k\263?\340/\360\342[\177\272?\371\355RO\306o\327?m\304\272\364\230\277\327?\343\357\262\204\007\014\340?\312f\263\331l6\333?\265f\373D\365\240\321?\376\377\377\377\377\377\325?\235\353\030\305\271\216\321?\016\201\033\313\240T\330?{\024\256G\341z\204?\016x\374\341\200\307\257?\323\014\356\345\212=\300?\227z2~\273\324\303?\301x+\373\034R\263?\324\223\037\314y\\\332?L\247\323\351t:\335?\266f\373D\365\240\301?\000\000\000\000\000\000\324?\2448\3271\212s\315?4(\025&\336\217\334?\270\036\205\353Q\270\236?\322y\213!\235\267\270?`\340\305\267\3764\274?Zas \321\n\313?\241\344N\321\302\031\340?\234\3038\301\316J\341?\371|>\237\317\347\343?6\304\200t,e\302?\374\377\377\377\377\377\307?~\331\240\311\227\r\312?\370#\247\371Z=\333?\303\365(\\\217\302\305?a\271\247\021\226{\272?Cn2\206\252w\330?\347@\242\0256\007\262?\301x+\373\034R\263?\316\354z\221\265U\334?(\024\n\205B\241\340?;\177\213\323\232\355\303?\002\000\000\000\000\000\322?\306(\316u\214\342\334?b\342\375\310i\276\326?\303\365(\\\217\302\305?\226{\032a\271\247\301?\302VS\213\326\006\300?\016$Zas \321?=\346\357\265\021\353\322?\376\342\004;+E\350?\013\205B\241P(\324?@:\2262\tv\305?\002\000\000\000\000\000\302?\345\313\006M\276l\320?\353\331!pc\031\324?\n\327\243p=\n\327?B:o1\244\363\326?|\353O\303!7\271?\013\233\003\211V\330\314?\301x+\373\034R\343?\206\030\'\330Y)\342?\261\327\353\365z\275\336?w\025\276\334\020\003\322?\000\000\000\000\000\000\324?C\002o?$\360\346?\330\352\331!pc\331?\315\314\314\314\314\314\344?\322y\213!\235\267\270?y\212\244\031\334\313\265?\347@\242\0256\007\262?2\177\257\215X\227\276?\362\030\216\026$\240\346?F\247\323\351t:\315?6\304\200t,e\302?\002\000\000\000\000\000\314?\300\333\017\t\274\375\320?\304\373\221\323|\255\316?\354Q\270\036\205\353\301?^\233(\331\265\211\302?\302VS\213\326\006\300?\347@\242\0256\007\322?*Z8\003B\311\315?\264\007s\036\227\276\335?L\247\323\351t:\335?6\304\200t,e\302?\000\000\000\000\000\000\324?0\0334\371\262A\323?\257\325\263C\340\306\342?H\341z\024\256G\321?&\2736Q\262k\263?\242\2700\"\320\017\275?\347@\242\0256\007\302?e\237Cj\202\361\326?\307E\326V\361N\336?\356v\273\335n\267\333?D\365\240\221w\376\266?\004\000\000\000\000\000\312?}\331\240\311\227\r\352?\006\245\302\304\373\221\323?q=\n\327\243p\345?^\233(\331\265\211\302?$\233\363\252\020O\301?\347@\242\0256\007\262?\"5\301x+\373\254?\002\222\034\224\206\n\344?\013\207\303\341p8\314?F\365\240\221w\376\326?\000\000\000\000\000\200\341?\371\262A\223/\033\344?\006\245\302\304\373\221\323?\\\217\302\365(\\\337?D:o1\244\363\266?\003\375\320A\nX\276?\013\233\003\211V\330\254?\"5\301x+\373\254?e&\n\335\224T\347?\252\325j\265Z\255\326?Z\234\326l\237\250\256?\370\377\377\377\377\377\273?\351:Fq\256c\304?\231x?r\232\257\325?\n\327\243p=\n\267?a\271\247\021\226{\312?\013\361\024I3\270\307?\371\355RO\306o\307?\311\235\242\2053 \304?z\201h\332\303\237\337?\312d2\231L&\343?Ok\266OT\017\312?\000\000\000\000\000\000\331?\235\353\030\305\271\216\321?<\004n,\203R\341?\341z\024\256G\341\332?\226{\032a\271\247\261?\024\345XP\\\030\301?\251\'\343\267K=\271?\241\344N\321\302\031\340?40\2003\037e\333?+\026\213\305b\261\330?;\177\213\323\232\355\303?\000\000\000\000\000\000\304?[X\351\251\205\225\336?Y\006\245\302\304\373\301?\232\231\231\231\231\231\331?\226{\032a\271\247\301?u)\371o\226`\302?6\007\022\255\2609\300?\241\344N\321\302\031\300?KA\002jv\275\350?\251T*\225J\245\342?\304\227\033b@:\326?\374\377\377\377\377\377\307?\237ZX\351\251\205\325?O\363\265zv\010\334?333333\343?\265\372RA\253/\265?Y\036ods^\305?\227z2~\273\324\303?\251\t\306[\331\347\340?}\254\255\342\235\374\340?\315\345r\271\\.\327?X\341\313\r1 \275?\370\377\377\377\377\377\273?\2448\3271\212s\315?j\276V\317\016\201\313?333333\323?\016x\374\341\200\307\257?\275\303\272-\363\021\272?Zas \321\n\333?\002\241\344N\321\302\331?\2400\347q\351\333\337?H$\022\211D\"\341?;\177\213\323\232\355\303?\000\000\000\000\000\000\304?\300\333\017\t\274\375\300?\"pc\031\224\n\263?\232\231\231\231\231\231\331?\225{\032a\271\247\241?\333\316D9\026\024\267?\2619\220h\205\315\341?\000\000\000\000\000\000\360?\374t\357KF=\265?l6\233\315f\263\331?;\177\213\323\232\355\303?\000\000\000\000\000\000\341?\017\232|\331\240\311\307?\304\373\221\323|\255\336?{\024\256G\341z\264?\266\211\222]\233(\311?\374:z\356~\201\267?\251\'\343\267K=\271?\241\344N\321\302\031\260?z\264 \0015\273\316?Z,\026\213\305b\341?X\341\313\r1 \275?\377\377\377\377\377\177\344?\235\353\030\305\271\216\321?\351\242\213.\272\350\342?\000\000\000\000\000\000\000\000\2008\340\361\207\003\276?\302$f\3278}\275?\347@\242\0256\007\262?\002\241\344N\321\302\251?\023\013\253\021\351t\341?\013\207\303\341p8\334?X\341\313\r1 \275?\004\000\000\000\000\000\300? \022x\373!\201\347?\353\331!pc\031\324?\232\231\231\231\231\231\341?\316[\014\351\274\305\300?\237W\205x\212\244\271?H\264\302\346@\242\265?\"5\301x+\373\274?%\305;\371\301\234\347?e4\032\215F\243\321?\322\310;\177\213\323\312?\001\000\000\000\000\000\330?\240\311\227\r\232|\331?\330\352\331!pc\311?\366(\\\217\302\365\330?\016x\374\341\200\307\257?\027F\004\372\241\203\264?\347@\242\0256\007\322?E\013g@(\271\323?\310/\031\365T\356\326?\214\305b\261X,\326?\370rC\014H\307\322?\000\000\000\000\000\000\331?\353\030\305\271\216Q\314?\363\265zv\010\334\330?{\024\256G\341z\224?\322y\213!\235\267\270?\341\220\233\214\241\352\275?p\227z2~\273\324?\261.=\346\357\265\341?i;\222\203\322P\341?\031\215F\243\321h\344?]\234\326l\237\250\276?\374\377\377\377\377\377\307?|\331\240\311\227\r\332?Y\006\245\302\304\373\321?q=\n\327\243p\315?\2008\340\361\207\003\276?\003/\276\365\247\341\300?\273\324\223\361\333\245\316?\236\242\2053 \224\334?\314\234\307\245o\177\345?(\225J\245R\251\324?S&\301\256\302\227\273?\002\000\000\000\000\000\302?\240\311\227\r\232|\331?u\321E\027]t\321?ffffff\326?a\271\247\021\226{\272?\242\2700\"\320\017\275?\227z2~\273\324\323?\"5\301x+\373\334?)A\233+\254F\344?\007\004\002\201@ \340?\303\227\033b@:\306?\000\000\000\000\000\000\304?\035\2438\3271\212\343?\320\016\201\033\313\240\304?H\341z\024\256G\341?\265\372RA\253/\265?$i\006\367r\305\276?\013\233\003\211V\330\254?\"5\301x+\373\254?)A\233+\254F\344?\010\006\203\301`0\310?\324\203F\336\371[\314?\370\377\377\377\377\377\273?\300\333\017\t\274\375\320?Y\006\245\302\304\373\301?\\\217\302\365(\\\337?\017x\374\341\200\307\277?\024\345XP\\\030\301?H\264\302\346@\242\325?\331\347\220\232`\274\325?0N\260\263R\204\340?/\227\313\345r\271\334?@:\2262\tv\305?\376\377\377\377\377\377\317?\235\353\030\305\271\216\321?~\255\236\035\0027\326?\244p=\n\327\243\320?\226{\032a\271\247\261?\343\302\210@?t\300?\227z2~\273\324\323?\\\331\347\220\232`\354?\272H\247\013y\216\335?\212F\243\321h4\332?;\177\213\323\232\355\303?\374\377\377\377\377\377\307?\353\030\305\271\216Q\314?\353\331!pc\031\304?333333\323?D:o1\244\363\266?3Q\216\005\305\205\261?\224\361\333\245\236\214\337?4 \224\334)Z\350?\223fpM\3426\336?\004\205B\241P(\304?\253\007\215\274\363\267\350?\000\000\000\000\000\000\304?Vzja\245\247\306?7\226A\2510\361\336?\354Q\270\036\205\353\261?\323y\213!\235\267\250?\037\010[M-Z\273?\347@\242\0256\007\262?\"5\301x+\373\254?\032Kx\300\000\316\334?i4\032\215F\243\341?\271!\006\244c)\303?\376\377\377\377\377\377\325?\370C\002o?$\340?\231x?r\232\257\325?\270\036\205\353Q\270\336?\361\370\303\001\217?\274?y\212\244\031\334\313\265?\347@\242\0256\007\262?2\177\257\215X\227\276?\030\310\014\256I\334\346?\312d2\231L&\323?;\177\213\323\232\355\303?\004\000\000\000\000\000\300?\235\353\030\305\271\216\341?=;\004n,\203\322?\205\353Q\270\036\205\333?\265\372RA\253/\265?\013\212\013#\002\375\320?\371\355RO\306o\327?\362V\3669\244&\330?\037\325!6\360\031\343?i\265Z\255V\253\325?rZ\263}\242z\320?\002\000\000\000\000\000\327?5\371\262A\223/\333?\304\373\221\323|\255\316?\270\036\205\353Q\270\336?\352K\005\255\276T\320?\237W\205x\212\244\271?6\007\022\255\2609\300?\341\014\010%w\212\266?}\254\255\342\235\374\340?\215\307\343\361x<\336?\265f\373D\365\240\321?\377\377\377\377\377\177\342?\3301\212s\035\243\350?G\027]t\321E\307?\244p=\n\327\243\340?\355\332D\311\256M\304?4Q\216\005\305\205\301?\013\233\003\211V\330\314?=\346\357\265\021\353\322?\021\273\367%\243\236\352?\307\347\363\371|>\317?8\304\200t,e\322?\000\000\000\000\000\000\304?Z\351\251\205\225\236\332?<\004n,\203R\341?H\341z\024\256G\321?\316[\014\351\274\305\300?`\340\305\267\3764\274?p\227z2~\273\324?\311\235\242\2053 \324?l3\037e;\222\343?/\227\313\345r\271\334?Ok\266OT\017\312?\377\377\377\377\377\377\324?\305\271\216Q\234\353\330?\375\221\323|\255\236\315?\205\353Q\270\036\205\333?a\271\247\021\226{\272?\034\247\257\243\347\356\267?\251\'\343\267K=\331?\241\344N\321\302\031\320?CJ\252Cl\340\323?\315\345r\271\\.\327?\276\334\020\003\322\261\304?\377\377\377\377\377\177\342?\237ZX\351\251\205\305?\206\211\367#\247\371\332?\037\205\353Q\270\036\325?\016x\374\341\200\307\257?\367\331\316D9\026\264?Zas \321\n\313?\261.=\346\357\265\301?\001\352B\236c\237\330?\316\347\363\371|>\337?\310R&\301\256\302\307?\376\377\377\377\377\377\317?Z\351\251\205\225\236\332?\006\245\302\304\373\221\323?\n\327\243p=\n\327?\357\370\303\001\217?\254?\302$f\3278}\275?\013\233\003\211V\330\234?\002\241\344N\321\302\251?\355\216\344\2404T\340?\255V\253\325j\265\332?\364\2678\255\331>\321?\001\000\000\000\000\000\330?~\331\240\311\227\r\312?~\255\236\035\0027\326?{\024\256G\341z\244?^\233(\331\265\211\302?@t\220\002\226\307\273?H\264\302\346@\242\265?\251\t\306[\331\347\300?)A\233+\254F\344?\374\375~\277\337\357\347?\304\227\033b@:\326?\002\000\000\000\000\000\302?[X\351\251\205\225\316?b\342\375\310i\276\326?\270\036\205\353Q\270\236?\323y\213!\235\267\250?\237W\205x\212\244\271?\013\233\003\211V\330\314?\"5\301x+\373\314?N\025\210\246=\374\331?\361\367\373\375~\277\337?D\365\240\221w\376\266?\000\000\000\000\000\000\264?{ja\245\247\026\346?\016\201\033\313\240T\310?\\\217\302\365(\\\337?\2008\340\361\207\003\276?\201L\373lg\242\274?\371\355RO\306o\327?~\016\251\t\306[\331?5\013\022P\263\353\345?\312d2\231L&\323?\260\253\360\345\206\030\320?\001\000\000\000\000\000\323?\020\t\274\375\220\300\333?Y\006\245\302\304\373\321?\\\217\302\365(\\\337?\nZ}\251\240\325\327?\232\366\331\316D9\266?\013\233\003\211V\330\254?\261.=\346\357\265\261?O\360\031\303\321\202\344?\353\365z\275^\257\327?\\\234\326l\237\250\316?\000\000\000\000\000\000\331?\215\342\\\307(\316\345?\217eP*L\274\277?\\\217\302\365(\\\337?&\2736Q\262k\303?\201L\373lg\242\274?\321\n\233\003\211V\330?\241\344N\321\302\031\320?\017\\\223\270\215\257\345?\315\345r\271\\.\327?w\025\276\334\020\003\322?\376\377\377\377\377\377\320?\353\030\305\271\216Q\314?\030]t\321E\027\335?\000\000\000\000\000\000\000\000\322y\213!\235\267\270?\003\375\320A\nX\276?\273\324\223\361\333\245\316?\251\t\306[\331\347\300?|y\365\273,\341\341?i4\032\215F\243\341?\261\253\360\345\206\030\300?\002\000\000\000\000\000\302?\2448\3271\212s\335?\353\331!pc\031\324?\\\217\302\365(\\\337?\2008\340\361\207\003\276?\215\241\352\035\326m\331?\013\233\003\211V\330\254?\341\014\010%w\212\266?\234N\027\362\034\373\344?/\227\313\345r\271\334?\265f\373D\365\240\321?\376\377\377\377\377\377\325?\305\271\216Q\234\353\330?j\276V\317\016\201\313?=\n\327\243p=\332?a\271\247\021\226{\272?\306\267\3764\034r\303?\347@\242\0256\007\262?\002\241\344N\321\302\231?\rNIu\210\r\334?\347t:\235N\247\323?\271!\006\244c)\303?\000\000\000\000\000\000\341?\300\333\017\t\274\375\340?\216eP*L\274\317?\270\036\205\353Q\270\336?\017x\374\341\200\307\277?\272b\017\204\255\246\266?\013\233\003\211V\330\254?\301x+\373\034R\263?V\375.Kx\300\340?\353\365z\275^\257\327?\277\334\020\003\322\261\324?\002\000\000\000\000\000\334?Vzja\245\247\306?\016\201\033\313\240T\330?\000\000\000\000\000\000\000\000D:o1\244\363\266?\226\225.%\377\315\302?\264\302\346@\242\025\346?e\237Cj\202\361\326?\256\027Y[\305;\331?Z\255V\253\325j\345?\322\310;\177\213\323\312?\001\000\000\000\000\000\335?\304JO-\254\364\324?~\255\236\035\0027\306?\341z\024\256G\341\332?\322y\213!\235\267\270?]\177\032\016\271\311\270?\013\233\003\211V\330\274?\341\014\010%w\212\266?I\213\3360N\260\323?\007\004\002\201@ \340?3\tv\025\276\334\320?\377\377\377\377\377\377\344?\370C\002o?$\340?\220\234\346k\365\354\320?\000\000\000\000\000\000\340?\016x\374\341\200\307\317?\007\220i\237\355L\304?\013\233\003\211V\330\254?\341\014\010%w\212\246?\323v$\007\245\241\342?\312f\263\331l6\333?\271!\006\244c)\323?\000\000\000\000\000\000\336?\305\271\216Q\234\353\330?Y\006\245\302\304\373\321?q=\n\327\243p\315?\316[\014\351\274\305\300?\024\345XP\\\030\301?\321\n\233\003\211V\330?E\013g@(\271\343?F\204\240\315\025V\343?\211D\"\221H$\322?\266f\373D\365\240\301?\370\377\377\377\377\377\273?y\373!\201\267\037\302?G\027]t\321E\327?\n\327\243p=\n\267?\357\370\303\001\217?\254?3Q\216\005\305\205\261?p\227z2~\273\324?\321\302\031\020J\356\304?#\017\030\300\231\217\322?\013\205B\241P(\344?\276\334\020\003\322\261\304?\002\000\000\000\000\000\334?x\373!\201\267\037\322?G\027]t\321E\327?R\270\036\205\353Q\310?&\2736Q\262k\263?\302$f\3278}\275?\013\233\003\211V\330\314?M0\336\312>\207\344?\032Kx\300\000\316\334?L\247\323\351t:\335?\261\253\360\345\206\030\300?\000\000\000\000\000\000\304?\353\030\305\271\216Q\314?4(\025&\336\217\334?\000\000\000\000\000\000\000\000a\271\247\021\226{\312?cAqaD\240\277?\013\233\003\211V\330\314?:\244&\030oe\317?9\272)\251\016\261\341?\211D\"\221H$\342?\261\253\360\345\206\030\300?\000\000\000\000\000\000\304?\345\313\006M\276l\320?\274\0379\315\327\352\331?\232\231\231\231\231\231\311?\357\370\303\001\217?\254?\037\010[M-Z\273?\224\361\333\245\236\214\337?\331\347\220\232`\274\325?.@fpM\342\326?\211D\"\221H$\322?A:\2262\tv\245?\004\000\000\000\000\000\300?\303JO-\254\364\344?\353\331!pc\031\324?\341z\024\256G\341\342?\225{\032a\271\247\241?\275\303\272-\363\021\272?\227z2~\273\324\323?\"5\301x+\373\314?\323v$\007\245\241\342?\203D\"\221H$\302?\322\310;\177\213\323\312?\000\000\000\000\000\000\324?\346:Fq\256c\324?u\321E\027]t\341?\000\000\000\000\000\000\000\000D:o1\244\363\266?\343\302\210@?t\300?H\264\302\346@\242\305?\241\344N\321\302\031\300?\206\030\'\330Y)\342?\361\367\373\375~\277\337?<\177\213\323\232\355\263?\376\377\377\377\377\377\305?\305\271\216Q\234\353\310?\363\265zv\010\334\330?\270\036\205\353Q\270\256?_*h\365\245\202\326?\027F\004\372\241\203\264?\347@\242\0256\007\302?\301x+\373\034R\263?\032Kx\300\000\316\334?:\034\016\207\303\341\340?;\177\213\323\232\355\303?\002\000\000\000\000\000\327?U\013+=\265\260\322?\253g\207\300\215e\320?\341z\024\256G\341\312?\323y\213!\235\267\250?\367\331\316D9\026\304?6\007\022\255\2609\300?\372{m\304\272\364\310?\340\304m|-\257\336?i\265Z\255V\253\325?\304\227\033b@:\326?\000\000\000\000\000\000\304?5\371\262A\223/\313?\353\331!pc\031\324?\000\000\000\000\000\000\320?&\2736Q\262k\263?]\177\032\016\271\311\270?\013\233\003\211V\330\234?\002\241\344N\321\302\271?g\251u\357KF\335?l6\233\315f\263\331?E\365\240\221w\376\306?\370\377\377\377\377\377\273?1\212s\035\2438\327?\340\3062(\025&\336?\327\243p=\n\327\323?^\233(\331\265\211\302?cAqaD\240\277?\227z2~\273\324\323?\256\354sHM0\336?\262\204\007\014\340\314\347?\251T*\225J\245\342?\336\371[\234\326l\317?\377\377\377\377\377\377\336?\240\311\227\r\232|\331?\"pc\031\224\n\303?\303\365(\\\217\302\325?&\2736Q\262k\263?\232\366\331\316D9\266?\227z2~\273\324\303?2\177\257\215X\227\276?\216\334\306\327\362\352\327?\212F\243\321h4\332?{\320\310;\177\213\323?\376\377\377\377\377\377\337?\256c\024\347:F\341?\016\201\033\313\240T\310?\366(\\\217\302\365\340?\2008\340\361\207\003\276?]\177\032\016\271\311\270?\013\233\003\211V\330\254?\241\344N\321\302\031\260?V\375.Kx\300\340?(\225J\245R\251\324?J\260\253\360\345\206\310?\000\000\000\000\000\000\331?Vzja\245\247\306?\227A\2510\361~\344?{\024\256G\341z\244?\322y\213!\235\267\270?\034\247\257\243\347\356\267?H\264\302\346@\242\265?\341\014\010%w\212\246?\256\261\350\r\343\004\333?\371|>\237\317\347\343?\271!\006\244c)\303?\002\000\000\000\000\000\327?\345\313\006M\276l\340?\264C\340\3062(\325?\315\314\314\314\314\314\334?&\2736Q\262k\263?\242\2700\"\320\017\275?\347@\242\0256\007\262?\341\014\010%w\212\246?\334H\016JC\005\342?\016\006\203\301`0\330?rZ\263}\242z\320?\001\000\000\000\000\000\335?\021x\373!\201\267\337?\216eP*L\274\317?=\n\327\243p=\342?|\032a\271\247\021\306?]\177\032\016\271\311\270?H\264\302\346@\242\245?\002\241\344N\321\302\231?0N\260\263R\204\340?\215\307\343\361x<\316?E\365\240\221w\376\306?\376\377\377\377\377\377\305?\013+=\265\260\322\323?=;\004n,\203\342?\000\000\000\000\000\000\000\000\357\370\303\001\217?\314?D\007)`y\274\301?\013\233\003\211V\330\254?\002\241\344N\321\302\251?Y\302\003\006p\346\343?\316\347\363\371|>\337?]\234\326l\237\250\276?\376\377\377\377\377\377\305?\353\030\305\271\216Q\314?4(\025&\336\217\314?\270\036\205\353Q\270\276?\265\372RA\253/\265?\272b\017\204\255\246\266?\371\355RO\306o\307?\"5\301x+\373\274?\374\016\177\376c\006\307?\013\207\303\341p8\334?]\234\326l\237\250\276?\001\000\000\000\000\000\350?U\013+=\265\260\322?\340\3062(\025&\336?\341z\024\256G\341\312?\265\372RA\253/\265?\242\2700\"\320\017\275?\013\233\003\211V\330\334?\320!5\301x+\353?\032Kx\300\000\316\334?l6\233\315f\263\331?S&\301\256\302\227\273?\002\000\000\000\000\000\314?\2448\3271\212s\315?*L\274\0379\315\327?\270\036\205\353Q\270\256?\323y\213!\235\267\250?\037\010[M-Z\273?\013\233\003\211V\330\274?\251\t\306[\331\347\300?V\375.Kx\300\340?\316\347\363\371|>\337?\324\203F\336\371[\314?\376\377\377\377\377\377\305?y\373!\201\267\037\302?\320\016\201\033\313\240\324?\354Q\270\036\205\353\301?\226{\032a\271\247\261?\225\225.%\377\315\262?\251\'\343\267K=\311?\341\014\010%w\212\306?\320o\346\243lG\322?\251T*\225J\245\342?6\304\200t,e\302?\000\000\000\000\000\000\336?Vzja\245\247\346?\353\331!pc\031\304?\n\327\243p=\n\347?D:o1\244\363\266?\237W\205x\212\244\271?\347@\242\0256\007\262?\271S\264p\006\204\302?)A\233+\254F\344?\377\206\303\341p8\274?\370rC\014H\307\322?\004\000\000\000\000\000\312?\024x\373!\201\267\317?\370#\247\371Z=\333?\232\231\231\231\231\231\271?a\271\247\021\226{\272?\242\2700\"\320\017\275?Zas \321\n\313?\331\347\220\232`\274\305?&|\306p\264 \341?L\245R\251T*\345?R&\301\256\302\227\313?\002\000\000\000\000\000\327?x\373!\201\267\037\322?G\027]t\321E\327?R\270\036\205\353Q\310?\016x\374\341\200\307\257?\326m\231\217\320\250\303?\227z2~\273\324\303?%w\212\026\316\200\320?\264\007s\036\227\276\335?\252\325j\265Z\255\326?F\365\240\221w\376\326?\000\000\000\000\000\000\304?h\362e\203&_\346?\221\234\346k\365\354\300?H\341z\024\256G\341?\322y\213!\235\267\270?\341\220\233\214\241\352\275?\227z2~\273\324\303?\271S\264p\006\204\302?\362\030\216\026$\240\346?\246T*\225J\245\322?\334\'\252\007\215\274\343?\004\000\000\000\000\000\312?5\371\262A\223/\313?j\276V\317\016\201\333?{\024\256G\341z\224?\265\372RA\253/\265?\374:z\356~\201\267?\013\233\003\211V\330\274?\022\353\322c\376^\273?\n\2371\034-H\340?\233L&\223\311d\342?Ok\266OT\017\312?\002\000\000\000\000\000\302?\345\313\006M\276l\320?\330\352\331!pc\331?\270\036\205\353Q\270\236?\016x\374\341\200\307\257?D\007)`y\274\301?H\264\302\346@\242\325?\373\034R\023\214\267\342?\357\336\227\214z*\327?\261\327\353\365z\275\336?\261\253\360\345\206\030\300?\376\377\377\377\377\377\317?\303JO-\254\364\344?\221\234\346k\365\354\300?\\\217\302\365(\\\337?\226{\032a\271\247\261?\340/\360\342[\177\272?6\007\022\255\2609\300?\362V\3669\244&\270?9\272)\251\016\261\341?\010\006\203\301`0\310?\315\r1 \035K\311?\002\000\000\000\000\000\314?\013+=\265\260\322\323?\030]t\321E\027\335?\232\231\231\231\231\231\341?\016x\374\341\200\307\257?\252\254t)\371o\306?2~\273\324\223\361\333?\320!5\301x+\353?z\201h\332\303\237\337?i\265Z\255V\253\325?\303\227\033b@:\306?\002\000\000\000\000\000\302?\256c\024\347:F\341?\030]t\321E\027\335?)\\\217\302\365(\314?\017x\374\341\200\307\277?\007\220i\237\355L\304?\013\233\003\211V\330\314?\341\014\010%w\212\306?\376\342\004;+E\350?\312f\263\331l6\333?\n_n\210\001\351\330?\002\000\000\000\000\000\314?\177H\340\355\207\004\336?\353\331!pc\031\324?\270\036\205\353Q\270\316?\322y\213!\235\267\270?\306\267\3764\034r\303?\347@\242\0256\007\262?\002\241\344N\321\302\251?\206\030\'\330Y)\342?\215\307\343\361x<\336?X\341\313\r1 \275?\000\000\000\000\000\000\316?\305\271\216Q\234\353\310?\320\016\201\033\313\240\324?{\024\256G\341z\204?\265\372RA\253/\265?\340/\360\342[\177\272?\013\233\003\211V\330\274?2\177\257\215X\227\276?\347\321\202\004\324\354\332?p\267\333\355v\273\335?\266f\373D\365\240\301?\000\000\000\000\000\000\304?\345\313\006M\276l\320?j\276V\317\016\201\313?=\n\327\243p=\342?\322y\213!\235\267\270?\367\331\316D9\026\304?\013\233\003\211V\330\254?\301x+\373\034R\243?\247=\374\371\217\031\334?\316\347\363\371|>\337?3\tv\025\276\334\300?\001\000\000\000\000\000\335?\2448\3271\212s\315?\304\373\221\323|\255\316?333333\323?\265\372RA\253/\265?\003\375\320A\nX\276?\273\324\223\361\333\245\336?\n\306[\331\347\220\332?\n\2371\034-H\340?i4\032\215F\243\341?X\341\313\r1 \275?\002\000\000\000\000\000\302?\346:Fq\256c\324?\221\234\346k\365\354\300?\232\231\231\231\231\231\331?a\271\247\021\226{\272?\024\345XP\\\030\261?H\264\302\346@\242\245?\002\241\344N\321\302\231?\235\366\360\347?f\320?p\267\333\355v\273\335?\324\203F\336\371[\314?\001\000\000\000\000\200\345?\300\333\017\t\274\375\340?\"pc\031\224\n\323?{\024\256G\341z\344?D:o1\244\363\266?Hh\324\t\277\'\305?\347@\242\0256\007\262?\341\014\010%w\212\266?\n\2371\034-H\340?\212F\243\321h4\332?\315\r1 \035K\311?\376\377\377\377\377\377\337?\300\333\017\t\274\375\320?\246\302\304\373\221\323\334?\232\231\231\231\231\231\271?\264\372RA\253/\245?\333\316D9\026\024\267?\371\355RO\306o\327?E\013g@(\271\323?\272\025\357\344\007s\336?\031\014\006\203\301`\340?S&\301\256\302\227\273?\004\000\000\000\000\000\300?\237ZX\351\251\205\305?\231x?r\232\257\325?\270\036\205\353Q\270\256?&\2736Q\262k\263?y\212\244\031\334\313\265?\251\'\343\267K=\331?2\177\257\215X\227\316?\010\221\347\330\'\246\326?\007\004\002\201@ \340?\271!\006\244c)\323?\002\000\000\000\000\000\322?Z\351\251\205\225\236\332?\033\313\240T\230x\337?\270\036\205\353Q\270\316?\265\372RA\253/\265?]\177\032\016\271\311\270?\013\233\003\211V\330\254?\341\014\010%w\212\266?\340\304m|-\257\336?\312d2\231L&\323?;\177\213\323\232\355\303?\002\000\000\000\000\000\314?~\331\240\311\227\r\312?G\027]t\321E\327?\270\036\205\353Q\270\236?\264\372RA\253/\245?cAqaD\240\277?\224\361\333\245\236\214\337?\241\344N\321\302\031\320?N{\370\363\0373\330?\371|>\237\317\347\343?6\304\200t,e\302?\377\377\377\377\377\377\324?\300\333\017\t\274\375\320?4(\025&\336\217\314?\327\243p=\n\327\323?\322y\213!\235\267\270?\341\220\233\214\241\352\275?\227z2~\273\324\323?\2063 \224\334)\332?\037\325!6\360\031\343?\352t:\235N\247\343?J\260\253\360\345\206\310?\374\377\377\377\377\377\307?\177H\340\355\207\004\336?~\255\236\035\0027\326?\315\314\314\314\314\314\334?\322y\213!\235\267\270?|\353O\303!7\271?Zas \321\n\313?\022\353\322c\376^\313?\302\375\225\211B7\345?\031\014\006\203\301`\340?\303\227\033b@:\306?\002\000\000\000\000\000\302?\177H\340\355\207\004\336?~\255\236\035\0027\326?\315\314\314\314\314\314\334?\322y\213!\235\267\270?|\353O\303!7\271?Zas \321\n\313?\022\353\322c\376^\313?\302\375\225\211B7\345?\031\014\006\203\301`\340?\303\227\033b@:\306?\002\000\000\000\000\000\302?\017\232|\331\240\311\327?o,\203Ra\342\335?\244p=\n\327\243\320?\323y\213!\235\267\250?\323\014\356\345\212=\300?Zas \321\n\313?\022\353\322c\376^\273?\251\317\030\216\026$\340?L\247\323\351t:\335??:\2262\tv\265?\002\000\000\000\000\000\302?h\362e\203&_\346?Y\006\245\302\304\373\321?)\\\217\302\365(\344?&\2736Q\262k\263?|\353O\303!7\271?\347@\242\0256\007\262?\"5\301x+\373\254?O\360\031\303\321\202\344?O&\223\311d2\311?\277\334\020\003\322\261\324?\376\377\377\377\377\377\320?\2448\3271\212s\315?\006\245\302\304\373\221\323?\n\327\243p=\n\307?\017x\374\341\200\307\277?=\023\345XP\\\270?H\264\302\346@\242\305?\341\014\010%w\212\306?-#k\253x\'\337?\356v\273\335n\267\333?D\365\240\221w\376\266?\370\377\377\377\377\377\273?\237ZX\351\251\205\325?Y\006\245\302\304\373\301?\232\231\231\231\231\231\331?\357\370\303\001\217?\254?\374:z\356~\201\267?\251\'\343\267K=\271?\341\014\010%w\212\266?\341]\226\360\200\001\334?\031\014\006\203\301`\340?\276\334\020\003\322\261\304?\000\000\000\000\000\000\324?6h\362e\203&\337?\241T\230x?r\312?\303\365(\\\217\302\325?a\271\247\021\226{\272?E\325;\254\3332\277?\013\233\003\211V\330\254?\261.=\346\357\265\261?\332P\201h\332\303\337?i\265Z\255V\253\325?J\260\253\360\345\206\310?\377\377\377\377\377\377\324?\235\353\030\305\271\216\321?\036\0027\226A\251\340?H\341z\024\256G\321?\231\231\231\231\231\231\311?8\2629\257\n\361\304?\343\267K=\031\277\335?g@(\271S\264\340?\332\2039\217K\337\336?O&\223\311d2\331?7\304\200t,e\262?\004\000\000\000\000\000\300?\212s\035\2438\327\341?\264C\340\3062(\305?\244p=\n\327\243\340?\016x\374\341\200\307\257?\236W\205x\212\244\311?\013\233\003\211V\330\314?2\177\257\215X\227\316?C\214\023\354\254\024\341?\312f\263\331l6\333?3\tv\025\276\334\320?\000\000\000\000\000\000\336?\306(\316u\214\342\334?\353\331!pc\031\304?\024\256G\341z\024\336?\323y\213!\235\267\250?Y\036ods^\265?H\264\302\346@\242\305?\331\347\220\232`\274\305?F\204\240\315\025V\343?\255V\253\325j\265\332?\315\r1 \035K\311?\000\000\000\000\000\000\316?\351:Fq\256c\304?j\276V\317\016\201\333?\341z\024\256G\341\312?\016x\374\341\200\307\257?\302$f\3278}\275?\371\355RO\306o\307?\311\235\242\2053 \304?\026xY\302\003\006\340?Z\255V\253\325j\345?\315\r1 \035K\311?\004\000\000\000\000\000\312?[X\351\251\205\225\316?\"pc\031\224\n\323?{\024\256G\341z\324?\265\372RA\253/\265?Y\036ods^\265?Zas \321\n\333?\301x+\373\034R\323?\343\274\372]\226\360\340?\013\207\303\341p8\334?J\260\253\360\345\206\310?\000\000\000\000\000\000\316?\260\322S\013+=\345?\375\221\323|\255\236\315?\244p=\n\327\243\340?&\2736Q\262k\263?\024\345XP\\\030\301?\251\'\343\267K=\311?\301x+\373\034R\323?e&\n\335\224T\347?F\247\323\351t:\315?\315\r1 \035K\311?\376\377\377\377\377\377\320?Z\351\251\205\225\236\332?\304\373\221\323|\255\316?\366(\\\217\302\365\330?D:o1\244\363\266?\232\366\331\316D9\266?\227z2~\273\324\303?\311\235\242\2053 \304?l3\037e;\222\343?\212F\243\321h4\332?J\260\253\360\345\206\310?\376\377\377\377\377\377\320?\2448\3271\212s\315?*L\274\0379\315\327?\232\231\231\231\231\231\251?\322y\213!\235\267\270?\302$f\3278}\275?Zas \321\n\313?\362V\3669\244&\310?H\324S\271[,\332?\007\004\002\201@ \340?\276\334\020\003\322\261\304?\002\000\000\000\000\000\322?Z\351\251\205\225\236\332?\"pc\031\224\n\323?\217\302\365(\\\217\322?\265\372RA\253/\265?L\311\177\263\004\223\310?\347@\242\0256\007\262?\241\344N\321\302\031\260?z\201h\332\303\237\337?\016\006\203\301`0\330?\331>Q=h\344\315?\376\377\377\377\377\377\332?Vzja\245\247\266?\224\n\023\357GN\343?\232\231\231\231\231\231\251?\225{\032a\271\247\241?`\340\305\267\3764\254?\227z2~\273\324\303?%w\212\026\316\200\340?\326\222\270\215\257\345\305?+\225J\245R\251\344?\370rC\014H\307\322?\000\000\000\000\000\000\346?\300\333\017\t\274\375\320?\347k\365\354\020\270\341?\341z\024\256G\341\312?\322y\213!\235\267\270?\302VS\213\326\006\300?\347@\242\0256\007\322?\372{m\304\272\364\330?\001\267\212w\362\203\331?\312d2\231L&\323?2\tv\025\276\334\260?\370\377\377\377\377\377\273?\353\030\305\271\216Q\314?\241T\230x?r\332?\270\036\205\353Q\270\256?\361\370\303\001\217?\234?]\177\032\016\271\311\270?\013\233\003\211V\330\254?\301x+\373\034R\243?\366\353\254\024!h\323?i\265Z\255V\253\325?D\365\240\221w\376\266?\004\000\000\000\000\000\312?\237ZX\351\251\205\325?\370#\247\371Z=\333?\n\327\243p=\n\327?&\2736Q\262k\263?\343\302\210@?t\300?\251\'\343\267K=\311?E\013g@(\271\323?6\263\353E\326V\341?/\227\313\345r\271\334?6\304\200t,e\302?\001\000\000\000\000\000\323?\345\313\006M\276l\320?\253g\207\300\215e\320?333333\323?D:o1\244\363\266?Y\036ods^\265?\347@\242\0256\007\262?\301x+\373\034R\243?\310/\031\365T\356\326?i4\032\215F\243\341?\331>Q=h\344\315?\000\000\000\000\000\000\336?[X\351\251\205\225\336?\264C\340\3062(\305?\341z\024\256G\341\342?D:o1\244\363\266?@t\220\002\226\307\273?\013\233\003\211V\330\234?\"5\301x+\373\254?5\013\022P\263\353\345?\315\345r\271\\.\327?\364\2678\255\331>\321?\376\377\377\377\377\377\305?0\0334\371\262A\323?\241T\230x?r\332?\037\205\353Q\270\036\325?\017x\374\341\200\307\277?\323\014\356\345\212=\300?Zas \321\n\313?\372{m\304\272\364\310?V\375.Kx\300\340?/\227\313\345r\271\334?\271!\006\244c)\303?\376\377\377\377\377\377\325?5\371\262A\223/\333?\"pc\031\224\n\303?\354Q\270\036\205\353\341?\316[\014\351\274\305\300?\242\2700\"\320\017\275?\347@\242\0256\007\262?\261.=\346\357\265\261?\264\007s\036\227\276\335?(\225J\245R\251\324?\205F\336\371[\234\326?\376\377\377\377\377\377\337?\2448\3271\212s\315?~\255\236\035\0027\306?\037\205\353Q\270\036\325?\357\370\303\001\217?\254?8\2629\257\n\361\264?\013\233\003\211V\330\234?\341\014\010%w\212\246?\201\216}bj\335\333?+\026\213\305b\261\330?\031\220\216\245L\202\335?\000\000\000\000\000\000\316?\351:Fq\256c\304?\375\221\323|\255\236\315?q=\n\327\243p\315?\323y\213!\235\267\250?\333\316D9\026\024\267?\013\233\003\211V\330\254?\301x+\373\034R\243?\347\321\202\004\324\354\332?\215\307\343\361x<\336?\266f\373D\365\240\301?\370\377\377\377\377\377\273?\2448\3271\212s\315?Ra\342\375\310i\336?\244p=\n\327\243\300?&\2736Q\262k\263?\037\010[M-Z\273?\227z2~\273\324\303?\341\014\010%w\212\266?t\367\276d\324S\331?\356v\273\335n\267\333?\261\253\360\345\206\030\300?\376\377\377\377\377\377\317?\304JO-\254\364\324?\033\313\240T\230x\337?333333\303?\016x\374\341\200\307\257?\343\302\210@?t\300?6\007\022\255\2609\300?\271S\264p\006\204\322?z\201h\332\303\237\337?+\026\213\305b\261\330?3\tv\025\276\334\320?\000\000\000\000\000\000\304?\2478\3271\212s\275?\274\0379\315\327\352\331?{\024\256G\341z\264?\265\372RA\253/\265?|\353O\303!7\271?Zas \321\n\313?\"5\301x+\373\274?6\263\353E\326V\321?+\225J\245R\251\344?3\tv\025\276\334\320?\377\377\377\377\377\377\331?\020\t\274\375\220\300\333?\363\265zv\010\334\330?)\\\217\302\365(\334?\322y\213!\235\267\270?|\353O\303!7\271?\347@\242\0256\007\322?\372{m\304\272\364\330?\351\254\024!hs\345?\211D\"\221H$\342?E\365\240\221w\376\306?\000\000\000\000\000\000\304?|\331\240\311\227\r\332?\253g\207\300\215e\320?\\\217\302\365(\\\337?a\271\247\021\226{\272?cAqaD\240\277?\227z2~\273\324\323?]z\314\337k#\346?9\272)\251\016\261\341?+\026\213\305b\261\330?\310R&\301\256\302\307?\000\000\000\000\000\000\304?[X\351\251\205\225\316?j\276V\317\016\201\313?\341z\024\256G\341\312?&\2736Q\262k\263?\242\2700\"\320\017\275?H\264\302\346@\242\265?\3511\177\257\215X\307?\316\354z\221\265U\334?p\267\333\355v\273\335??:\2262\tv\265?\000\000\000\000\000\000\304?U\013+=\265\260\322?\353\331!pc\031\304?{\024\256G\341z\324?\226{\032a\271\247\261?\333\316D9\026\024\267?\371\355RO\306o\307?\362V\3669\244&\310?#u\210\r|\306\320?:\034\016\207\303\341\340?\266f\373D\365\240\301?\377\377\377\377\377\177\344?\300\333\017\t\274\375\340?+L\274\0379\315\347?\205\353Q\270\036\205\333?\226{\032a\271\247\301?\037\010[M-Z\273? \321\n\233\003\211\326?%w\212\026\316\200\340?l3\037e;\222\343?H$\022\211D\"\321?6\304\200t,e\302?\376\377\377\377\377\377\317?\237ZX\351\251\205\305?\264C\340\3062(\325?)\\\217\302\365(\274?\016x\374\341\200\307\257?\275\303\272-\363\021\272?H\264\302\346@\242\305?\002\241\344N\321\302\311?\001\267\212w\362\203\331?\215\307\343\361x<\336?X\341\313\r1 \275?\004\000\000\000\000\000\300?\017\232|\331\240\311\307?\241T\230x?r\332?\341z\024\256G\341\312?\226{\032a\271\247\261?\201L\373lg\242\274?\251\'\343\267K=\271?\341\014\010%w\212\326?\n\2371\034-H\340?\352t:\235N\247\343?\271!\006\244c)\303?\004\000\000\000\000\000\300?\235\353\030\305\271\216\321?\033\313\240T\230x\337?{\024\256G\341z\204?\265\372RA\253/\265?\232\366\331\316D9\266?Zas \321\n\333?*Z8\003B\311\315?\020\004m\256\260\032\321?:\034\016\207\303\341\340?6\304\200t,e\302?\001\000\000\000\000\200\340?U\013+=\265\260\322?\006\245\302\304\373\221\323?{\024\256G\341z\324?\226{\032a\271\247\261?\341\220\233\214\241\352\275?\013\233\003\211V\330\314?\226}\016\251\t\306\353?z\201h\332\303\237\337?\315\345r\271\\.\327?3\tv\025\276\334\300?\000\000\000\000\000\000\304?|\373!\201\267\037\262?\253g\207\300\215e\340?\n\327\243p=\n\267?\357\370\303\001\217?\254?\343\302\210@?t\300?Zas \321\n\313?\241\344N\321\302\031\300?#\017\030\300\231\217\322?\334\355v\273\335n\347?\266f\373D\365\240\301?\377\377\377\377\377\377\336?\240\311\227\r\232|\331?Y\006\245\302\304\373\301?\037\205\353Q\270\036\325?\354\332D\311\256M\264?y\212\244\031\334\313\265?H\264\302\346@\242\305?\251\t\306[\331\347\300?\216\334\306\327\362\352\327?\212F\243\321h4\332?{\320\310;\177\213\323?\376\377\377\377\377\377\337?x\373!\201\267\037\342?\"pc\031\224\n\303?\217\302\365(\\\217\342?\265\372RA\253/\265?V\275\303\272-\363\261?H\264\302\346@\242\265?\321\302\031\020J\356\264?\323v$\007\245\241\342?/\227\313\345r\271\334?\200\213\323\232\355\023\325?\000\000\000\000\000\000\324?\013+=\265\260\322\343?G\027]t\321E\267?=\n\327\243p=\342?\016x\374\341\200\307\257?\340/\360\342[\177\272?\013\233\003\211V\330\234?\002\241\344N\321\302\211?\371%\243\236\312\335\342?\013\205B\241P(\324?\324\203F\336\371[\314?\002\000\000\000\000\000\314?\020\t\274\375\220\300\333?\006\245\302\304\373\221\343?\244p=\n\327\243\320?\226{\032a\271\247\261?\201L\373lg\242\274?H\264\302\346@\242\305?\261.=\346\357\265\301?\023>c8Z\220\340?l6\233\315f\263\331?\303\227\033b@:\306?\000\000\000\000\000\000\316?\370C\002o?$\340?\217eP*L\274\277?\270\036\205\353Q\270\316?\265\372RA\253/\265?\237W\205x\212\244\271?\251\'\343\267K=\311?\331\347\220\232`\274\305?N\025\210\246=\374\331?\016\006\203\301`0\330?\315\r1 \035K\311?\001\000\000\000\000\200\345?\235\353\030\305\271\216\341?Y\006\245\302\304\373\301?\341z\024\256G\341\332?\323y\213!\235\267\250?$i\006\367r\305\276?6\007\022\255\2609\320?\251\t\306[\331\347\300?H\007\014\340\314G\331?\312f\263\331l6\333?\\\234\326l\237\250\316?\000\000\000\000\000\000\341?\017\232|\331\240\311\307?~\255\236\035\0027\326?\244p=\n\327\243\300?&\2736Q\262k\263?\037\010[M-Z\273?\251\'\343\267K=\311?\362V\3669\244&\310?}\254\255\342\235\374\340?{\275^\257\327\353\345?\310R&\301\256\302\307?\004\000\000\000\000\000\312?\235\353\030\305\271\216\321?\246\302\304\373\221\323\334?\000\000\000\000\000\000\000\000a\271\247\021\226{\272?\363x#\233\363\252\300?\251\'\343\267K=\271?\321\302\031\020J\356\264?\243[,z\3038\341?\255V\253\325j\265\332?\\\234\326l\237\250\316?\004\000\000\000\000\000\300?\024x\373!\201\267\277?\216eP*L\274\317?R\270\036\205\353Q\310?&\2736Q\262k\263?\377\233%\230\304\354\272?\277]\352\311\370\355\322?%w\212\026\316\200\320?N{\370\363\0373\330?\031\014\006\203\301`\340?\364\2678\255\331>\321?\000\000\000\000\000\000\316?\263A\223/\0334\351?\231x?r\232\257\325?H\341z\024\256G\351?\262k\023%\2736\321?\332\316D9\026\024\307?\227z2~\273\324\323?\236\242\2053 \224\334?\252w\362\2039\217\353?\214\305b\261X,\326?3\tv\025\276\334\320?\000\000\000\000\000\200\346?\305\271\216Q\234\353\310?\340\3062(\025&\336?\000\000\000\000\000\000\000\000\317\352K\005\255\276\324?\033\247\257\243\347\356\307?\347@\242\0256\007\322?\321\302\031\020J\356\324?\362\030\216\026$\240\346?\211D\"\221H$\342?\331>Q=h\344\315?\376\377\377\377\377\377\320?5\371\262A\223/\313?~\255\236\035\0027\326?\n\327\243p=\n\267?&\2736Q\262k\263?\302$f\3278}\275?6\007\022\255\2609\300?\241\344N\321\302\031\260?(2\352\251\334-\326?Z,\026\213\305b\341?;\177\213\323\232\355\303?\000\000\000\000\000\000\336?\235\353\030\305\271\216\321?\375\221\323|\255\236\275?333333\323?\357\370\303\001\217?\254?\367\331\316D9\026\264?\016$Zas \321?\002\241\344N\321\302\311?\242\200\232]/\262\326?\356v\273\335n\267\333??:\2262\tv\265?\002\000\000\000\000\000\327?\353\030\305\271\216Q\314?\253g\207\300\215e\320?\341z\024\256G\341\332?\354\332D\311\256M\324?]\177\032\016\271\311\270?\251\'\343\267K=\331?\270\262\317!5\301\350?}\254\255\342\235\374\340?H$\022\211D\"\341?\331>Q=h\344\315?\000\000\000\000\000\000\324?\305\271\216Q\234\353\310?B\2510\361~\344\344?\270\036\205\353Q\270\256?&\2736Q\262k\263?\027F\004\372\241\203\264?H\264\302\346@\242\245?\241\344N\321\302\031\240?\372\017\346<.}\333?\371|>\237\317\347\343?\310R&\301\256\302\307?\001\000\000\000\000\000\330?\345\313\006M\276l\320?7\226A\2510\361\336?\270\036\205\353Q\270\316?\016x\374\341\200\307\257?\205\337\223\312J\227\342?\251\'\343\267K=\311?e\237Cj\202\361\326?\264\007s\036\227\276\335?\212F\243\321h4\312?\211\001\351X\312$\350?\000\000\000\000\000\000\304?f\203&_6h\342?\353\331!pc\031\304?\\\217\302\365(\\\337?\017x\374\341\200\307\277?4Q\216\005\305\205\301?Zas \321\n\313?%w\212\026\316\200\320?\002\222\034\224\206\n\344?\312d2\231L&\323?\017\032y\347oq\332?\377\377\377\377\377\377\324?\300\333\017\t\274\375\300?\264C\340\3062(\305?\000\000\000\000\000\000\320?\322y\213!\235\267\270?|\353O\303!7\271?\227z2~\273\324\323?\321\302\031\020J\356\324?Zy\216}bj\335?H$\022\211D\"\341?I\260\253\360\345\206\330?\377\377\377\377\377\377\324?\346:Fq\256c\324?\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\357\370\303\001\217?\254?\302$f\3278}\275?\013\233\003\211V\330\234?\301x+\373\034R\243?\264\007s\036\227\276\335?\371|>\237\317\347\343?I\260\253\360\345\206\270?\001\000\000\000\000\000\330?\2448\3271\212s\335?\220\234\346k\365\354\320?\024\256G\341z\024\336?\361\370\303\001\217?\274?y\212\244\031\334\313\265?\013\233\003\211V\330\274?\261.=\346\357\265\301?\371%\243\236\312\335\342?O&\223\311d2\331?J\260\253\360\345\206\310?\002\000\000\000\000\000\327?\2448\3271\212s\335?4(\025&\336\217\334?\366(\\\217\302\365\330?\355\332D\311\256M\304?\003\375\320A\nX\276?\347@\242\0256\007\322?UUUUUU\325?u\237\230Z\367\276\344?\361\367\373\375~\277\337?W\341\313\r1 \315?\000\000\000\000\000\000\336?\237ZX\351\251\205\305?\320\016\201\033\313\240\344?\000\000\000\000\000\000\000\000\323y\213!\235\267\250?\024\345XP\\\030\261?\013\233\003\211V\330\274?\261.=\346\357\265\261?\250\364\206q\202\235\325?\312d2\231L&\343?E\365\240\221w\376\306?\001\000\000\000\000\000\330?\215\342\\\307(\316\345?4(\025&\336\217\314?)\\\217\302\365(\344?\322y\213!\235\267\270?\003/\276\365\247\341\300?\347@\242\0256\007\262?\301x+\373\034R\263?\376\342\004;+E\350?L\245R\251T*\325?I\260\253\360\345\206\270?\000\000\000\000\000\000\304?5\371\262A\223/\333?G\027]t\321E\307?\256G\341z\024\256\327?D:o1\244\363\266?\377\233%\230\304\354\272?\013\233\003\211V\330\254?\341\014\010%w\212\246?\323v$\007\245\241\342?\016\006\203\301`0\330?\303\227\033b@:\306?\370\377\377\377\377\377\273?[X\351\251\205\225\316?\363\265zv\010\334\330?\244p=\n\327\243\320?&\2736Q\262k\263?\242\2700\"\320\017\275?\013\233\003\211V\330\314?E\013g@(\271\343?\341\220N\027\362\034\333?\312f\263\331l6\333?X\341\313\r1 \275?\002\000\000\000\000\000\314?\370C\002o?$\340?\304\373\221\323|\255\316?\341z\024\256G\341\332?a\271\247\021\226{\272?`y\274\221\315y\325?\347@\242\0256\007\262?\002\241\344N\321\302\251?5\013\022P\263\353\345?\252\325j\265Z\255\326?\303\227\033b@:\306?\000\000\000\000\000\000\304?\035\2438\3271\212\343?\330\352\331!pc\251?R\270\036\205\353Q\340?)\331\265\211\222]\313?\326m\231\217\320\250\303?H\264\302\346@\242\245?\022\353\322c\376^\273?\313i\017\177\376c\346?\312f\263\331l6\333?I\260\253\360\345\206\330?\376\377\377\377\377\377\317?\020\t\274\375\220\300\333?\241T\230x?r\312?\244p=\n\327\243\340?&\2736Q\262k\263?\323\014\356\345\212=\300?\227z2~\273\324\303?5\301x+\373\034\322?.\274\223\037\314y\334?\356v\273\335n\267\333?\271!\006\244c)\303?\377\377\377\377\377\377\331?\013+=\265\260\322\323?\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\016x\374\341\200\307\257?\341\220\233\214\241\352\275?\013\233\003\211V\330\234?\301x+\373\034R\243?\264\007s\036\227\276\335?\013\205B\241P(\344?D\365\240\221w\376\266?\001\000\000\000\000\000\330?\035\2438\3271\212\343?\353\331!pc\031\304?R\270\036\205\353Q\340?D:o1\244\363\266?\201L\373lg\242\274?\371\355RO\306o\307?\261.=\346\357\265\301?\037\325!6\360\031\343?F\247\323\351t:\315?F\365\240\221w\376\326?\004\000\000\000\000\000\312?\300\333\017\t\274\375\320?\304\373\221\323|\255\316?\270\036\205\353Q\270\316?\016x\374\341\200\307\257?\242\2700\"\320\017\275?H\264\302\346@\242\245?\241\344N\321\302\031\240?\032Kx\300\000\316\334?\312f\263\331l6\333?;\177\213\323\232\355\303?\000\000\000\000\000\000\304?\353\030\305\271\216Q\314?r\232\257\325\263C\340?{\024\256G\341z\304?\226{\032a\271\247\261?\226\225.%\377\315\302?\251\'\343\267K=\311?\236\242\2053 \224\334?\340\304m|-\257\336?\255V\253\325j\265\332?\310R&\301\256\302\307?\004\000\000\000\000\000\300?\304JO-\254\364\324?\353\331!pc\031\304?\366(\\\217\302\365\330?a\271\247\021\226{\272?`\340\305\267\3764\274?\013\233\003\211V\330\314?*Z8\003B\311\315?\034hs\205\325\210\324?/\227\313\345r\271\334?3\tv\025\276\334\320?\000\000\000\000\000\000\344?\2448\3271\212s\315?\"pc\031\224\n\323?\354Q\270\036\205\353\261?\354\332D\311\256M\324?\343\302\210@?t\300?6\007\022\255\2609\300?\301x+\373\034R\263?s@4\355\341\317\337?\361\367\373\375~\277\337?\322\310;\177\213\323\312?\376\377\377\377\377\377\332?\323S\013+=\265\340?\221\234\346k\365\354\300?R\270\036\205\353Q\340?\357\370\303\001\217?\254?\242\2700\"\320\017\275?6\007\022\255\2609\300?\"5\301x+\373\274?\037\325!6\360\031\343?\315\345r\271\\.\327?A:\2262\tv\325?\002\000\000\000\000\000\302?Vzja\245\247\266?4(\025&\336\217\334?\000\000\000\000\000\000\000\000D:o1\244\363\266?\302VS\213\326\006\300?\013\233\003\211V\330\234?\241\344N\321\302\031\240?\375\222QO\345n\321?\035\016\207\303\341p\350?E\365\240\221w\376\306?\001\000\000\000\000\200\345?\024x\373!\201\267\317?\375\221\323|\255\236\335?{\024\256G\341z\304?\016x\374\341\200\307\257?`\340\305\267\3764\274?\227z2~\273\324\303?\n\306[\331\347\220\312?`i\250@4\355\341?\312d2\231L&\343?\324\203F\336\371[\314?\002\000\000\000\000\000\314?\300\333\017\t\274\375\320?\253g\207\300\215e\320?\232\231\231\231\231\231\331?\017x\374\341\200\307\277?\341\220\233\214\241\352\275?\347@\242\0256\007\262?\241\344N\321\302\031\240?\356x\'?\230\363\330?i4\032\215F\243\341?\261\253\360\345\206\030\300?\377\377\377\377\377\177\342?\323S\013+=\265\340?\330\352\331!pc\271?\024\256G\341z\024\336?\265\372RA\253/\265?\333\316D9\026\024\267?\347@\242\0256\007\262?\"5\301x+\373\274?\206\030\'\330Y)\342?(\225J\245R\251\324?\002\351X\312$\330\325?\000\000\000\000\000\000\331?\346:Fq\256c\324?F\027]t\321E\347?\n\327\243p=\n\267?\322y\213!\235\267\270?\272b\017\204\255\246\266?H\264\302\346@\242\265?\372{m\304\272\364\310?\2400\347q\351\333\337?L\247\323\351t:\335?3\tv\025\276\334\300?\000\000\000\000\000\000\264?\237ZX\351\251\205\325?\030]t\321E\027\335?R\270\036\205\353Q\310?D:o1\244\363\266?$\233\363\252\020O\301?\347@\242\0256\007\302?\226}\016\251\t\306\333?&|\306p\264 \341?\315\345r\271\\.\327?;\177\213\323\232\355\303?\370\377\377\377\377\377\273?5\371\262A\223/\313?\253g\207\300\215e\320?{\024\256G\341z\224?\226{\032a\271\247\261?\242\2700\"\320\017\275?\251\'\343\267K=\311?\261.=\346\357\265\301?h`\000g>\312\326?\261\327\353\365z\275\336?8\304\200t,e\322?\377\377\377\377\377\377\324?\305\271\216Q\234\353\330?Y\006\245\302\304\373\341?\270\036\205\353Q\270\276?a\271\247\021\226{\272?\003\375\320A\nX\276?\251\'\343\267K=\271?\261.=\346\357\265\301?\357S\271[,z\343?p\267\333\355v\273\335?J\260\253\360\345\206\310?\001\000\000\000\000\000\323?\353\030\305\271\216Q\314?\036\0027\226A\251\340?{\024\256G\341z\204?D:o1\244\363\266?\367\331\316D9\026\264?\347@\242\0256\007\302?\301x+\373\034R\263?bR\204\240\315\025\306?\031\014\006\203\301`\340?A:\2262\tv\245?\001\000\000\000\000\200\345?U\013+=\265\260\322?\375\221\323|\255\236\315?\217\302\365(\\\217\322?\016x\374\341\200\307\257?3\037\241Q\'\374\316?\000\000\000\000\000\000\000\0002\177\257\215X\227\316?}\254\255\342\235\374\340?\013\207\303\341p8\334?\205F\336\371[\234\326?\000\000\000\000\000\000\304?\235\353\030\305\271\216\341?u\321E\027]t\321?\037\205\353Q\270\036\325?\361\370\303\001\217?\274?\206\337\223\312J\227\302?\016$Zas \321?\002\241\344N\321\302\311?<\345n\261\350\r\343?O&\223\311d2\331?W\341\313\r1 \315?\002\000\000\000\000\000\327?\304JO-\254\364\324?\221\234\346k\365\354\300?\270\036\205\353Q\270\336?\265\372RA\253/\265?$\233\363\252\020O\301?\347@\242\0256\007\262?\301x+\373\034R\243?\343\255I\334\306\327\322?\212F\243\321h4\332?\303\227\033b@:\306?\000\000\000\000\000\200\343?[X\351\251\205\225\316?\030]t\321E\027\335?{\024\256G\341z\224?D:o1\244\363\266?\237W\205x\212\244\271?Zas \321\n\333?-\234\001\241\344N\341?\016\264\271\302jD\332?L\247\323\351t:\335?\322\310;\177\213\323\312?\004\253\252\252\252\252\331?U\013+=\265\260\322?~\255\236\035\0027\326?\303\365(\\\217\302\325?\361\370\303\001\217?\274?\037\010[M-Z\273?\251\'\343\267K=\271?\261.=\346\357\265\261?\2114\273^dm\305?\315\345r\271\\.\327?\331>Q=h\344\315?\377\377\377\377\377\377\346?[X\351\251\205\225\316?\201\033\313\240T\230\330?\n\327\243p=\n\307?a\271\247\021\226{\272?`\340\305\267\3764\274?\251\'\343\267K=\311?\331\347\220\232`\274\325?\200(\r\025\210\246\335?/\227\313\345r\271\334?\261\253\360\345\206\030\300?\004\000\000\000\000\000\312?\352\251\205\225\236Z\330?eP*L\274\037\331?=\n\327\243p=\332?GX\356i\204\345\336?cAqaD\240\277?\202D+l\016$\332?\217\371{m\304\272\344?\030\310\014\256I\334\346?\255V\253\325j\265\332?6\304\200t,e\302?\004\000\000\000\000\000\300?\235\353\030\305\271\216\321?*L\274\0379\315\327?\341z\024\256G\341\312?\264\372RA\253/\245?=\023\345XP\\\270?H\264\302\346@\242\245?\301x+\373\034R\223?\365\205<\307>1\325?L\245R\251T*\325?\261\253\360\345\206\030\300?\004\000\000\000\000\000\312?\305\271\216Q\234\353\310?G\027]t\321E\327?\270\036\205\353Q\270\236?\357\370\303\001\217?\254?$i\006\367r\305\276?\273\324\223\361\333\245\316?\3511\177\257\215X\307?z\201h\332\303\237\337?i4\032\215F\243\341?E\365\240\221w\376\306?\000\000\000\000\000\000\316?\300\333\017\t\274\375\320?\375\221\323|\255\236\335?{\024\256G\341z\224?\361\370\303\001\217?\234?\237W\205x\212\244\271?\013\233\003\211V\330\274?\341\014\010%w\212\266?\223fpM\3426\336?i\265Z\255V\253\325?\2272\tv\025\276\334?\370\377\377\377\377\377\273?\017\232|\331\240\311\327?\241T\230x?r\312?\270\036\205\353Q\270\336?\265\372RA\253/\265?es^\025\342)\302?\016$Zas \341?\330F\254K\217\371\353?\023\013\253\021\351t\341?\215\307\343\361x<\316?\320\310;\177\213\323\332?\004\000\000\000\000\000\300?\013+=\265\260\322\323?u\321E\027]t\341?q=\n\327\243p\315?\2008\340\361\207\003\276?\367\331\316D9\026\264?\013\233\003\211V\330\254?\"5\301x+\373\254?\n\2371\034-H\340?\361\367\373\375~\277\337?\266f\373D\365\240\301?\002\000\000\000\000\000\334?x\373!\201\267\037\322?\330\352\331!pc\331?\244p=\n\327\243\320?&\2736Q\262k\263?\242\2700\"\320\017\275?Zas \321\n\333?<E\013g@(\351?\341*\336\311\017\346\334?\353\365z\275^\257\327?X\341\313\r1 \275?\002\000\000\000\000\000\314?[X\351\251\205\225\336?\216eP*L\274\317?\000\000\000\000\000\000\340?|\032a\271\247\021\306?\007\220i\237\355L\304?H\264\302\346@\242\265?\362V\3669\244&\270?\254\307\245o\177e\342?\212F\243\321h4\332?F\365\240\221w\376\326?\001\000\000\000\000\200\340?\2448\3271\212s\315?\241T\230x?r\332?{\024\256G\341z\204?\322y\213!\235\267\270?\272b\017\204\255\246\266?\251\'\343\267K=\271?\241\344N\321\302\031\320?\355\364T\356\026\213\316?L\247\323\351t:\335?S&\301\256\302\227\273?\001\000\000\000\000\200\340?\346:Fq\256c\324?\220\234\346k\365\354\320?\270\036\205\353Q\270\316?\322y\213!\235\267\270?y\212\244\031\334\313\265?6\007\022\255\2609\300?\261.=\346\357\265\301?.\274\223\037\314y\334?l6\233\315f\263\331?]\234\326l\237\250\276?\376\377\377\377\377\377\320?[X\351\251\205\225\336?\375\221\323|\255\236\275?H\341z\024\256G\341?\226{\032a\271\247\261?\003\375\320A\nX\276?SO\306o\227z\342?\022\353\322c\376^\333?\t\367W&\n\335\324?\010\006\203\301`0\310?E\365\240\221w\376\306?\001\000\000\000\000\200\340?5\371\262A\223/\273?\375\221\323|\255\236\335?{\024\256G\341z\224?\016x\374\341\200\307\257?\302VS\213\326\006\300?\347@\242\0256\007\322?\261.=\346\357\265\341?\217\250\247r\267X\324?\013\205B\241P(\344?X\341\313\r1 \275?\000\000\000\000\000\000\316?\240\311\227\r\232|\331?Y\006\245\302\304\373\301?\037\205\353Q\270\036\325?\354\332D\311\256M\264?y\212\244\031\334\313\265?H\264\302\346@\242\305?\251\t\306[\331\347\300?\216\334\306\327\362\352\327?\212F\243\321h4\332?{\320\310;\177\213\323?\376\377\377\377\377\377\337?{ja\245\247\026\326?\375\221\323|\255\236\315?\232\231\231\231\231\231\331?\nZ}\251\240\325\327?\323\014\356\345\212=\260?\013\233\003\211V\330\234?\002\241\344N\321\302\231?\016\264\271\302jD\332?\312f\263\331l6\333?\266f\373D\365\240\301?\000\000\000\000\000\200\341?\2448\3271\212s\315?\241T\230x?r\332?\270\036\205\353Q\270\256?\017x\374\341\200\307\277?@t\220\002\226\307\273?\251\'\343\267K=\311?\2766b]z\314\337?L+E\010\332\\\341?\331l6\233\315f\343?\261\253\360\345\206\030\300?\000\000\000\000\000\000\304?~\331\240\311\227\r\312?\206\211\367#\247\371\332?\037\205\353Q\270\036\325?\231\231\231\231\231\231\331?\022Lbv\215\323\327?w\251\'\343\267K\355?\033\261.=\346\357\345?\374_\231(tS\342?\016\006\203\301`0\330?\266f\373D\365\240\301?\000\000\000\000\000\000\304?\300\333\017\t\274\375\300?\264C\340\3062(\305?\000\000\000\000\000\000\320?\016x\374\341\200\307\257?cAqaD\240\277?\013\233\003\211V\330\254?\321\302\031\020J\356\304?\265$n\343ky\325?\316\347\363\371|>\337?2\tv\025\276\334\260?\376\377\377\377\377\377\317?\2448\3271\212s\335?u\321E\027]t\321?R\270\036\205\353Q\330?\361\370\303\001\217?\274?\302$f\3278}\275?\343\267K=\031\277\335?\362V\3669\244&\330?\000\315G\331\216\344\340?(\225J\245R\251\324?\271!\006\244c)\303?\004\000\000\000\000\000\312?\024x\373!\201\267\257?=;\004n,\203\322?)\\\217\302\365(\274?D:o1\244\363\266?$i\006\367r\305\256?Zas \321\n\313?g@(\271S\264\340?\311\346\243lGr\300?\013\205B\241P(\344?\200\213\323\232\355\023\325?\377\377\377\377\377\177\351?U\013+=\265\260\322?$\247\371Z=;\344?\270\036\205\353Q\270\236?\016x\374\341\200\307\257?\326m\231\217\320\250\263?H\264\302\346@\242\245?\002\241\344N\321\302\211?V\375.Kx\300\340?\316\347\363\371|>\337?\000\000\000\000\000\000\000\000\374\377\377\377\377\377\267?\021x\373!\201\267\337?\375\221\323|\255\236\315?\232\231\231\231\231\231\331?\361\370\303\001\217?\274?\034\247\257\243\347\356\267?\347@\242\0256\007\342?\301x+\373\034R\323?\220\352\020\033\370\214\341?\007\004\002\201@ \340?\375-Nk\266O\324?\000\000\000\000\000\000\324?\2448\3271\212s\315?Ra\342\375\310i\336?\244p=\n\327\243\300?&\2736Q\262k\263?\037\010[M-Z\273?\227z2~\273\324\303?\341\014\010%w\212\266?t\367\276d\324S\331?\356v\273\335n\267\333?\261\253\360\345\206\030\300?\376\377\377\377\377\377\317?\346:Fq\256c\324?\353\331!pc\031\324?ffffff\326?\226{\032a\271\247\301?@t\220\002\226\307\273?\347@\242\0256\007\322?4 \224\334)Z\350?9\272)\251\016\261\341?+\026\213\305b\261\330?\303\227\033b@:\306?\002\000\000\000\000\000\302?\2448\3271\212s\315?\264C\340\3062(\325?\354Q\270\036\205\353\261?\225{\032a\271\247\241?\340/\360\342[\177\272?\013\233\003\211V\330\254?\341\014\010%w\212\266?}\254\255\342\235\374\340?L\247\323\351t:\335?8\304\200t,e\322?\376\377\377\377\377\377\305?Vzja\245\247\306?\000\000\000\000\000\000\340?\n\327\243p=\n\267?\354\332D\311\256M\324?\252\254t)\371o\306?\013\233\003\211V\330\274?\261.=\346\357\265\261?\272\025\357\344\007s\336?\261\327\353\365z\275\336?I\260\253\360\345\206\270?\002\000\000\000\000\000\327?[X\351\251\205\225\316?\006\245\302\304\373\221\323?\232\231\231\231\231\231\271?\2008\340\361\207\003\276?\034\247\257\243\347\356\267?H\264\302\346@\242\245?\002\241\344N\321\302\251?\201\364\355\257L\024\332?\013\207\303\341p8\334??:\2262\tv\265?\000\000\000\000\000\000\324?1\212s\035\2438\327?\353\331!pc\031\304?q=\n\327\243p\335?\225{\032a\271\247\241?\367\331\316D9\026\264?\347@\242\0256\007\302?2\177\257\215X\227\276?\340\304m|-\257\336?\316\347\363\371|>\337?rZ\263}\242z\320?\376\377\377\377\377\377\317?0\0334\371\262A\323?\2510\361~\3444\337?\000\000\000\000\000\000\000\000\2008\340\361\207\003\276?\242\2700\"\320\017\275?\347@\242\0256\007\302?\341\014\010%w\212\306?9\272)\251\016\261\341?i4\032\215F\243\341?]\234\326l\237\250\276?\000\000\000\000\000\000\304?\013+=\265\260\322\323?9\315\327\352\331!\340?\000\000\000\000\000\000\000\000\361\370\303\001\217?\274?\302$f\3278}\275?\227z2~\273\324\303?\"5\301x+\373\274?\357\206q\202\235\225\342?\007\004\002\201@ \340?<\177\213\323\232\355\263?\376\377\377\377\377\377\305?\216Q\234\353\030\305\351?\2510\361~\3444\317?\303\365(\\\217\302\345?\226{\032a\271\247\301?E\325;\254\3332\277?\013\233\003\211V\330\314?*Z8\003B\311\315?\021\273\367%\243\236\352?\007\004\002\201@ \320?w\025\276\334\020\003\322?\000\000\000\000\000\000\316?0\0334\371\262A\323?\030]t\321E\027\335?333333\323?&\2736Q\262k\263?\027F\004\372\241\203\264?\242\0256\007\022\255\340?\341\014\010%w\212\326?\347\321\202\004\324\354\332?\212F\243\321h4\332?\266f\373D\365\240\301?\376\377\377\377\377\377\320?\235\353\030\305\271\216\321?\266zv\010\334X\346?\232\231\231\231\231\231\271?\265\372RA\253/\265?Y\036ods^\305?\347@\242\0256\007\302?\002\241\344N\321\302\271?g\251u\357KF\335?\212F\243\321h4\332?Nk\266OT\017\272?\000\000\000\000\000\000\304?\370C\002o?$\340?\231x?r\232\257\325?\270\036\205\353Q\270\336?\361\370\303\001\217?\274?y\212\244\031\334\313\265?\347@\242\0256\007\262?2\177\257\215X\227\276?\030\310\014\256I\334\346?\312d2\231L&\323?;\177\213\323\232\355\303?\004\000\000\000\000\000\300?\2448\3271\212s\315?\206\211\367#\247\371\332?\000\000\000\000\000\000\000\000\226{\032a\271\247\261?es^\025\342)\302?\371\355RO\306o\307?\002\241\344N\321\302\311?S\322\351B\236c\337?\361\367\373\375~\277\337?\271!\006\244c)\303?\000\000\000\000\000\000\264?\017\232|\331\240\311\327?\304\373\221\323|\255\316?{\024\256G\341z\344?D:o1\244\363\266?$\233\363\252\020O\301?\013\233\003\211V\330\274?\"5\301x+\373\314?\002\222\034\224\206\n\344?\013\205B\241P(\344?\315\r1 \035K\311?\000\000\000\000\000\000\324?Vzja\245\247\246?\201\033\313\240T\230\330?\000\000\000\000\000\000\000\000\357\370\303\001\217?\254?\037\010[M-Z\253?\371\355RO\306o\307?\241\344N\321\302\031\340?\"\213Eo\030\'\310?+\225J\245R\251\344?\005\244c)\223`\327?\000\000\000\000\000\000\346?\235\353\030\305\271\216\321?}\255\236\035\0027\346?\232\231\231\231\231\231\311?&\2736Q\262k\263?\343\220\233\214\241\352\255?\251\'\343\267K=\311?\331\347\220\232`\274\325?\001\267\212w\362\203\331?\316\347\363\371|>\337?2\tv\025\276\334\260?\001\000\000\000\000\000\330?\236ZX\351\251\205\345?G\027]t\321E\307?\000\000\000\000\000\000\340?a\271\247\021\226{\272?\333\316D9\026\024\267?6\007\022\255\2609\300?\362V\3669\244&\270?e&\n\335\224T\347?\312d2\231L&\323?\020\003\322\261\224I\340?\370\377\377\377\377\377\273?Vzja\245\247\326?\264C\340\3062(\265?\n\327\243p=\n\327?\226{\032a\271\247\261?\232\366\331\316D9\266?\371\355RO\306o\347?\236\242\2053 \224\334?\rNIu\210\r\334?\233L&\223\311d\342?\277\334\020\003\322\261\324?\000\000\000\000\000\000\331?\020\t\274\375\220\300\333?b\342\375\310i\276\326?\037\205\353Q\270\036\345?\322y\213!\235\267\270?s,(.\214\010\344?\227z2~\273\324\303?\372{m\304\272\364\310?\037\325!6\360\031\343?i\265Z\255V\253\325?Ok\266OT\017\312?\376\377\377\377\377\377\305?\353\030\305\271\216Q\334?\0027\226A\2510\341?\270\036\205\353Q\270\276?\226{\032a\271\247\301?\341\220\233\214\241\352\275?\202D+l\016$\332?\022\353\322c\376^\333?\225\351\333_\231(\344?\013\207\303\341p8\334?\310R&\301\256\302\307?\001\000\000\000\000\000\323?\2448\3271\212s\335?\320\016\201\033\313\240\324?R\270\036\205\353Q\310?\355\332D\311\256M\304?\302$f\3278}\275?\251\'\343\267K=\271?\301x+\373\034R\303?l3\037e;\222\343?+\026\213\305b\261\330?\271!\006\244c)\303?\000\000\000\000\000\000\324?x\373!\201\267\037\322?\353\331!pc\031\324?\303\365(\\\217\302\305?\323y\213!\235\267\250?\341\220\233\214\241\352\275?\347@\242\0256\007\322?\301x+\373\034R\343?\201\216}bj\335\333?\031\014\006\203\301`\340?D\365\240\221w\376\266?\000\000\000\000\000\000\304?\305\271\216Q\234\353\310?\006\245\302\304\373\221\323?)\\\217\302\365(\314?\322y\213!\235\267\270?|\353O\303!7\271?H\264\302\346@\242\305?\"5\301x+\373\274?\\\311Ai\250@\324?:\034\016\207\303\341\340?\271!\006\244c)\323?\002\000\000\000\000\000\334?\177H\340\355\207\004\336?\375\221\323|\255\236\315?\366(\\\217\302\365\340?\231\231\231\231\231\231\331?es^\025\342)\302?\347@\242\0256\007\262?\321\302\031\020J\356\264?\002\222\034\224\206\n\344?\255V\253\325j\265\332?\370rC\014H\307\322?\376\377\377\377\377\377\337?\305\271\216Q\234\353\310?\206\211\367#\247\371\332?\270\036\205\353Q\270\276?\231\231\231\231\231\231\311?\206\337\223\312J\227\302?Zas \321\n\313?\362V\3669\244&\350?\343\357\262\204\007\014\340?\312f\263\331l6\333?@:\2262\tv\305?\000\000\000\000\000\000\304?U\013+=\265\260\322?*L\274\0379\315\327?\327\243p=\n\327\323?&\2736Q\262k\263?\201L\373lg\242\274?6\007\022\255\2609\300?\246\307\374\2756b\335?\032\262OL\255{\337?\356v\273\335n\267\333?R&\301\256\302\227\313?\000\000\000\000\000\000\304?Vzja\245\247\326?\006\245\302\304\373\221\323?R\270\036\205\353Q\340?&\2736Q\262k\263?\201\345\361F6\347\345?Zas \321\n\313?\341\014\010%w\212\326?\254\307\245o\177e\342?F\247\323\351t:\315?\260\253\360\345\206\030\340?\000\000\000\000\000\000\264?\017\232|\331\240\311\327?\274\0379\315\327\352\331?333333\323?\316[\014\351\274\305\300?\323\014\356\345\212=\300?\013\233\003\211V\330\314?\241\344N\321\302\031\320?9\272)\251\016\261\341?\212F\243\321h4\332?S&\301\256\302\227\273?\004\000\000\000\000\000\300?\017\232|\331\240\311\307?\221\234\346k\365\354\240?{\024\256G\341z\344?\265\372RA\253/\265?\367\331\316D9\026\264?p\227z2~\273\324?\271S\264p\006\204\322?.@fpM\342\326?\215\307\343\361x<\336?W\341\313\r1 \315?\376\377\377\377\377\377\332?\235\353\030\305\271\216\321?}\255\236\035\0027\346?\232\231\231\231\231\231\311?&\2736Q\262k\263?\343\220\233\214\241\352\255?\251\'\343\267K=\311?\331\347\220\232`\274\325?\001\267\212w\362\203\331?\316\347\363\371|>\337?2\tv\025\276\334\260?\001\000\000\000\000\000\330?Vzja\245\247\306?\016\201\033\313\240T\330?{\024\256G\341z\224?a\271\247\021\226{\272?=\023\345XP\\\270?6\007\022\255\2609\320?\022\353\322c\376^\313?\260\001\234\371(\333\321?\007\004\002\201@ \340?\315\r1 \035K\311?\377\377\377\377\377\177\344?y\373!\201\267\037\302?*L\274\0379\315\327?\232\231\231\231\231\231\271?\265\372RA\253/\265?$i\006\367r\305\256?H\264\302\346@\242\245?\241\344N\321\302\031\240?\251\'?\230\363\270\324?i4\032\215F\243\341?rZ\263}\242z\320?\002\000\000\000\000\000\327?\351:Fq\256c\304?4(\025&\336\217\314?\037\205\353Q\270\036\325?\264\372RA\253/\305?\242\2700\"\320\017\255?\227z2~\273\324\303?=\346\357\265\021\353\322?\024\3025\211\333\370\312?\316\347\363\371|>\337?\303\227\033b@:\306?\377\377\377\377\377\177\342?\346:Fq\256c\324?j\276V\317\016\201\333?H\341z\024\256G\321?&\2736Q\262k\263?D\007)`y\274\301?\013\233\003\211V\330\254?\236\242\2053 \224\334?\031\243\236\312\335b\341?\347t:\235N\247\323?\303\227\033b@:\306?\374\377\377\377\377\377\267?\021x\373!\201\267\337?~\255\236\035\0027\326?\256G\341z\024\256\327?\000\000\000\000\000\000\360?h\324\t\277\'\225\325?\321\n\233\003\211V\350?\363\367\332\210u\351\341?\000\000\000\000\000\000\360?\214\305b\261X,\326?3\tv\025\276\334\320?\000\000\000\000\000\000\264?~\331\240\311\227\r\312?\206\211\367#\247\371\332?{\024\256G\341z\224?\226{\032a\271\247\261?`\340\305\267\3764\274?\273\324\223\361\333\245\316?\301x+\373\034R\303?\023>c8Z\220\340?(\024\n\205B\241\340?\260\253\360\345\206\030\320?\004\000\000\000\000\000\312?5\371\262A\223/\313?*L\274\0379\315\327?{\024\256G\341z\224?&\2736Q\262k\263?\237W\205x\212\244\271?\013\233\003\211V\330\314?\241\344N\321\302\031\300?\301\"\004m\256\260\332?\316\347\363\371|>\337?@:\2262\tv\305?\376\377\377\377\377\377\320?U\013+=\265\260\322?\330\352\331!pc\251?\232\231\231\231\231\231\331?\016x\374\341\200\307\257?Y\036ods^\265?H\264\302\346@\242\265?\341\014\010%w\212\266?\251\215\257\345\325\357\322?\312f\263\331l6\333?\324\203F\336\371[\314?\377\377\377\377\377\377\331?{ja\245\247\026\326?4(\025&\336\217\334?\232\231\231\231\231\231\311?\265\372RA\253/\265?es^\025\342)\302?\227z2~\273\324\323?\227\036\363\367\332\210\345?v\024\272)\251\016\341?\347t:\235N\247\323?D\365\240\221w\376\266?\370\377\377\377\377\377\273?\177H\340\355\207\004\336?\016\201\033\313\240T\310?R\270\036\205\353Q\330?\264\372RA\253/\245?\326m\231\217\320\250\263?Zas \321\n\333?%w\212\026\316\200\320?\355\301\234\307\245o\337?\212F\243\321h4\332?\370rC\014H\307\322?\377\377\377\377\377\377\324?\021x\373!\201\267\337?Y\006\245\302\304\373\301?\\\217\302\365(\\\337?\2008\340\361\207\003\276?\367\331\316D9\026\264?\013\233\003\211V\330\254?\341\014\010%w\212\246?9\272)\251\016\261\341?\307\347\363\371|>\317?\336\371[\234\326l\317?\000\000\000\000\000\000\324?\310\271\216Q\234\353\270?\022\357GN\363\265\352?\n\327\243p=\n\267?\264\372RA\253/\245?\023\345XP\\\030\321?H\264\302\346@\242\265?\321\302\031\020J\356\264?\\/\262\266\212w\322?\312d2\231L&\343?D\365\240\221w\376\266?\004\000\000\000\000\000\312?5\371\262A\223/\313?\253g\207\300\215e\320?333333\323?&\2736Q\262k\263?E\325;\254\3332\277?\347@\242\0256\007\262?\n\306[\331\347\220\312?\2400\347q\351\333\317?p\267\333\355v\273\335?<\177\213\323\232\355\263?\000\000\000\000\000\000\341?\323S\013+=\265\340?\320\016\201\033\313\240\324?{\024\256G\341z\344?a\271\247\021\226{\272?\007\220i\237\355L\304?\347@\242\0256\007\262?\"5\301x+\373\254?}\254\255\342\235\374\340?e4\032\215F\243\321?\315\r1 \035K\311?\001\000\000\000\000\200\340?\177H\340\355\207\004\336?\264C\340\3062(\305?\354Q\270\036\205\353\341?&\2736Q\262k\263?\275\303\272-\363\021\272?\013\233\003\211V\330\234?\002\241\344N\321\302\211?a\271[,z\303\330?(\225J\245R\251\324?\\\234\326l\237\250\316?\001\000\000\000\000\000\335?\237ZX\351\251\205\325?j\276V\317\016\201\273?\366(\\\217\302\365\330?&\2736Q\262k\263?]\177\032\016\271\311\250?H\264\302\346@\242\245?\002\241\344N\321\302\231?\203\021\351t!\317\321?\255V\253\325j\265\332?W\341\313\r1 \315?\000\000\000\000\000\000\344?\000\000\000\000\000\000\000\000\264C\340\3062(\325?333333\303?\265\372RA\253/\265?V\275\303\272-\363\261?\251\'\343\267K=\271?m\304\272\364\230\277\327?\372\361\2039\217K\317?O\247\323\351t:\355?\266f\373D\365\240\301?\377\377\377\377\377\377\346?\2448\3271\212s\315?\006\245\302\304\373\221\323?\270\036\205\353Q\270\316?D:o1\244\363\266?]\177\032\016\271\311\270?\013\233\003\211V\330\254?\362V\3669\244&\310?\201\216}bj\335\333?p\267\333\355v\273\335?D\365\240\221w\376\266?\002\000\000\000\000\000\302?~\331\240\311\227\r\312?K\205\211\367#\247\351?\270\036\205\353Q\270\256?\265\372RA\253/\265?8\2629\257\n\361\264?\227z2~\273\324\303?\311\235\242\2053 \304?U\"\235.\3449\326?\331l6\233\315f\343?Z\234\326l\237\250\256?\001\000\000\000\000\000\335?0\0334\371\262A\323?\"pc\031\224\n\323?\303\365(\\\217\302\325?D:o1\244\363\266?\275\303\272-\363\021\272?Zas \321\n\313?2\177\257\215X\227\276?)\266\274\372]\226\320?\312f\263\331l6\333?\315\r1 \035K\311?\000\000\000\000\000\200\343?x\373!\201\267\037\322?\335X\006\245\302\304\333?\000\000\000\000\000\000\000\000&\2736Q\262k\263?\341\220\233\214\241\352\275?\251\'\343\267K=\271?\241\344N\321\302\031\260?\264\007s\036\227\276\335?\007\004\002\201@ \340?;\177\213\323\232\355\303?\004\000\000\000\000\000\312?0\0334\371\262A\323?\363\265zv\010\334\330?{\024\256G\341z\304?\016x\374\341\200\307\257?\272b\017\204\255\246\266?\013\233\003\211V\330\234?\241\344N\321\302\031\260?\032Kx\300\000\316\334?H$\022\211D\"\341?\205F\336\371[\234\326?\000\000\000\000\000\000\324?x\373!\201\267\037\322?\206\211\367#\247\371\332?\270\036\205\353Q\270\336?\357\370\303\001\217?\254?\226\225.%\377\315\302?\371\355RO\306o\307?5\301x+\373\034\342?\316\354z\221\265U\334?\252\325j\265Z\255\326?\303\227\033b@:\306?\000\000\000\000\000\000\304?\017\232|\331\240\311\307?\220\234\346k\365\354\340?{\024\256G\341z\224?\016x\374\341\200\307\257?`\340\305\267\3764\274?\347@\242\0256\007\262?\301x+\373\034R\243?\201\216}bj\335\333?\031\215F\243\321h\344?E\365\240\221w\376\306?\374\377\377\377\377\377\314?\305\271\216Q\234\353\310?\274\0379\315\327\352\331?\232\231\231\231\231\231\311?\016x\374\341\200\307\257?@t\220\002\226\307\273?\347@\242\0256\007\302?m\304\272\364\230\277\327?0N\260\263R\204\340?\013\205B\241P(\344?\271!\006\244c)\303?\004\000\000\000\000\000\300?\345\313\006M\276l\340?\304\373\221\323|\255\316?\232\231\231\231\231\231\341?\355\332D\311\256M\304?\037\010[M-Z\273?\277]\352\311\370\355\322?\301x+\373\034R\323?\313i\017\177\376c\346?(\225J\245R\251\324?A:\2262\tv\325?\002\000\000\000\000\000\314?Vzja\245\247\306?*L\274\0379\315\327?{\024\256G\341z\224?\265\372RA\253/\265?\211@?t\220\002\306?\347@\242\0256\007\262?\241\344N\321\302\031\260?\215%<`\000g\336?\007\004\002\201@ \340?R&\301\256\302\227\313?\000\000\000\000\000\000\304?\345\313\006M\276l\320?\353\331!pc\031\304?=\n\327\243p=\332?a\271\247\021\226{\272?\272b\017\204\255\246\266?\343\267K=\031\277\335?\331\347\220\232`\274\325?h`\000g>\312\326?\215\307\343\361x<\336?<\177\213\323\232\355\323?\001\000\000\000\000\000\335?\237ZX\351\251\205\325?G\027]t\321E\307?\341z\024\256G\341\332?\265\372RA\253/\265?\237W\205x\212\244\271?\227z2~\273\324\323?\362V\3669\244&\310?\326\260\032\221N\027\322?\246T*\225J\245\322?\364\2678\255\331>\321?\000\000\000\000\000\200\343?\2448\3271\212s\315?\241T\230x?r\312?{\024\256G\341z\324?&\2736Q\262k\263?Y\036ods^\265?\251\'\343\267K=\311?\261.=\346\357\265\301?\010\304\237\377\230\301\325?+\026\213\305b\261\330?\\\234\326l\237\250\316?\002\000\000\000\000\000\334?\024x\373!\201\267\277?\353\331!pc\031\324?\000\000\000\000\000\000\000\000\225{\032a\271\247\241?\266\001d\332g;\263?\251\'\343\267K=\311?\241\344N\321\302\031\300?\251\'?\230\363\270\324?\316\347\363\371|>\337?7\304\200t,e\262?\000\000\000\000\000\000\304?0\0334\371\262A\303?\320\016\201\033\313\240\324?\244p=\n\327\243\300?\322y\213!\235\267\270?\037\010[M-Z\273?\251\'\343\267K=\331?\022\353\322c\376^\313?\2242Q\350\246\244\332?H$\022\211D\"\341?\260\253\360\345\206\030\320?\000\000\000\000\000\000\331?[X\351\251\205\225\336?\304\373\221\323|\255\316?\315\314\314\314\314\314\334?\'Jvm\242d\327?|\353O\303!7\271?\347@\242\0256\007\262?\002\241\344N\321\302\251?\355\216\344\2404T\340?\353\365z\275^\257\327?I\260\253\360\345\206\270?\001\000\000\000\000\200\340?\351\251\205\225\236Z\350?Y\006\245\302\304\373\321?\244p=\n\327\243\340?D:o1\244\363\266?|\353O\303!7\271?\227z2~\273\324\303?\3511\177\257\215X\307?KA\002jv\275\350?\211D\"\221H$\322?\266f\373D\365\240\301?\000\000\000\000\000\000\264?\177H\340\355\207\004\336?\016\201\033\313\240T\310?\232\231\231\231\231\231\341?\265\372RA\253/\265?Y\036ods^\265?\013\233\003\211V\330\254?\002\241\344N\321\302\251?0N\260\263R\204\340?\212F\243\321h4\332?\265f\373D\365\240\321?\377\377\377\377\377\377\324?\353\030\305\271\216Q\314?\"pc\031\224\n\323?\354Q\270\036\205\353\321?\316[\014\351\274\305\300?\034\247\257\243\347\356\267?\347@\242\0256\007\262?\241\344N\321\302\031\260?@a\316\343\322\267\337?O&\223\311d2\331?]\234\326l\237\250\276?\002\000\000\000\000\000\322?\345\313\006M\276l\340?\375\221\323|\255\236\275?\270\036\205\353Q\270\336?\226{\032a\271\247\261?\333\316D9\026\024\267?\347@\242\0256\007\262?\002\241\344N\321\302\231?\035\335\224T\207\330\340?p\267\333\355v\273\335?\277\334\020\003\322\261\324?\001\000\000\000\000\000\330?\306(\316u\214\342\334?=;\004n,\203\302?\232\231\231\231\231\231\331?\264\372RA\253/\245?\275\303\272-\363\021\272?\371\355RO\306o\307?\362V\3669\244&\270?\301U\274\223\037\314\331?\013\205B\241P(\324?S&\301\256\302\227\273?\001\000\000\000\000\000\330?x\373!\201\267\037\322?\231x?r\232\257\325?{\024\256G\341z\204?\323y\213!\235\267\250?@t\220\002\226\307\273?\013\233\003\211V\330\234?\321\302\031\020J\356\264?\357\336\227\214z*\327?L\245R\251T*\325?<\177\213\323\232\355\263?\004\000\000\000\000\000\312?\345\313\006M\276l\320?\216eP*L\274\317?\327\243p=\n\327\323?\323y\213!\235\267\250?\242\2700\"\320\017\275?\251\'\343\267K=\311?\"5\301x+\373\314?\206\030\'\330Y)\342?/\227\313\345r\271\334?\310R&\301\256\302\307?\000\000\000\000\000\000\264?\305\271\216Q\234\353\330?Y\006\245\302\304\373\321?\327\243p=\n\327\323?\316[\014\351\274\305\300?$\233\363\252\020O\301?6\007\022\255\2609\320?\271S\264p\006\204\342?\214}bj\335\373\342?L\247\323\351t:\335?E\365\240\221w\376\306?\000\000\000\000\000\000\304?[X\351\251\205\225\316?u\321E\027]t\321?\n\327\243p=\n\327?|\032a\271\247\021\326?\340/\360\342[\177\272?\227z2~\273\324\303?\343\255\354sHM\340?\206\030\'\330Y)\342?p\267\333\355v\273\335?\271!\006\244c)\323?\000\000\000\000\000\000\324?\024x\373!\201\267\257?=;\004n,\203\322?)\\\217\302\365(\274?D:o1\244\363\266?$i\006\367r\305\256?Zas \321\n\313?g@(\271S\264\340?\311\346\243lGr\300?\013\205B\241P(\344?\200\213\323\232\355\023\325?\202UUUUU\351?\305\271\216Q\234\353\310?\375\221\323|\255\236\335?\n\327\243p=\n\267?a\271\247\021\226{\312?\034\247\257\243\347\356\267?\251\'\343\267K=\311?\271S\264p\006\204\302?\025[^\375.K\330?:\034\016\207\303\341\340?X\341\313\r1 \275?\377\377\377\377\377\377\331?\212s\035\2438\327\341?\231x?r\232\257\325?\\\217\302\365(\\\337?\352K\005\255\276T\320?\272b\017\204\255\246\306?6\007\022\255\2609\300?\261.=\346\357\265\261?\262\204\007\014\340\314\347?%\024\n\205B\241\320?\266f\373D\365\240\301?\376\377\377\377\377\377\337?\346:Fq\256c\324?\221\234\346k\365\354\300?333333\343?^\233(\331\265\211\302?\326m\231\217\320\250\303?6\007\022\255\2609\300?\002\241\344N\321\302\271?c\224\355H\016J\343?\031\014\006\203\301`\340?\322\310;\177\213\323\312?\377\377\377\377\377\377\324?y\373!\201\267\037\302?O\363\265zv\010\334?\270\036\205\353Q\270\256?\323y\213!\235\267\250?\323\014\356\345\212=\260?\347@\242\0256\007\262?\301x+\373\034R\263?\026xY\302\003\006\320?:\235N\247\323\351\344?\261\253\360\345\206\030\300?\377\377\377\377\377?\341?\256c\024\347:F\341?\320\016\201\033\313\240\344?\303\365(\\\217\302\325?\265\211\222]\233(\331?Y\036ods^\305?\227z2~\273\324\323?\373\034R\023\214\267\342?\315\206\nD\323\036\356?\016\006\203\301`0\330?\322\310;\177\213\323\312?\004\000\000\000\000\000\300?\236ZX\351\251\205\345?\"pc\031\224\n\323?H\341z\024\256G\341?\2008\340\361\207\003\276?E\325;\254\3332\277?6\007\022\255\2609\320?\3511\177\257\215X\327?e&\n\335\224T\347?\211D\"\221H$\322?@:\2262\tv\305?\000\000\000\000\000\000\324?{ja\245\247\026\326?\221\234\346k\365\354\300?\354Q\270\036\205\353\341?\016x\374\341\200\307\257?\024\345XP\\\030\301?\273\324\223\361\333\245\336?\003B\311\235\242\205\343?\343\357\262\204\007\014\340?\013\207\303\341p8\334?\260\253\360\345\206\030\320?\000\000\000\000\000\000\324?\346:Fq\256c\324?\264C\340\3062(\305?\341z\024\256G\341\332?\322y\213!\235\267\270?u)\371o\226`\302?\013\233\003\211V\330\234?\301x+\373\034R\223?\257}\311\250\247r\327?\255V\253\325j\265\332?3\tv\025\276\334\300?\001\000\000\000\000\000\343?\013+=\265\260\322\323?u\321E\027]t\341?\232\231\231\231\231\231\271?\264\372RA\253/\305?\363x#\233\363\252\300?H\264\302\346@\242\245?\341\014\010%w\212\246?o:]\310s\354\343?\316\347\363\371|>\337?I\260\253\360\345\206\270?\000\000\000\000\000\000\304?\024x\373!\201\267\317?\370#\247\371Z=\333?\232\231\231\231\231\231\271?a\271\247\021\226{\272?\242\2700\"\320\017\275?Zas \321\n\313?\331\347\220\232`\274\305?&|\306p\264 \341?L\245R\251T*\345?R&\301\256\302\227\313?\002\000\000\000\000\000\327?\024x\373!\201\267\257?\033\313\240T\230x\337?R\270\036\205\353Q\310?\264\372RA\253/\245?t\367\013\274\370\326\317?H\264\302\346@\242\265?\341\014\010%w\212\326?6\2003\037e;\322?\214\305b\261X,\346?@:\2262\tv\305?\000\000\000\000\000\000\331?[X\351\251\205\225\316?j\276V\317\016\201\313?\341z\024\256G\341\312?&\2736Q\262k\263?\242\2700\"\320\017\275?H\264\302\346@\242\265?\3511\177\257\215X\307?\316\354z\221\265U\334?p\267\333\355v\273\335??:\2262\tv\265?\000\000\000\000\000\000\304?\020\t\274\375\220\300\333?\363\265zv\010\334\330?)\\\217\302\365(\334?\322y\213!\235\267\270?|\353O\303!7\271?\347@\242\0256\007\322?\372{m\304\272\364\330?\351\254\024!hs\345?\211D\"\221H$\342?E\365\240\221w\376\306?\000\000\000\000\000\000\304?{ja\245\247\026\326?=;\004n,\203\322?H\341z\024\256G\321?\226{\032a\271\247\261?\326m\231\217\320\250\263?\273\324\223\361\333\245\316?\002\241\344N\321\302\311?\302\273,\341\001\003\330?L\245R\251T*\325?<\177\213\323\232\355\323?\377\377\377\377\377\377\331?|\331\240\311\227\r\332?\231x?r\232\257\325?\270\036\205\353Q\270\316?\2008\340\361\207\003\276?`\340\305\267\3764\274?\321\n\233\003\211V\330?L\217\371{m\304\352?\311\327\362\352wY\342?\353\365z\275^\257\327?6\304\200t,e\302?\000\000\000\000\000\000\304?5\371\262A\223/\313?r\232\257\325\263C\340?\232\231\231\231\231\231\251?&\2736Q\262k\263?\302$f\3278}\275?H\264\302\346@\242\305?\301x+\373\034R\323?\340\304m|-\257\336?\031\014\006\203\301`\340?6\304\200t,e\302?\004\000\000\000\000\000\312?U\013+=\265\260\322?\216eP*L\274\337?\303\365(\\\217\302\305?\2008\340\361\207\003\276?U\275\303\272-\363\301?\016$Zas \321?\002\241\344N\321\302\311?\206\030\'\330Y)\342?(\024\n\205B\241\340?]\234\326l\237\250\276?\000\000\000\000\000\000\304?\021x\373!\201\267\337?\304\373\221\323|\255\316?\205\353Q\270\036\205\333?D:o1\244\363\266?8\2629\257\n\361\304?\347@\242\0256\007\302?\372{m\304\272\364\310?\343\274\372]\226\360\340?L\245R\251T*\325?Ok\266OT\017\312?\002\000\000\000\000\000\327?{ja\245\247\026\326?\330\352\331!pc\251?R\270\036\205\353Q\340?\1778\340\361\207\003\256?|\353O\303!7\271?\227z2~\273\324\343?%w\212\026\316\200\340?\025[^\375.K\330?p\267\333\355v\273\335?rZ\263}\242z\320?\001\000\000\000\000\200\340?\300\333\017\t\274\375\320?\216eP*L\274\317?\000\000\000\000\000\000\320?a\271\247\021\226{\312?\326m\231\217\320\250\303?\321\n\233\003\211V\330?\251\t\306[\331\347\340?\003\370\214\341hA\342?(\225J\245R\251\324?6\304\200t,e\302?\374\377\377\377\377\377\267?\024x\373!\201\267\317?\330\352\331!pc\331?\244p=\n\327\243\320?\265\372RA\253/\265?\003\375\320A\nX\276?\013\233\003\211V\330\314?\353\322c\376^\033\341? \214\254\255\342\235\334?\356v\273\335n\267\333?\266f\373D\365\240\301?\004\000\000\000\000\000\312?0\0334\371\262A\343?\330\352\331!pc\331?\\\217\302\365(\\\337?\017x\374\341\200\307\277?E\325;\254\3332\277?6\007\022\255\2609\300?\032\020J\356\024-\314?5\013\022P\263\353\345?(\225J\245R\251\324?E\365\240\221w\376\306?\000\000\000\000\000\000\324?5\371\262A\223/\333?\217eP*L\274\277?\366(\\\217\302\365\340?a\271\247\021\226{\272?\340/\360\342[\177\272?\347@\242\0256\007\262?\301x+\373\034R\263?\032Kx\300\000\316\334?\315\345r\271\\.\327?Z\234\326l\237\250\336?\000\000\000\000\000\200\341?\024x\373!\201\267\277?\006\245\302\304\373\221\323?\000\000\000\000\000\000\000\000\322y\213!\235\267\270?\034\247\257\243\347\356\267?\251\'\343\267K=\311?\331\347\220\232`\274\305?\207\002jv\275\310\312?L\245R\251T*\345?;\177\213\323\232\355\303?\000\000\000\000\000\000\344?\2448\3271\212s\315?\000\000\000\000\000\000\340?\232\231\231\231\231\231\251?\335\323\010\313=\215\320?cAqaD\240\277?H\264\302\346@\242\245?\241\344N\321\302\031\240?\032Kx\300\000\316\334?:\034\016\207\303\341\340?7\304\200t,e\242?\001\000\000\000\000\000\330?\304JO-\254\364\324?\353\331!pc\031\304?\366(\\\217\302\365\330?a\271\247\021\226{\272?`\340\305\267\3764\274?\013\233\003\211V\330\314?*Z8\003B\311\315?\034hs\205\325\210\324?/\227\313\345r\271\334?3\tv\025\276\334\320?\000\000\000\000\000\000\344?5\371\262A\223/\313?\363\265zv\010\334\330?\000\000\000\000\000\000\000\000\357\370\303\001\217?\254?\024\345XP\\\030\261?\013\233\003\211V\330\234?\002\241\344N\321\302\211?\201\216}bj\335\333?:\034\016\207\303\341\340??:\2262\tv\265?\002\000\000\000\000\000\322?Vzja\245\247\306?\"pc\031\224\n\343?\270\036\205\353Q\270\236?\322y\213!\235\267\270?\367\331\316D9\026\264?2~\273\324\223\361\333?\251\t\306[\331\347\320?\210\233\222\352\020\033\330?\352t:\235N\247\343?\266f\373D\365\240\301?\001\000\000\000\000\000\343?\240\311\227\r\232|\331?\264C\340\3062(\325?\037\205\353Q\270\036\325?\361\370\303\001\217?\234?]\177\032\016\271\311\270?\013\233\003\211V\330\274?\301x+\373\034R\303?\206\030\'\330Y)\342?O&\223\311d2\331?\276\334\020\003\322\261\304?\004\000\000\000\000\000\300?\013+=\265\260\322\323?v\010\334X\006\245\342?\270\036\205\353Q\270\316?\265\372RA\253/\265?$i\006\367r\305\276?\013\233\003\211V\330\254?\341\014\010%w\212\246?V\375.Kx\300\340?\361\367\373\375~\277\337?3\tv\025\276\334\320?\376\377\377\377\377\377\325?\353\030\305\271\216Q\314?o,\203Ra\342\335?ffffff\326?&\2736Q\262k\263?\323\014\356\345\212=\300?\013\233\003\211V\330\274?-\234\001\241\344N\341?g\251u\357KF\335?\312f\263\331l6\333?\303\227\033b@:\306?\002\000\000\000\000\000\302?\353\030\305\271\216Q\334?~\255\236\035\0027\306?\244p=\n\327\243\340?D:o1\244\363\266?\340/\360\342[\177\272?H\264\302\346@\242\305?2\177\257\215X\227\276?\242M\3426\276\226\327?\316\347\363\371|>\337?rZ\263}\242z\320?\000\000\000\000\000\200\343?\345\313\006M\276l\340?\253g\207\300\215e\320?\000\000\000\000\000\000\340?\322y\213!\235\267\270?\034\247\257\243\347\356\267?H\264\302\346@\242\305?\321\302\031\020J\356\264?\201\216}bj\335\333?\211D\"\221H$\322?\277\334\020\003\322\261\324?\001\000\000\000\000\000\335?U\013+=\265\260\322?~\255\236\035\0027\306?q=\n\327\243p\315?\357\370\303\001\217?\254?@t\220\002\226\307\273?\273\324\223\361\333\245\316?:\244&\030oe\317?A\372\366W&\n\335?\356v\273\335n\267\333?J\260\253\360\345\206\310?\004\000\000\000\000\000\300?2\212s\035\2438\347?/\272\350\242\213.\332?\037\205\353Q\270\036\345?\227\nZ}\251\240\325?\003\375\320A\nX\276?H\264\302\346@\242\265?\"5\301x+\373\314?D4\355\341\317\177\354?%\024\n\205B\241\320?\\\234\326l\237\250\316?\000\000\000\000\000\000\316?\353\030\305\271\216Q\314?\253g\207\300\215e\320?\341z\024\256G\341\332?\354\332D\311\256M\324?|\353O\303!7\271?\321\n\233\003\211V\330?v\3511\177\257\215\350?}\254\255\342\235\374\340?H$\022\211D\"\341?W\341\313\r1 \315?\000\000\000\000\000\000\324?~\331\240\311\227\r\312?~\255\236\035\0027\326?{\024\256G\341z\244?^\233(\331\265\211\302?@t\220\002\226\307\273?H\264\302\346@\242\265?\251\t\306[\331\347\300?)A\233+\254F\344?\374\375~\277\337\357\347?\304\227\033b@:\326?\002\000\000\000\000\000\302?\020\t\274\375\220\300\333?r\232\257\325\263C\340?\232\231\231\231\231\231\271?\265\372RA\253/\265?\201L\373lg\242\274?\347@\242\0256\007\262?\311\235\242\2053 \304?\002\222\034\224\206\n\344?+\026\213\305b\261\330?\266f\373D\365\240\301?\376\377\377\377\377\377\317?\r\232|\331\240\311\347?\264C\340\3062(\305?\315\314\314\314\314\314\344?\2008\340\361\207\003\276?$\233\363\252\020O\301?\251\'\343\267K=\311?%w\212\026\316\200\320?\313i\017\177\376c\346?\307\347\363\371|>\317?@:\2262\tv\305?\377\377\377\377\377\377\324?|\331\240\311\227\r\332?\330\352\331!pc\311?\303\365(\\\217\302\325?\323y\213!\235\267\250?Y\036ods^\265?\013\233\003\211V\330\254?\301x+\373\034R\243?:SR\035b\003\337?\315\345r\271\\.\327?Ok\266OT\017\312?\000\000\000\000\000\000\324?\2448\3271\212s\315?\330\352\331!pc\331?{\024\256G\341z\244?\361\370\303\001\217?\274?\037\010[M-Z\273?\273\324\223\361\333\245\316?%w\212\026\316\200\340?6\263\353E\326V\341?\371|>\237\317\347\343?3\tv\025\276\334\300?\000\000\000\000\000\000\304?\352\251\205\225\236Z\330?\253g\207\300\215e\320?\315\314\314\314\314\314\334?\226{\032a\271\247\261?\024\345XP\\\030\261?\347@\242\0256\007\262?\241\344N\321\302\031\260?U\"\235.\3449\326?\261\327\353\365z\275\336?\324\203F\336\371[\314?\000\000\000\000\000\000\344?\351:Fq\256c\304?\330\352\331!pc\311?\366(\\\217\302\365\340?D:o1\244\363\266?\352\204\337\223\312J\327?6\007\022\255\2609\320?\3511\177\257\215X\307?\372\361\2039\217K\317?\361\367\373\375~\277\337?F\365\240\221w\376\326?\000\000\000\000\000\200\343?\035\2438\3271\212\343?u\321E\027]t\321?\000\000\000\000\000\000\340?^\233(\331\265\211\302?`\340\305\267\3764\274?6\007\022\255\2609\320?%w\212\026\316\200\320?\3303\206\243\005\t\350?\212F\243\321h4\332?\332>Q=h\344\335?\000\000\000\000\000\000\331?1\212s\035\2438\327?~\255\236\035\0027\306?R\270\036\205\353Q\330?\264\372RA\253/\305?y\212\244\031\334\313\265?6\007\022\255\2609\300?\321\302\031\020J\356\264?B\3449\366\211\251\325?\013\207\303\341p8\334?\\\234\326l\237\250\316?\000\000\000\000\000\200\341?\024x\373!\201\267\277?\353\331!pc\031\324?{\024\256G\341z\244?D:o1\244\363\266?\024\345XP\\\030\301?H\264\302\346@\242\305?\241\344N\321\302\031\300?\240\226W\277\313\022\336?\211D\"\221H$\342??:\2262\tv\265?\000\000\000\000\000\000\316?~\331\240\311\227\r\312?\320\016\201\033\313\240\324?q=\n\327\243p\315?&\2736Q\262k\263?\237W\205x\212\244\271?H\264\302\346@\242\305?\002\241\344N\321\302\271?\\\311Ai\250@\324?(\024\n\205B\241\340?{\320\310;\177\213\323?\376\377\377\377\377\377\332?5\371\262A\223/\313?O\363\265zv\010\334?{\024\256G\341z\224?\265\372RA\253/\265?\333\316D9\026\024\267?\251\'\343\267K=\271?2\177\257\215X\227\276?V\375.Kx\300\340?\233L&\223\311d\342?Ok\266OT\017\312?\000\000\000\000\000\000\304?\345\313\006M\276l\320?\206\211\367#\247\371\332?H\341z\024\256G\321?&\2736Q\262k\263?\003\375\320A\nX\276?\013\233\003\211V\330\314?\353\322c\376^\033\341? \214\254\255\342\235\334?\212F\243\321h4\332?\271!\006\244c)\303?\004\000\000\000\000\000\312?0\0334\371\262A\323?\253g\207\300\215e\320?\n\327\243p=\n\327?\322y\213!\235\267\270?\377\233%\230\304\354\272?6\007\022\255\2609\300?\251\t\306[\331\347\320?9\272)\251\016\261\341?\215\307\343\361x<\336?<\177\213\323\232\355\263?\002\000\000\000\000\000\302?\305\271\216Q\234\353\330?\231x?r\232\257\325?\\\217\302\365(\\\337?\226{\032a\271\247\261?\013\212\013#\002\375\320?\347@\242\0256\007\262?2\177\257\215X\227\276?\023\013\253\021\351t\341?\255V\253\325j\265\332?@:\2262\tv\305?\002\000\000\000\000\000\302?B\223/\0334\371\342?\330\352\331!pc\311?\037\205\353Q\270\036\345?a\271\247\021\226{\272?\013\361\024I3\270\307?\013\233\003\211V\330\234?\002\241\344N\321\302\211?z\347\330\'\246\326\335?\315\345r\271\\.\327?]\234\326l\237\250\276?\000\000\000\000\000\000\341?\345\313\006M\276l\340?\220\234\346k\365\354\320?\\\217\302\365(\\\347?\303\001\217?\034\360\330?\340/\360\342[\177\272?\242\0256\007\022\255\340?\032\020J\356\024-\334?\234N\027\362\034\373\344?i\265Z\255V\253\325?<\177\213\323\232\355\323?\000\000\000\000\000\200\341?\305\271\216Q\234\353\310?G\027]t\321E\327?)\\\217\302\365(\314?\016x\374\341\200\307\257?\340/\360\342[\177\272?\251\'\343\267K=\311?\"5\301x+\373\274?\\\311Ai\250@\324?(\024\n\205B\241\340?\370rC\014H\307\322?\376\377\377\377\377\377\332?\300\333\017\t\274\375\300?\330\352\331!pc\331?{\024\256G\341z\264?\016x\374\341\200\307\257?|\353O\303!7\271?\371\355RO\306o\307?:\244&\030oe\317?\006t\354\023S\353\316?\007\004\002\201@ \340?\261\253\360\345\206\030\300?\000\000\000\000\000\000\331?\345\313\006M\276l\320?\274\0379\315\327\352\331?\244p=\n\327\243\320?\226{\032a\271\247\261?\275\303\272-\363\021\272?p\227z2~\273\324?%w\212\026\316\200\340?\224\314\340\232\304m\334?\013\207\303\341p8\334?]\234\326l\237\250\276?\004\000\000\000\000\000\312?1\212s\035\2438\327?=;\004n,\203\342?{\024\256G\341z\224?\263\372RA\253/\225?]\177\032\016\271\311\270?\224\361\333\245\236\214\337?\251\t\306[\331\347\320?\210\233\222\352\020\033\330?\315\345r\271\\.\327?\271!\006\244c)\303?\004\000\000\000\000\000\312?\305\271\216Q\234\353\310?<\004n,\203R\341?\000\000\000\000\000\000\000\000^\233(\331\265\211\302?\266\001d\332g;\303?\251\'\343\267K=\271?\022\353\322c\376^\273?\223fpM\3426\336?z<\036\217\307\343\341?\266f\373D\365\240\301?\376\377\377\377\377\377\325?5\371\262A\223/\313?*L\274\0379\315\327?\000\000\000\000\000\000\000\000&\2736Q\262k\263?\245K\311\177\263\004\323?\227z2~\273\324\303?:\244&\030oe\317?\355\301\234\307\245o\337?/\227\313\345r\271\334?\276\334\020\003\322\261\304?\002\000\000\000\000\000\302?\351:Fq\256c\304?j\276V\317\016\201\333?\341z\024\256G\341\312?\016x\374\341\200\307\257?\302$f\3278}\275?\371\355RO\306o\307?\311\235\242\2053 \304?\026xY\302\003\006\340?Z\255V\253\325j\345?\315\r1 \035K\311?\004\000\000\000\000\000\312?0\0334\371\262A\323?\353\331!pc\031\324?\366(\\\217\302\365\330?\2008\340\361\207\003\276?\341\220\233\214\241\352\275?\227z2~\273\324\303?\241\344N\321\302\031\320?\334\342\235\374`\316\343?Z,\026\213\305b\341?\303\227\033b@:\306?\376\377\377\377\377\377\325?U\013+=\265\260\322?G\027]t\321E\307?\n\327\243p=\n\327?\226{\032a\271\247\261?\272b\017\204\255\246\266?\013\233\003\211V\330\254?\002\241\344N\321\302\231?\\\374\371\217\031\\\323?\255V\253\325j\265\332?\261\253\360\345\206\030\300?\376\377\377\377\377\377\332?5\371\262A\223/\313?\241T\230x?r\332?{\024\256G\341z\264?\016x\374\341\200\307\257?\037\010[M-Z\273?\251\'\343\267K=\271?\"5\301x+\373\274?\206\030\'\330Y)\342?\251T*\225J\245\342?]\234\326l\237\250\276?\000\000\000\000\000\000\264?\177H\340\355\207\004\336?j\276V\317\016\201\273?q=\n\327\243p\335?\357\370\303\001\217?\254?Y\036ods^\265? \321\n\233\003\211\326?\"5\301x+\373\314?40\2003\037e\333?\214\305b\261X,\326?\271!\006\244c)\323?\377\377\377\377\377\377\324?[X\351\251\205\225\316?\030]t\321E\027\335?\232\231\231\231\231\231\251?\013Z}\251\240\325\307?\007\220i\237\355L\304?\347@\242\0256\007\262?\341\014\010%w\212\266?V\375.Kx\300\340?(\024\n\205B\241\340?E\365\240\221w\376\306?\376\377\377\377\377\377\317?\304JO-\254\364\324?G\027]t\321E\327?)\\\217\302\365(\314?a\271\247\021\226{\272?\341\220\233\214\241\352\275?6\007\022\255\2609\300?\241\344N\321\302\031\340?F\204\240\315\025V\343?\361\367\373\375~\277\337?\303\227\033b@:\306?\000\000\000\000\000\000\304?x\373!\201\267\037\322?\016\201\033\313\240T\330?{\024\256G\341z\224?&\2736Q\262k\263?\275\303\272-\363\021\272?\013\233\003\211V\330\274?\301x+\373\034R\263?z\201h\332\303\237\337?\316\347\363\371|>\337?6\304\200t,e\302?\000\000\000\000\000\000\304?H\340\355\207\004\336\356?\335X\006\245\302\304\333?\\\217\302\365(\\\337?\270\030\322y\213!\315?D\007)`y\274\301?6\007\022\255\2609\300?\022\353\322c\376^\273?z\264 \0015\273\356?\203D\"\221H$\302?\336\371[\234\326l\317?\377\377\377\377\377\377\331?\346:Fq\256c\324?~\255\236\035\0027\306?\366(\\\217\302\365\330?\361\370\303\001\217?\274?\340/\360\342[\177\272?\251\'\343\267K=\331?\251\t\306[\331\347\320?\241\032*\020M{\330?L\247\323\351t:\335?\200\213\323\232\355\023\325?\000\000\000\000\000\200\343?\346:Fq\256c\324?\330\352\331!pc\271?\303\365(\\\217\302\325?]\233(\331\265\211\322?Y\036ods^\265?\251\'\343\267K=\271?\002\241\344N\321\302\271?\243[,z\3038\341?\016\006\203\301`0\330?\005\244c)\223`\327?\001\000\000\000\000\000\330?0\0334\371\262A\303?\"pc\031\224\n\303?\270\036\205\353Q\270\336?\016x\374\341\200\307\257?=\023\345XP\\\270?\273\324\223\361\333\245\316?]z\314\337k#\326?40\2003\037e\333?i4\032\215F\243\341?\364\2678\255\331>\321?\002\000\000\000\000\000\322?Vzja\245\247\326?~\255\236\035\0027\306?\232\231\231\231\231\231\331?\2008\340\361\207\003\276?\003\375\320A\nX\276?Zas \321\n\313?\372{m\304\272\364\330?i\010\332\\a5\342?\013\207\303\341p8\334?D\365\240\221w\376\266?\002\000\000\000\000\000\302?5\371\262A\223/\313?u\321E\027]t\321?\303\365(\\\217\302\325?\017x\374\341\200\307\277?\341\220\233\214\241\352\275?Zas \321\n\313?\n\306[\331\347\220\332?\323v$\007\245\241\342?\031\215F\243\321h\344?\276\334\020\003\322\261\304?\000\000\000\000\000\000\304?\345\313\006M\276l\320?j\276V\317\016\201\313?=\n\327\243p=\342?\322y\213!\235\267\270?\367\331\316D9\026\304?\013\233\003\211V\330\254?\301x+\373\034R\243?\247=\374\371\217\031\334?\316\347\363\371|>\337?3\tv\025\276\334\300?\001\000\000\000\000\000\335?\353\030\305\271\216Q\314?\330\352\331!pc\331?\000\000\000\000\000\000\000\000\016x\374\341\200\307\257?\340/\360\342[\177\272?Zas \321\n\313?\341\014\010%w\212\306?V\375.Kx\300\340?\233L&\223\311d\342?\324\203F\336\371[\314?\002\000\000\000\000\000\314?0\0334\371\262A\303?\375\221\323|\255\236\335?{\024\256G\341z\204?\323y\213!\235\267\310?\306\267\3764\034r\303?2~\273\324\223\361\333?\301x+\373\034R\323?\247p\264 \0015\333?\331l6\233\315f\343?\315\r1 \035K\311?\002\000\000\000\000\000\334?\013+=\265\260\322\323?y?r\232\257\325\343?\000\000\000\000\000\000\000\000D:o1\244\363\266?$i\006\367r\305\276?6\007\022\255\2609\300?\311\235\242\2053 \304?S\005\242i\017\177\336?l6\233\315f\263\331?Nk\266OT\017\272?\004\000\000\000\000\000\312?\353\030\305\271\216Q\314?\330\352\331!pc\331?\000\000\000\000\000\000\000\000\016x\374\341\200\307\257?\340/\360\342[\177\272?Zas \321\n\313?\341\014\010%w\212\306?V\375.Kx\300\340?\233L&\223\311d\342?\324\203F\336\371[\314?\002\000\000\000\000\000\314?\013+=\265\260\322\343?=;\004n,\203\322?)\\\217\302\365(\334?\323y\213!\235\267\250?\220\002\226\307\033\331\314?\224\361\333\245\236\214\337?5\301x+\373\034\322?\357S\271[,z\343?\007\004\002\201@ \340?\375-Nk\266O\324?\002\000\000\000\000\000\314?\017\232|\331\240\311\327?\274\0379\315\327\352\331?R\270\036\205\353Q\310?)\331\265\211\222]\313?4Q\216\005\305\205\301?\202D+l\016$\332?~\016\251\t\306[\331?\374_\231(tS\342?\016\006\203\301`0\330?Nk\266OT\017\272?\000\000\000\000\000\000\316?~\331\240\311\227\r\312?\"pc\031\224\n\343?\341z\024\256G\341\312?\357\370\303\001\217?\314?\340/\360\342[\177\272?Zas \321\n\313?m\304\272\364\230\277\327?O#\322\351B\236\343?\371|>\237\317\347\343?\331>Q=h\344\315?8UUUUU\275?\300\333\017\t\274\375\320?Y\006\245\302\304\373\321?)\\\217\302\365(\274?\2008\340\361\207\003\276?\201L\373lg\242\274?\227z2~\273\324\303?-\234\001\241\344N\321?z\201h\332\303\237\337?\353\365z\275^\257\327?6\304\200t,e\302?\000\000\000\000\000\000\316?h\362e\203&_\346?Y\006\245\302\304\373\321?\\\217\302\365(\\\337?\016x\374\341\200\307\317?]\177\032\016\271\311\270? \321\n\233\003\211\326?-\234\001\241\344N\321?\371%\243\236\312\335\342?\307\347\363\371|>\317?6\304\200t,e\302?\376\377\377\377\377\377\305?\352\251\205\225\236Z\330?\"pc\031\224\n\323?\366(\\\217\302\365\340?)\331\265\211\222]\313?\246K\311\177\263\004\303?\013\233\003\211V\330\234?\002\241\344N\321\302\231?\247p\264 \0015\333?\353\365z\275^\257\327?;\177\213\323\232\355\303?\377\377\377\377\377\377\341?\345\313\006M\276l\320?j\276V\317\016\201\313?\270\036\205\353Q\270\336?\2008\340\361\207\003\276?\275\303\272-\363\021\272?\277]\352\311\370\355\322?:\244&\030oe\337?V\375.Kx\300\340?L\247\323\351t:\335?\324\203F\336\371[\314?\376\377\377\377\377\377\305?5\371\262A\223/\313?\375\221\323|\255\236\315?{\024\256G\341z\324?\013Z}\251\240\325\307?8\2629\257\n\361\264?\013\233\003\211V\330\274?\271S\264p\006\204\302?\374,\341\001\0038\323?\312f\263\331l6\333?I\260\253\360\345\206\270?\002\000\000\000\000\000\334?\013+=\265\260\322\323?Y\006\245\302\304\373\301?\n\327\243p=\n\327?D:o1\244\363\266?$i\006\367r\305\256?\273\324\223\361\333\245\336?=\346\357\265\021\353\322?\357\336\227\214z*\327?\255V\253\325j\265\332?Nk\266OT\017\332?\000\000\000\000\000\200\343?\370C\002o?$\340?\353\331!pc\031\324?\341z\024\256G\341\332?&\2736Q\262k\263?=\023\345XP\\\270?\347@\242\0256\007\322?5\301x+\373\034\322?\037\325!6\360\031\343?L\245R\251T*\325?\331>Q=h\344\315?\000\000\000\000\000\000\336?\300\333\017\t\274\375\320?\264C\340\3062(\325?\270\036\205\353Q\270\276?^\233(\331\265\211\302?\374:z\356~\201\267?\227z2~\273\324\303?=\346\357\265\021\353\322?0N\260\263R\204\340?\316\347\363\371|>\337?6\304\200t,e\302?\374\377\377\377\377\377\267?\237ZX\351\251\205\325?4(\025&\336\217\314?\232\231\231\231\231\231\271?\357\370\303\001\217?\254?\377\233%\230\304\354\272?\347@\242\0256\007\262?2\177\257\215X\227\276?\201\3015\211\333\370\332?e4\032\215F\243\321?Z\234\326l\237\250\256?\374\377\377\377\377\377\307?\323S\013+=\265\340?4(\025&\336\217\314?q=\n\327\243p\335?D:o1\244\363\266?\377\233%\230\304\354\272?\371\355RO\306o\307?\251\t\306[\331\347\300?\272\256\027Y[\305\333?\007\004\002\201@ \320?{\320\310;\177\213\323?\001\000\000\000\000\000\335?\304JO-\254\364\324?\253g\207\300\215e\320?333333\323?|\032a\271\247\021\306?\201L\373lg\242\274?H\264\302\346@\242\265?\341\014\010%w\212\306?\311\327\362\352wY\342?\316\347\363\371|>\337?@:\2262\tv\305?\000\000\000\000\000\000\324?\300\333\017\t\274\375\320?b\342\375\310i\276\326?\341z\024\256G\341\312?D:o1\244\363\266?|\353O\303!7\271?H\264\302\346@\242\265?\261.=\346\357\265\301?\264\007s\036\227\276\335?\312f\263\331l6\333?3\tv\025\276\334\300?\374\377\377\377\377\377\307?\235\353\030\305\271\216\321?\304\373\221\323|\255\316?R\270\036\205\353Q\350?\016x\374\341\200\307\257?\000\000\000\000\000\000\360?\251\'\343\267K=\271?:\244&\030oe\317?z\201h\332\303\237\337?\007\004\002\201@ \320?\025\276\334\020\003\322\341?\002\000\000\000\000\000\302?\017\232|\331\240\311\327?b\342\375\310i\276\326?{\024\256G\341z\244?D:o1\244\363\266?\312\030\252\336a\335\306?\371\355RO\306o\307?\311\235\242\2053 \324?\032Kx\300\000\316\334?\353\365z\275^\257\327?\276\334\020\003\322\261\304?\001\000\000\000\000\000\330?\346:Fq\256c\324?9\315\327\352\331!\340?\341z\024\256G\341\312?\357\370\303\001\217?\254?\340/\360\342[\177\272?\013\233\003\211V\330\254?\341\014\010%w\212\246?z\201h\332\303\237\337?\315\345r\271\\.\327?X\341\313\r1 \275?\000\000\000\000\000\000\304?\304JO-\254\364\324?+L\274\0379\315\347?{\024\256G\341z\224?|\032a\271\247\021\306?$i\006\367r\305\276?\347@\242\0256\007\262?\241\344N\321\302\031\240?Y\217K\337\376\312\344?\251T*\225J\245\342?I\260\253\360\345\206\270?\000\000\000\000\000\000\331?\304JO-\254\364\324?\212\367#\247\371Z\335?\244p=\n\327\243\320?\265\372RA\253/\265?$i\006\367r\305\276?\347@\242\0256\007\302?*Z8\003B\311\315?9\272)\251\016\261\341?/\227\313\345r\271\334?]\234\326l\237\250\276?\370\377\377\377\377\377\273?[X\351\251\205\225\316?\274\0379\315\327\352\311?\\\217\302\365(\\\337?\361\370\303\001\217?\274?\323\014\356\345\212=\300?\016$Zas \341?\311\235\242\2053 \344?\340\304m|-\257\336?\316\347\363\371|>\337?\364\2678\255\331>\321?\000\000\000\000\000\000\331?5\371\262A\223/\313?G\027]t\321E\327?\244p=\n\327\243\300?\323y\213!\235\267\250?@t\220\002\226\307\273?H\264\302\346@\242\325?\"5\301x+\373\314?\315\271\302jD:\335?\215\307\343\361x<\336?;\177\213\323\232\355\303?\370\377\377\377\377\377\273?|\373!\201\267\037\242?j\276V\317\016\201\313?{\024\256G\341z\204?\323y\213!\235\267\250?$i\006\367r\305\256? \321\n\233\003\211\326?\331\347\220\232`\274\325?\306\034\221N\027\362\254?\016\006\203\301`0\350?\260\253\360\345\206\030\320?\000\000\000\000\000\200\353?\017\232|\331\240\311\327?\264C\340\3062(\325?\303\365(\\\217\302\325?\017x\374\341\200\307\277?\302VS\213\326\006\300?p\227z2~\273\324?\3511\177\257\215X\347?\037\325!6\360\031\343?\212F\243\321h4\332?@:\2262\tv\305?\000\000\000\000\000\000\304?\024x\373!\201\267\277?j\276V\317\016\201\333?\232\231\231\231\231\231\251?\226{\032a\271\247\261?\333\316D9\026\024\267?\013\233\003\211V\330\274?\261.=\346\357\265\261?b\037\314y\\\372\326?\352t:\235N\247\343?\364\2678\255\331>\321?\377\377\377\377\377\377\324?\024x\373!\201\267\317?\231x?r\232\257\325?\270\036\205\353Q\270\276?\226{\032a\271\247\261?\332g;\023\345X\320?H\264\302\346@\242\245?\301x+\373\034R\243?\355\216\344\2404T\340?\212F\243\321h4\332?\375-Nk\266O\324?\370\377\377\377\377\377\273?\212s\035\2438\327\341?\231x?r\232\257\325?\\\217\302\365(\\\337?\352K\005\255\276T\320?\272b\017\204\255\246\306?6\007\022\255\2609\300?\261.=\346\357\265\261?\262\204\007\014\340\314\347?%\024\n\205B\241\320?\266f\373D\365\240\301?\376\377\377\377\377\377\337?y\373!\201\267\037\302?\016\201\033\313\240T\330?\000\000\000\000\000\000\000\000\323y\213!\235\267\250?\272b\017\204\255\246\266?\251\'\343\267K=\271?\301x+\373\034R\263?\340\304m|-\257\336?+\225J\245R\251\344?{\320\310;\177\213\323?\002\000\000\000\000\000\302?[X\351\251\205\225\336?\363\265zv\010\334\330?\327\243p=\n\327\323?D:o1\244\363\266?\363x#\233\363\252\300? \321\n\233\003\211\326?\341\014\010%w\212\326?5\013\022P\263\353\345?\214\305b\261X,\326?E\365\240\221w\376\306?\376\377\377\377\377\377\320?x\373!\201\267\037\322?\264C\340\3062(\325?\000\000\000\000\000\000\320?\226{\032a\271\247\261?\302$f\3278}\275?\371\355RO\306o\307?\002\241\344N\321\302\311?l3\037e;\222\343?Z,\026\213\305b\341?J\260\253\360\345\206\310?\000\000\000\000\000\000\264?\353\030\305\271\216Q\314?\363\265zv\010\334\330?{\024\256G\341z\224?\322y\213!\235\267\270?\341\220\233\214\241\352\275?p\227z2~\273\324?\261.=\346\357\265\341?i;\222\203\322P\341?\031\215F\243\321h\344?]\234\326l\237\250\276?\374\377\377\377\377\377\307?\177H\340\355\207\004\336?\206\211\367#\247\371\332?\270\036\205\353Q\270\316?a\271\247\021\226{\272?@t\220\002\226\307\273?\347@\242\0256\007\262?\331\347\220\232`\274\305?\243[,z\3038\341?e4\032\215F\243\321?6\304\200t,e\302?\002\000\000\000\000\000\302?\240\311\227\r\232|\331?\375\221\323|\255\236\335?)\\\217\302\365(\274?\316[\014\351\274\305\300?$\233\363\252\020O\301?\347@\242\0256\007\302?2\177\257\215X\227\316?\222\257\345\325\357\262\344?/\227\313\345r\271\334?3\tv\025\276\334\300?\000\000\000\000\000\000\304?\035\2438\3271\212\343?\330\352\331!pc\251?R\270\036\205\353Q\340?)\331\265\211\222]\313?\326m\231\217\320\250\303?H\264\302\346@\242\245?\022\353\322c\376^\273?\313i\017\177\376c\346?\312f\263\331l6\333?I\260\253\360\345\206\330?\376\377\377\377\377\377\317?\020\t\274\375\220\300\333?4(\025&\336\217\314?=\n\327\243p=\332?\226{\032a\271\247\341?=\023\345XP\\\270?\273\324\223\361\333\245\316?\n\306[\331\347\220\312?\354\031\303\321\202\004\344?\356v\273\335n\267\333?8\304\200t,e\322?\001\000\000\000\000\000\330?\2448\3271\212s\315?\370#\247\371Z=\333?\354Q\270\036\205\353\261?\2008\340\361\207\003\276?@t\220\002\226\307\273?Zas \321\n\313?\241\344N\321\302\031\340?0\033\370\214\341h\341?\331l6\233\315f\343?\261\253\360\345\206\030\300?\374\377\377\377\377\377\307?\021x\373!\201\267\337?\030]t\321E\027\335?\366(\\\217\302\365\330?\226{\032a\271\247\261?V\275\303\272-\363\261?\347@\242\0256\007\262?\261.=\346\357\265\261?9\272)\251\016\261\341?i\265Z\255V\253\325??:\2262\tv\265?\000\000\000\000\000\000\316?\235\353\030\305\271\216\321?\375\221\323|\255\236\275?\244p=\n\327\243\320?&\2736Q\262k\263?\024\345XP\\\030\261?6\007\022\255\2609\320?\236\242\2053 \224\334?;=\225\273\305\242\327?(\225J\245R\251\324?\265f\373D\365\240\321?\001\000\000\000\000\000\330?\236ZX\351\251\205\345?u\321E\027]t\321?\\\217\302\365(\\\337?\225{\032a\271\247\241?\377\233%\230\304\354\272?\013\233\003\211V\330\234?\000\000\000\000\000\000\000\000\343\357\262\204\007\014\340?\347t:\235N\247\323?E\365\240\221w\376\306?\001\000\000\000\000\000\323?\304JO-\254\364\324?G\027]t\321E\307?\232\231\231\231\231\231\331?a\271\247\021\226{\272?\272b\017\204\255\246\266?p\227z2~\273\324?\251\t\306[\331\347\320?\373uV\212\020\264\331?\215\307\343\361x<\336?\375-Nk\266O\324?\000\000\000\000\000\000\331?\300\333\017\t\274\375\300?\363\265zv\010\334\330?{\024\256G\341z\204?\265\372RA\253/\265?\225\225.%\377\315\262?\013\233\003\211V\330\254?\341\014\010%w\212\246?\317\243\005\t\250\331\325?\352t:\235N\247\343?\266f\373D\365\240\301?\001\000\000\000\000\000\335?\305\271\216Q\234\353\330?\016\201\033\313\240T\330?\000\000\000\000\000\000\320?&\2736Q\262k\263?\326m\231\217\320\250\303?\251\'\343\267K=\271?\362V\3669\244&\270?I\361N~0\347\341?\255V\253\325j\265\332?\331>Q=h\344\315?\376\377\377\377\377\377\305?\305\271\216Q\234\353\310?j\276V\317\016\201\333?\270\036\205\353Q\270\236?\322y\213!\235\267\270?\377\233%\230\304\354\272?\371\355RO\306o\307?\311\235\242\2053 \304?H\007\014\340\314G\331?\316\347\363\371|>\337?\271!\006\244c)\303?\001\000\000\000\000\000\323?\2448\3271\212s\315?F\027]t\321E\347?\000\000\000\000\000\000\000\000^\233(\331\265\211\302?\266\001d\332g;\303?H\264\302\346@\242\265?\241\344N\321\302\031\260?\247p\264 \0015\333?Z,\026\213\305b\341?<\177\213\323\232\355\263?\000\000\000\000\000\000\316?\024x\373!\201\267\277?\353\331!pc\031\324?\000\000\000\000\000\000\000\000\225{\032a\271\247\241?\266\001d\332g;\263?\251\'\343\267K=\311?\241\344N\321\302\031\300?\251\'?\230\363\270\324?\316\347\363\371|>\337?7\304\200t,e\262?\000\000\000\000\000\000\304?[X\351\251\205\225\336?G\027]t\321E\327?\270\036\205\353Q\270\316?D:o1\244\363\266?\201L\373lg\242\274?6\007\022\255\2609\320?\321\302\031\020J\356\324?\302\375\225\211B7\345?\214\305b\261X,\326?\266f\373D\365\240\301?\376\377\377\377\377\377\317?\370C\002o?$\340?G\027]t\321E\307?\244p=\n\327\243\340?\316[\014\351\274\305\300?S\213\326\006\220i\317?\251\'\343\267K=\311?\226}\016\251\t\306\333?\030\310\014\256I\334\346?\214\305b\261X,\326?\310R&\301\256\302\307?\002\000\000\000\000\000\302?\2448\3271\212s\315?\241T\230x?r\332?\270\036\205\353Q\270\256?\017x\374\341\200\307\277?@t\220\002\226\307\273?\251\'\343\267K=\311?\2766b]z\314\337?L+E\010\332\\\341?\331l6\233\315f\343?\261\253\360\345\206\030\300?\000\000\000\000\000\000\304?\235\353\030\305\271\216\321?\330\352\331!pc\331?\270\036\205\353Q\270\256?&\2736Q\262k\263?\201L\373lg\242\274?6\007\022\255\2609\320?\032\020J\356\024-\314?Z7%\325!6\340?\031\014\006\203\301`\340?\303\227\033b@:\306?\376\377\377\377\377\377\317?\2448\3271\212s\335?4(\025&\336\217\334?\366(\\\217\302\365\330?\355\332D\311\256M\304?\003\375\320A\nX\276?\347@\242\0256\007\322?UUUUUU\325?u\237\230Z\367\276\344?\361\367\373\375~\277\337?W\341\313\r1 \315?\000\000\000\000\000\000\336?0\0334\371\262A\323?\033\313\240T\230x\337?)\\\217\302\365(\314?\322y\213!\235\267\270?\377\233%\230\304\354\272?H\264\302\346@\242\305?\256\354sHM0\336?\000\000\000\000\000\000\340?O&\223\311d2\331?\261\253\360\345\206\030\300?\000\000\000\000\000\000\304?\304JO-\254\364\324?\023\357GN\363\265\332?\232\231\231\231\231\231\311?\264\372RA\253/\245?\242\2700\"\320\017\275?\371\355RO\306o\327?#\326\245\307\374\275\346?V\375.Kx\300\340?L\245R\251T*\325?\234\355\023\325\203F\336?\374\377\377\377\377\377\267?\305\271\216Q\234\353\330?\330\352\331!pc\331?\217\302\365(\\\217\322?&\2736Q\262k\263?=\023\345XP\\\270?2~\273\324\223\361\333?\216X\227\036\363\367\332?\215%<`\000g\336?\215\307\343\361x<\336?6\304\200t,e\302?\000\000\000\000\000\000\316?Z\351\251\205\225\236\332?\375\221\323|\255\236\315?\\\217\302\365(\\\337?\361\370\303\001\217?\274?E\325;\254\3332\277?\242\0256\007\022\255\340?\022\353\322c\376^\353?\206\030\'\330Y)\342?\016\006\203\301`0\330?3\tv\025\276\334\300?\002\000\000\000\000\000\302?\024x\373!\201\267\317?=;\004n,\203\322?q=\n\327\243p\335?D:o1\244\363\266?y\212\244\031\334\313\305?H\264\302\346@\242\265?\341\014\010%w\212\266?\240\226W\277\313\022\336?L\247\323\351t:\335?E\365\240\221w\376\306?\000\000\000\000\000\000\324?[X\351\251\205\225\316?u\321E\027]t\321?\n\327\243p=\n\327?|\032a\271\247\021\326?\340/\360\342[\177\272?\227z2~\273\324\303?\343\255\354sHM\340?\206\030\'\330Y)\342?p\267\333\355v\273\335?\271!\006\244c)\323?\000\000\000\000\000\000\324?\351:Fq\256c\304?*L\274\0379\315\327?{\024\256G\341z\224?\016x\374\341\200\307\257?\374:z\356~\201\267?H\264\302\346@\242\245?\241\344N\321\302\031\240?\n\2371\034-H\340?\211D\"\221H$\342?\322\310;\177\213\323\312?\000\000\000\000\000\000\304?\351:Fq\256c\304?\330\352\331!pc\311?\341z\024\256G\341\312?D:o1\244\363\266?\343\220\233\214\241\352\255? \321\n\233\003\211\326?\251\t\306[\331\347\320?z\264 \0015\273\336?\233L&\223\311d\342?3\tv\025\276\334\320?\374\377\377\377\377\377\307?\236ZX\351\251\205\345?u\321E\027]t\321?\\\217\302\365(\\\337?\225{\032a\271\247\241?\377\233%\230\304\354\272?\013\233\003\211V\330\234?\000\000\000\000\000\000\000\000\343\357\262\204\007\014\340?\347t:\235N\247\323?E\365\240\221w\376\306?\001\000\000\000\000\000\323?\305\271\216Q\234\353\330?\220\234\346k\365\354\320?\\\217\302\365(\\\337?a\271\247\021\226{\272?`\340\305\267\3764\274? \321\n\233\003\211\326?\247h\341\014\010%\347?\206\030\'\330Y)\342?+\026\213\305b\261\330?\271!\006\244c)\303?\370\377\377\377\377\377\273?{ja\245\247\026\326?\264C\340\3062(\305?\341z\024\256G\341\332?\322y\213!\235\267\270?\377\233%\230\304\354\272?\227z2~\273\324\303?\321\302\031\020J\356\264?\317\tvV\212\020\324?\013\205B\241P(\324?W\341\313\r1 \315?\001\000\000\000\000\200\340?Vzja\245\247\326?b\342\375\310i\276\326?\n\327\243p=\n\267?\264\372RA\253/\305?\034\247\257\243\347\356\267?\251\'\343\267K=\271?\261.=\346\357\265\261?\020\004m\256\260\032\341?+\026\213\305b\261\330?2\tv\025\276\334\260?\000\000\000\000\000\000\316?\017\232|\331\240\311\307?j\276V\317\016\201\333?q=\n\327\243p\315?\265\372RA\253/\265?\242\2700\"\320\017\275?\347@\242\0256\007\302?#\326\245\307\374\275\346?\356x\'?\230\363\330?\316\347\363\371|>\337?\324\203F\336\371[\314?\001\000\000\000\000\000\330?f\203&_6h\342?\353\331!pc\031\304?\366(\\\217\302\365\340?D:o1\244\363\266?\027F\004\372\241\203\264?\013\233\003\211V\330\234?\002\241\344N\321\302\231?aS\353\336\227\214\332?\013\207\303\341p8\314?\271!\006\244c)\323?\001\000\000\000\000\000\330?5\371\262A\223/\333?\353\331!pc\031\324?\303\365(\\\217\302\325?\013Z}\251\240\325\307?\341\220\233\214\241\352\275?\013\233\003\211V\330\254?\002\241\344N\321\302\251?)A\233+\254F\344?\356v\273\335n\267\333?X\341\313\r1 \275?\376\377\377\377\377\377\325?\306(\316u\214\342\334?\216eP*L\274\317?q=\n\327\243p\335?\265\372RA\253/\265?\340/\360\342[\177\272?\013\233\003\211V\330\254?\241\344N\321\302\031\260?gv\275\310\332*\336?\255V\253\325j\265\332?\336\371[\234\326l\317?\001\000\000\000\000\000\343?y\373!\201\267\037\302?u\321E\027]t\321?\232\231\231\231\231\231\311?\323y\213!\235\267\250?=\023\345XP\\\270?\013\233\003\211V\330\234?\"5\301x+\373\254?\347\321\202\004\324\354\332?:\034\016\207\303\341\340?\266f\373D\365\240\301?\370\377\377\377\377\377\273?\024x\373!\201\267\317?\330\352\331!pc\331?\244p=\n\327\243\320?\357\370\303\001\217?\334?]\177\032\016\271\311\270?\224\361\333\245\236\214\337?\247h\341\014\010%\347?\037\325!6\360\031\343?\361\367\373\375~\277\337?I\260\253\360\345\206\270?\002\000\000\000\000\000\302?|\331\240\311\227\r\332?\030]t\321E\027\335?\232\231\231\231\231\231\271?^\233(\331\265\211\302?\003/\276\365\247\341\300?\227z2~\273\324\303?\251\t\306[\331\347\320?\222\257\345\325\357\262\344?/\227\313\345r\271\334?\261\253\360\345\206\030\300?\000\000\000\000\000\000\304?\2448\3271\212s\335?\"pc\031\224\n\303?\366(\\\217\302\365\330?\357\370\303\001\217?\254?Y\036ods^\265?\013\233\003\211V\330\234?\301x+\373\034R\223?U\"\235.\3449\326?\013\205B\241P(\324?6\304\200t,e\302?\000\000\000\000\000\000\336?Z\351\251\205\225\236\332?\301\215eP*L\334?\244p=\n\327\243\320?&\2736Q\262k\263?U\275\303\272-\363\301?\013\233\003\211V\330\254?\3511\177\257\215X\307?\tly\365\273,\341?l6\233\315f\263\331?P&\301\256\302\227\253?\376\377\377\377\377\377\305?\353\030\305\271\216Q\334?G\027]t\321E\327?q=\n\327\243p\315?|\032a\271\247\021\306?\266\001d\332g;\303?6\007\022\255\2609\340?-\234\001\241\344N\341?\313i\017\177\376c\346?\013\207\303\341p8\334?J\260\253\360\345\206\310?\376\377\377\377\377\377\317?~\331\240\311\227\r\312?4(\025&\336\217\314?\270\036\205\353Q\270\316?\265\372RA\253/\265?\266\001d\332g;\303?H\264\302\346@\242\245?\002\241\344N\321\302y?\357D\010\332\\a\325?i4\032\215F\243\341?\271!\006\244c)\303?\001\000\000\000\000\000\335?\017\232|\331\240\311\307?j\276V\317\016\201\333?q=\n\327\243p\315?\265\372RA\253/\265?\242\2700\"\320\017\275?\347@\242\0256\007\302?#\326\245\307\374\275\346?\356x\'?\230\363\330?\316\347\363\371|>\337?\324\203F\336\371[\314?\001\000\000\000\000\000\330?\024x\373!\201\267\277?~\255\236\035\0027\326?\270\036\205\353Q\270\256?\016x\374\341\200\307\257?\323\014\356\345\212=\260?\242\0256\007\022\255\340?g@(\271S\264\340?\342\024!hs\205\305?\013\207\303\341p8\334?Nk\266OT\017\272?\002\000\000\000\000\200\324?~\331\240\311\227\r\312?~\255\236\035\0027\326?333333\323?D:o1\244\363\266?\323\014\356\345\212=\300?\013\233\003\211V\330\274?\207\324\004\343\255\354\343?\351T\356\026\213\336\340?l6\233\315f\263\331?\020\003\322\261\224I\340?\000\000\000\000\000\000\324?Z\351\251\205\225\236\332?\217eP*L\274\277?=\n\327\243p=\332?&\2736Q\262k\263?\003/\276\365\247\341\300?\347@\242\0256\007\262?\241\344N\321\302\031\260?\323v$\007\245\241\342?\312f\263\331l6\333?\324\203F\336\371[\314?\374\377\377\377\377\377\307?\305\271\216Q\234\353\330?4(\025&\336\217\334?\303\365(\\\217\302\305?^\233(\331\265\211\302?@t\220\002\226\307\273?\013\233\003\211V\330\254?\341\014\010%w\212\246?9\272)\251\016\261\341?\356v\273\335n\267\333?3\tv\025\276\334\300?\001\000\000\000\000\000\323?\346:Fq\256c\324?*L\274\0379\315\327?\244p=\n\327\243\320?D:o1\244\363\266?\027F\004\372\241\203\264?\321\n\233\003\211V\330?m\304\272\364\230\277\327?40\2003\037e\333?\013\207\303\341p8\334?Z\234\326l\237\250\256?\376\377\377\377\377\377\317?0\0334\371\262A\343?Y\006\245\302\304\373\321?\000\000\000\000\000\000\340?\017x\374\341\200\307\277?\373:z\356~\201\307?H\264\302\346@\242\245?\261.=\346\357\265\261?KA\002jv\275\350?\347t:\235N\247\323?\324\203F\336\371[\314?\376\377\377\377\377\377\320?\304JO-\254\364\324?\330\352\331!pc\331?\000\000\000\000\000\000\320?D:o1\244\363\266?\272b\017\204\255\246\306?\013\233\003\211V\330\274?\002\241\344N\321\302\311? \214\254\255\342\235\334?(\225J\245R\251\324?]\234\326l\237\250\276?\004\000\000\000\000\000\312?\300\333\017\t\274\375\320?\033\313\240T\230x\337?\000\000\000\000\000\000\000\000\265\372RA\253/\265?\034\247\257\243\347\356\267?\202D+l\016$\332?\3511\177\257\215X\307?\310\311\250\247r\267\330?\251T*\225J\245\342?J\260\253\360\345\206\310?\001\000\000\000\000\000\335?\353\030\305\271\216Q\334?\375\221\323|\255\236\335?\270\036\205\353Q\270\316?D:o1\244\363\266?\302VS\213\326\006\300?\013\233\003\211V\330\254?\261.=\346\357\265\301?O\360\031\303\321\202\344?\013\205B\241P(\324?\276\334\020\003\322\261\304?\376\377\377\377\377\377\320?\300\333\017\t\274\375\320?\320\016\201\033\313\240\324?333333\303?\316[\014\351\274\305\300?8\2629\257\n\361\304?\013\233\003\211V\330\334?\216X\227\036\363\367\332?\001\267\212w\362\203\331?i\265Z\255V\253\325?E\365\240\221w\376\306?\376\377\377\377\377\377\320?Z\351\251\205\225\236\332?\241T\230x?r\312?)\\\217\302\365(\334?\323y\213!\235\267\250?\231\366\331\316D9\246?\347@\242\0256\007\322?\"5\301x+\373\314?\333:\304\006>c\330?O&\223\311d2\331?8\304\200t,e\322?\002\000\000\000\000\000\327?x\373!\201\267\037\322?~\255\236\035\0027\326?\244p=\n\327\243\320?&\2736Q\262k\263?\323\014\356\345\212=\300?\227z2~\273\324\323?\251\t\306[\331\347\320?\371%\243\236\312\335\342?:\034\016\207\303\341\340?\336\371[\234\326l\317?\370\377\377\377\377\377\273?\300\333\017\t\274\375\320?\353\331!pc\031\324?\217\302\365(\\\217\322?\322y\213!\235\267\270?cAqaD\240\277?\013\233\003\211V\330\254?\002\241\344N\321\302\251?\265\276\375\225\211B\327?L\247\323\351t:\335?\303\227\033b@:\306?\000\000\000\000\000\000\336?\310\271\216Q\234\353\270?\330\352\331!pc\331?\000\000\000\000\000\000\000\000\225{\032a\271\247\241?y\212\244\031\334\313\265?\347@\242\0256\007\302?\301x+\373\034R\263?\n\3038\301\316J\301?z<\036\217\307\343\341?\266f\373D\365\240\301?\377\377\377\377\377\177\342?\304JO-\254\364\324?\330\352\331!pc\331?\000\000\000\000\000\000\320?D:o1\244\363\266?\272b\017\204\255\246\306?\013\233\003\211V\330\274?\002\241\344N\321\302\311? \214\254\255\342\235\334?(\225J\245R\251\324?]\234\326l\237\250\276?\004\000\000\000\000\000\312?0\0334\371\262A\323?\000\000\000\000\000\000\340?\270\036\205\353Q\270\316?\316[\014\351\274\305\300?\003\375\320A\nX\276?6\007\022\255\2609\300?\341\014\010%w\212\326?\2400\347q\351\333\337?\261\327\353\365z\275\336?\266f\373D\365\240\301?\000\000\000\000\000\000\316?\017\232|\331\240\311\307?Y\006\245\302\304\373\321?\270\036\205\353Q\270\316?\357\370\303\001\217?\254?@t\220\002\226\307\273?\273\324\223\361\333\245\316?\341\014\010%w\212\306?U\"\235.\3449\326?\031\014\006\203\301`\340?\276\334\020\003\322\261\304?\377\377\377\377\377\377\324?\2448\3271\212s\315?G\027]t\321E\307?{\024\256G\341z\324?\361\370\303\001\217?\274?\363x#\233\363\252\300?\277]\352\311\370\355\342?\227\036\363\367\332\210\345?\340\304m|-\257\336?L\247\323\351t:\335?\265f\373D\365\240\321?\377\377\377\377\377\377\331?\346:Fq\256c\324?\370#\247\371Z=\333?\232\231\231\231\231\231\271?\265\372RA\253/\265?\275\303\272-\363\021\272?H\264\302\346@\242\325?\331\347\220\232`\274\325?\200(\r\025\210\246\335?\356v\273\335n\267\333?\260\253\360\345\206\030\320?\001\000\000\000\000\000\330?\345\313\006M\276l\320?\320\016\201\033\313\240\324?{\024\256G\341z\224?\357\370\303\001\217?\254?$i\006\367r\305\276?H\264\302\346@\242\305?\311\235\242\2053 \304?\356x\'?\230\363\330?\316\347\363\371|>\337?\261\253\360\345\206\030\300?\000\000\000\000\000\000\324?5\371\262A\223/\273?\270\261\014J\205\211\347?\037\205\353Q\270\036\345?&\2736Q\262k\263?\332\316D9\026\024\247?\251\'\343\267K=\311?%w\212\026\316\200\340?6\346\243lGr\320?\315\345r\271\\.\347?\276\334\020\003\322\261\304?\000\000\000\000\000\000\336?\345\313\006M\276l\320?h\207\300\215eP\352?\232\231\231\231\231\231\271?&\2736Q\262k\303?cAqaD\240\277?\013\233\003\211V\330\254?\301x+\373\034R\243?\347\321\202\004\324\354\332?\013\205B\241P(\344?\276\334\020\003\322\261\304?\376\377\377\377\377\377\332?\353\030\305\271\216Q\314?O\363\265zv\010\334?\n\327\243p=\n\307?\016x\374\341\200\307\257?]\177\032\016\271\311\270?H\264\302\346@\242\305?\022\353\322c\376^\313?\n\2371\034-H\340?i4\032\215F\243\341?\276\334\020\003\322\261\304?\374\377\377\377\377\377\267?\021x\373!\201\267\337?\030]t\321E\027\335?\366(\\\217\302\365\330?\226{\032a\271\247\261?V\275\303\272-\363\261?\347@\242\0256\007\262?\261.=\346\357\265\261?9\272)\251\016\261\341?i\265Z\255V\253\325??:\2262\tv\265?\000\000\000\000\000\000\316?\024x\373!\201\267\317?j\276V\317\016\201\273?\217\302\365(\\\217\322?D:o1\244\363\266?V\275\303\272-\363\261?6\007\022\255\2609\320?-\234\001\241\344N\321?\240c\237\230Z\367\336?(\024\n\205B\241\340?rZ\263}\242z\320?\001\000\000\000\000\000\330?0\0334\371\262A\323?\330\352\331!pc\331?{\024\256G\341z\264?\2008\340\361\207\003\276?\225\225.%\377\315\262?\013\233\003\211V\330\234?\002\241\344N\321\302y?\341\303\006>c8\312?\016\006\203\301`0\330?F\260\253\360\345\206\230?\000\000\000\000\000\200\346?Vzja\245\247\306?\274\0379\315\327\352\331?{\024\256G\341z\204?\226{\032a\271\247\261?\242\2700\"\320\017\275?\251\'\343\267K=\271?2\177\257\215X\227\276?L+E\010\332\\\341?\374\375~\277\337\357\347?\\\234\326l\237\250\316?\000\000\000\000\000\000\324?\237ZX\351\251\205\305?\016\201\033\313\240T\330?\000\000\000\000\000\000\000\000D:o1\244\363\266?U\275\303\272-\363\301?\013\233\003\211V\330\234?\341\014\010%w\212\246?[Eo\030\'\330\331?\214\305b\261X,\346?\303\227\033b@:\306?\000\000\000\000\000\000\336?\352\251\205\225\236Z\330?\"pc\031\224\n\343?\303\365(\\\217\302\325?\225{\032a\271\247\241?\323\014\356\345\212=\260?H\264\302\346@\242\245?\002\241\344N\321\302\231?\373uV\212\020\264\331?\312d2\231L&\323?D\365\240\221w\376\266?\374\377\377\377\377\377\267?\237ZX\351\251\205\305?Y\006\245\302\304\373\321?\354Q\270\036\205\353\301?a\271\247\021\226{\272?y\212\244\031\334\313\305?\013\233\003\211V\330\274?\372{m\304\272\364\310?`\234`g\245\010\341?\315\345r\271\\.\347?J\260\253\360\345\206\310?\004\000\000\000\000\000\312?\305\271\216Q\234\353\330?=;\004n,\203\342?\232\231\231\231\231\231\251?a\271\247\021\226{\272?\302$f\3278}\275? \321\n\233\003\211\326?5\301x+\373\034\342?\277\005\t\250\331\365\342?\316\347\363\371|>\337?]\234\326l\237\250\276?\000\000\000\000\000\000\316?~\331\240\311\227\r\312?\311i\276V\317\016\341?{\024\256G\341z\224?\322y\213!\235\267\270?y\212\244\031\334\313\265?\273\324\223\361\333\245\336?e\237Cj\202\361\326?\023\013\253\021\351t\341?:\235N\247\323\351\344?\364\2678\255\331>\321?\002\000\000\000\000\000\314?\353\030\305\271\216Q\314?\375\221\323|\255\236\335?\000\000\000\000\000\000\000\000\322y\213!\235\267\270?\302VS\213\326\006\300?\013\233\003\211V\330\314?\241\344N\321\302\031\300?6\2003\037e;\342?z<\036\217\307\343\341?]\234\326l\237\250\276?\000\000\000\000\000\000\304?\346:Fq\256c\324?\353\331!pc\031\304?\232\231\231\231\231\231\331?D:o1\244\363\266?\326m\231\217\320\250\263?\347@\242\0256\007\262?\002\241\344N\321\302\231?(\231\3015\211\333\330?/\227\313\345r\271\334?\322\310;\177\213\323\312?\376\377\377\377\377\377\332?x\373!\201\267\037\322?\220\234\346k\365\354\320?\354Q\270\036\205\353\321?\017x\374\341\200\307\277?\226\225.%\377\315\302?\273\324\223\361\333\245\316?\363\367\332\210u\351\341?\340\304m|-\257\336?\016\006\203\301`0\330?Ok\266OT\017\312?\002\000\000\000\000\000\302?Vzja\245\247\306?\353\331!pc\031\344?{\024\256G\341z\244?D:o1\244\363\266?\333\316D9\026\024\267?\227z2~\273\324\303?\341\014\010%w\212\266?\272H\247\013y\216\335?\371|>\237\317\347\343?\266f\373D\365\240\301?\002\000\000\000\000\000\314?0\0334\371\262A\323?\330\352\331!pc\331?)\\\217\302\365(\314?\265\372RA\253/\265?\242\2700\"\320\017\275?H\264\302\346@\242\325?\207\324\004\343\255\354\343?.\274\223\037\314y\334?\013\207\303\341p8\334?I\260\253\360\345\206\270?\002\000\000\000\000\000\314?\035\2438\3271\212\343?\"pc\031\224\n\303?333333\343?&\2736Q\262k\263?\374:z\356~\201\267?\227z2~\273\324\303?\251\t\306[\331\347\300?\371%\243\236\312\335\342?\246T*\225J\245\322?I\260\253\360\345\206\330?\376\377\377\377\377\377\317?1\212s\035\2438\327?Y\006\245\302\304\373\321?\327\243p=\n\327\323?\361\370\303\001\217?\274?<\023\345XP\\\310?p\227z2~\273\324?\3511\177\257\215X\327?L+E\010\332\\\341?\211D\"\221H$\322?\336\371[\234\326l\317?\376\377\377\377\377\377\305?U\013+=\265\260\322?\330\352\331!pc\251?\232\231\231\231\231\231\331?D:o1\244\363\266?eAqaD\240\257?\242\0256\007\022\255\340?v\3511\177\257\215\330?\201\216}bj\335\333?p\267\333\355v\273\335?F\365\240\221w\376\326?\002\000\000\000\000\000\334?5\371\262A\223/\313?\253g\207\300\215e\320?\n\327\243p=\n\327?\323y\213!\235\267\250?\343\302\210@?t\300?\371\355RO\306o\307?\372{m\304\272\364\310?\364\233\371(\333\221\334?\215\307\343\361x<\336?\266f\373D\365\240\301?\370\377\377\377\377\377\273?\235\353\030\305\271\216\341?\375\221\323|\255\236\315?=\n\327\243p=\332?D:o1\244\363\266?$i\006\367r\305\276?H\264\302\346@\242\265?\261.=\346\357\265\261?l3\037e;\222\343?H$\022\211D\"\321?Ok\266OT\017\312?\004\000\000\000\000\000\300?\323S\013+=\265\340?\363\265zv\010\334\330?\\\217\302\365(\\\337?\265\372RA\253/\265?]\177\032\016\271\311\270?\371\355RO\306o\307?%w\212\026\316\200\320?\302\375\225\211B7\345?\013\207\303\341p8\334?\266f\373D\365\240\301?\376\377\377\377\377\377\305?5\371\262A\223/\313?\340\3062(\025&\336?\354Q\270\036\205\353\261?\361\370\303\001\217?\274?\003/\276\365\247\341\300?\251\'\343\267K=\311?\362V\3669\244&\270?aS\353\336\227\214\332?\007\004\002\201@ \340?\276\334\020\003\322\261\304?\002\000\000\000\000\000\334?\353\030\305\271\216Q\314?\253g\207\300\215e\320?\303\365(\\\217\302\305?\016x\374\341\200\307\257?\341\220\233\214\241\352\275?\371\355RO\306o\327?5\301x+\373\034\322?\364hA\002jv\335?\273\\.\227\313\345\342?\310R&\301\256\302\307?\001\000\000\000\000\000\323?\346:Fq\256c\324?$\247\371Z=;\344?\232\231\231\231\231\231\311?\225{\032a\271\247\241?cAqaD\240\277?H\264\302\346@\242\265?\311\235\242\2053 \304?\274e\242\320MI\325?\246T*\225J\245\322?<\177\213\323\232\355\263?\000\000\000\000\000\000\316?\237ZX\351\251\205\325?\363\265zv\010\334\330?\217\302\365(\\\217\322?\2008\340\361\207\003\276?(\374\236TV\272\304?Zas \321\n\333?#\326\245\307\374\275\346?\240\356}\311\250\247\342?(\225J\245R\251\324?Nk\266OT\017\272?\374\377\377\377\377\377\267?\345\313\006M\276l\340?\264C\340\3062(\325?\315\314\314\314\314\314\334?&\2736Q\262k\263?\242\2700\"\320\017\275?\347@\242\0256\007\262?\341\014\010%w\212\246?\334H\016JC\005\342?\016\006\203\301`0\330?rZ\263}\242z\320?\001\000\000\000\000\000\335?\2448\3271\212s\315?Ra\342\375\310i\336?\244p=\n\327\243\300?&\2736Q\262k\263?\037\010[M-Z\273?\227z2~\273\324\303?\341\014\010%w\212\266?t\367\276d\324S\331?\356v\273\335n\267\333?\261\253\360\345\206\030\300?\376\377\377\377\377\377\317?U\013+=\265\260\322?G\027]t\321E\307?\341z\024\256G\341\332?&\2736Q\262k\263?cAqaD\240\277?\251\'\343\267K=\271?\321\302\031\020J\356\264?t\367\276d\324S\331?\261\327\353\365z\275\336?\276\334\020\003\322\261\304?\001\000\000\000\000\000\335?\235\353\030\305\271\216\321?~\3444_\253g\347?333333\303?\265\372RA\253/\265?\266\001d\332g;\303?\347@\242\0256\007\302?\321\302\031\020J\356\304?\rNIu\210\r\334?+\026\213\305b\261\330?D\365\240\221w\376\266?\000\000\000\000\000\000\316?\305\271\216Q\234\353\310?\375\221\323|\255\236\335?\341z\024\256G\341\312?\265\372RA\253/\265?]\177\032\016\271\311\270?\013\233\003\211V\330\274?\022\353\322c\376^\273?t\367\276d\324S\331?\007\004\002\201@ \340?\276\334\020\003\322\261\304?\002\000\000\000\000\000\322?\017\232|\331\240\311\327?b\342\375\310i\276\326?{\024\256G\341z\244?D:o1\244\363\266?\312\030\252\336a\335\306?\371\355RO\306o\307?\311\235\242\2053 \324?\032Kx\300\000\316\334?\353\365z\275^\257\327?\276\334\020\003\322\261\304?\001\000\000\000\000\000\330?Vzja\245\247\266?J\205\211\367#\247\331?\232\231\231\231\231\231\251?a\271\247\021\226{\272?\275\303\272-\363\021\272?6\007\022\255\2609\320?2\177\257\215X\227\276?\242M\3426\276\226\307?+\225J\245R\251\344?3\tv\025\276\334\300?\000\000\000\000\000\000\346?0\0334\371\262A\303?*L\274\0379\315\327?\354Q\270\036\205\353\321?\265\372RA\253/\265?$i\006\367r\305\256?H\264\302\346@\242\305?-\234\001\241\344N\321?p\323\205<\307>\321?:\034\016\207\303\341\340?\276\334\020\003\322\261\304?\001\000\000\000\000\200\345?\017\232|\331\240\311\327?\330\352\331!pc\331?\217\302\365(\\\217\322?D:o1\244\363\266?u)\371o\226`\302?\013\233\003\211V\330\254?\"5\301x+\373\254?O\360\031\303\321\202\344?\316\347\363\371|>\337?I\260\253\360\345\206\270?\374\377\377\377\377\377\267?Vzja\245\247\246?=;\004n,\203\322?{\024\256G\341z\224?\361\370\303\001\217?\234?\226\225.%\377\315\242?\273\324\223\361\333\245\316?2\177\257\215X\227\316?\t]\310s\354\023\303?O\247\323\351t:\355?\303\227\033b@:\306?\001\000\000\000\000\200\345?f\203&_6h\342?\220\234\346k\365\354\320?\341z\024\256G\341\332?D:o1\244\363\266?\232\366\331\316D9\266?\371\355RO\306o\307?\321\302\031\020J\356\264?V\312v$\007\245\341?l6\233\315f\263\331?6\304\200t,e\302?\001\000\000\000\000\000\323?f\203&_6h\342?\016\201\033\313\240T\310?\270\036\205\353Q\270\336?&\2736Q\262k\303?\363x#\233\363\252\300?\013\233\003\211V\330\254?\362V\3669\244&\270?\002\222\034\224\206\n\344?i\265Z\255V\253\325?]\234\326l\237\250\276?\000\000\000\000\000\000\324?\346:Fq\256c\324?F\027]t\321E\347?\n\327\243p=\n\267?\322y\213!\235\267\270?\272b\017\204\255\246\266?H\264\302\346@\242\265?\372{m\304\272\364\310?\2400\347q\351\333\337?L\247\323\351t:\335?3\tv\025\276\334\300?\000\000\000\000\000\000\264?Vzja\245\247\306?\353\331!pc\031\324?{\024\256G\341z\244?\265\372RA\253/\265?\034\247\257\243\347\356\267?\347@\242\0256\007\262?\002\241\344N\321\302\251?\001\267\212w\362\203\331?\031\014\006\203\301`\340?\310R&\301\256\302\307?\002\000\000\000\000\000\302?\256c\024\347:F\341?\375\221\323|\255\236\315?\256G\341z\024\256\327?\226{\032a\271\247\261?\302$f\3278}\275?\013\233\003\211V\330\314?\271S\264p\006\204\302?\'\3426\276\226W\337?\312d2\231L&\323?J\260\253\360\345\206\310?\376\377\377\377\377\377\332?:\371\262A\223/\253?\264C\340\3062(\305?\000\000\000\000\000\000\320?\016x\374\341\200\307\257?\306\267\3764\034r\303?H\264\302\346@\242\305?\261.=\346\357\265\321?\233s\205\325\210t\332?\007\004\002\201@ \340?3\tv\025\276\334\300?\370\377\377\377\377\377\273?\353\030\305\271\216Q\314?W\317\016\201\033\313\340?333333\303?\016x\374\341\200\307\257?\007\220i\237\355L\304?\016$Zas \321?:\244&\030oe\337?\224\377\230\3015\211\333?\252\325j\265Z\255\326?Nk\266OT\017\272?\000\000\000\000\000\000\304?\013+=\265\260\322\343?\257\325\263C\340\306\322?\232\231\231\231\231\231\331?\225{\032a\271\247\241?\003/\276\365\247\341\300?\347@\242\0256\007\262?\261.=\346\357\265\301?\320~\227%<`\340?%\024\n\205B\241\320?J\260\253\360\345\206\310?\354\251\252\252\252\252\316?[X\351\251\205\225\316?\320\016\201\033\313\240\324?\n\327\243p=\n\307?\265\372RA\253/\265?]\177\032\016\271\311\270?\227z2~\273\324\303?\261.=\346\357\265\301?|y\365\273,\341\341?\352t:\235N\247\343?\\\234\326l\237\250\316?\000\000\000\000\000\000\304?\237ZX\351\251\205\325?\330\352\331!pc\311?{\024\256G\341z\324?D:o1\244\363\266?\302$f\3278}\275?2~\273\324\223\361\333?\246\307\374\2756b\335?\264\007s\036\227\276\335?\013\207\303\341p8\334?\331>Q=h\344\315?\000\000\000\000\000\000\331?[X\351\251\205\225\316?9\315\327\352\331!\340?\270\036\205\353Q\270\316?\226{\032a\271\247\261?\027F\004\372\241\203\304?\273\324\223\361\333\245\316?\301x+\373\034R\343?-#k\253x\'\337?\212F\243\321h4\332?;\177\213\323\232\355\303?\004\000\000\000\000\000\300?\304JO-\254\364\324?\375\221\323|\255\236\275?\256G\341z\024\256\327?\225{\032a\271\247\241?\037\010[M-Z\273?\251\'\343\267K=\271?\022\353\322c\376^\273?\243[,z\3038\341?\212F\243\321h4\332?\324\203F\336\371[\314?\376\377\377\377\377\377\305?Vzja\245\247\326?\216eP*L\274\317?\366(\\\217\302\365\330?\016x\374\341\200\307\257?\034\247\257\243\347\356\267?\347@\242\0256\007\262?\301x+\373\034R\243?\216\334\306\327\362\352\327?\261\327\353\365z\275\336?R&\301\256\302\227\313?\376\377\377\377\377\377\337?\352\251\205\225\236Z\330?\241T\230x?r\332?R\270\036\205\353Q\310?a\271\247\021\226{\312?\003/\276\365\247\341\320? \321\n\233\003\211\346?\236\242\2053 \224\354?\002\222\034\224\206\n\344?i\265Z\255V\253\325?F\365\240\221w\376\326?\370\377\377\377\377\377\273?\300\333\017\t\274\375\320?u\321E\027]t\341?\000\000\000\000\000\000\000\000\357\370\303\001\217?\254?\037\010[M-Z\273?\013\233\003\211V\330\334?:\244&\030oe\317?\224\314\340\232\304m\334?/\227\313\345r\271\334?\303\227\033b@:\306?\376\377\377\377\377\377\325?\2448\3271\212s\315?Ra\342\375\310i\336?\244p=\n\327\243\300?&\2736Q\262k\263?\037\010[M-Z\273?\227z2~\273\324\303?\341\014\010%w\212\266?t\367\276d\324S\331?\356v\273\335n\267\333?\261\253\360\345\206\030\300?\376\377\377\377\377\377\317?U\013+=\265\260\322?\016\201\033\313\240T\310?q=\n\327\243p\335?\013Z}\251\240\325\307?`\340\305\267\3764\274?\251\'\343\267K=\311?\372{m\304\272\364\310?}\254\255\342\235\374\340?\261\327\353\365z\275\336?\375-Nk\266O\324?\001\000\000\000\000\200\345?\017\232|\331\240\311\327?\353\331!pc\031\304?\232\231\231\231\231\231\331?\316[\014\351\274\305\300?(\374\236TV\272\304?H\264\302\346@\242\265?\241\344N\321\302\031\260?Z\254F\244\323\205\334?/\227\313\345r\271\334?\265f\373D\365\240\321?\001\000\000\000\000\200\340?\235\353\030\305\271\216\321?\320\016\201\033\313\240\324?\354Q\270\036\205\353\321?\265\372RA\253/\265?\302VS\213\326\006\300?\227z2~\273\324\323?\301x+\373\034R\323?\323v$\007\245\241\342?H$\022\211D\"\341?\336\371[\234\326l\317?\370\377\377\377\377\377\273?\021x\373!\201\267\337?\335X\006\245\302\304\333?\n\327\243p=\n\327?\016x\374\341\200\307\257?3Q\216\005\305\205\261?\013\233\003\211V\330\254?\002\241\344N\321\302\251?\037\325!6\360\031\343?i\265Z\255V\253\325?P&\301\256\302\227\253?\000\000\000\000\000\000\316?\305\271\216Q\234\353\310?\"pc\031\224\n\323?\000\000\000\000\000\000\320?&\2736Q\262k\263?\037\010[M-Z\273?\251\'\343\267K=\331?]z\314\337k#\326?\325\371\217\031\\\223\330?\215\307\343\361x<\336?\276\334\020\003\322\261\304?\001\000\000\000\000\000\323?\345\313\006M\276l\320?\330\352\331!pc\331?{\024\256G\341z\324?\017x\374\341\200\307\277?\306\267\3764\034r\303?H\264\302\346@\242\305?\271S\264p\006\204\342?\234\033_\313\253\337\345?z<\036\217\307\343\341?\303\227\033b@:\306?\000\000\000\000\000\000\304?\304JO-\254\364\324?/\272\350\242\213.\332?)\\\217\302\365(\314?\2008\340\361\207\003\276?\302VS\213\326\006\300?\347@\242\0256\007\262?\321\302\031\020J\356\264?\037\325!6\360\031\343?\212F\243\321h4\332?@:\2262\tv\305?\004\000\000\000\000\000\300?0\0334\371\262A\323?\330\352\331!pc\251?\256G\341z\024\256\327?\000\000\000\000\000\000\000\000eAqaD\240\257?\224\361\333\245\236\214\337?\217\371{m\304\272\344?\000\000\000\000\000\000\000\000\215\307\343\361x<\276?2\tv\025\276\334\260?\377\377\377\377\377\377\344?\345\313\006M\276l\320?*L\274\0379\315\327?{\024\256G\341z\224?\2008\340\361\207\003\276?@t\220\002\226\307\273?\347@\242\0256\007\302?\3511\177\257\215X\307?[Eo\030\'\330\331?\316\347\363\371|>\337?\303\227\033b@:\306?\002\000\000\000\000\000\327?\353\030\305\271\216Q\314?\340\3062(\025&\336?{\024\256G\341z\244?\265\372RA\253/\265?\034\247\257\243\347\356\267?6\007\022\255\2609\320?\251\t\306[\331\347\300?\023>c8Z\220\340?i4\032\215F\243\341?Ok\266OT\017\312?\004\000\000\000\000\000\312?\305\271\216Q\234\353\310?=;\004n,\203\322?{\024\256G\341z\264?D:o1\244\363\266?\232\366\331\316D9\266?\273\324\223\361\333\245\316?\002\241\344N\321\302\311?a\206\243\005\t\250\331?\013\207\303\341p8\334?J\260\253\360\345\206\310?\376\377\377\377\377\377\305?\345\313\006M\276l\340?\221\234\346k\365\354\300?H\341z\024\256G\341?\017x\374\341\200\307\277?\347#4\352\204\337\303?\013\233\003\211V\330\254?\321\302\031\020J\356\264?O\360\031\303\321\202\344?l6\233\315f\263\331?E\365\240\221w\376\306?\000\000\000\000\000\000\304?0\0334\371\262A\323?*L\274\0379\315\327?q=\n\327\243p\315?\355\332D\311\256M\304?\275\303\272-\363\021\272?\013\233\003\211V\330\314?#\326\245\307\374\275\346?S\322\351B\236c\337?\212F\243\321h4\332?6\304\200t,e\302?\004\000\000\000\000\000\300?\020\t\274\375\220\300\333?u\321E\027]t\341?)\\\217\302\365(\314?\226{\032a\271\247\261?@t\220\002\226\307\273?\347@\242\0256\007\262?\321\302\031\020J\356\304?O\360\031\303\321\202\344?\212F\243\321h4\332?\266f\373D\365\240\301?\377\377\377\377\377\377\324?Vzja\245\247\306?\315\327\352\331!p\343?{\024\256G\341z\224?a\271\247\021\226{\272?Y\036ods^\265?\251\'\343\267K=\311?\022\353\322c\376^\273?\007\332\\a5\"\335?\013\205B\241P(\344?\276\334\020\003\322\261\304?\000\000\000\000\000\000\331?\021x\373!\201\267\337?\330\352\331!pc\311?{\024\256G\341z\344?\226{\032a\271\247\301?\373:z\356~\201\307?6\007\022\255\2609\300?\032\020J\356\024-\314?\323v$\007\245\241\342?+\026\213\305b\261\330?\315\r1 \035K\311?\000\000\000\000\000\000\344?5\371\262A\223/\313?\216eP*L\274\317?ffffff\326?\323y\213!\235\267\250?\323\014\356\345\212=\300?Zas \321\n\313?\n\306[\331\347\220\312?\316\354z\221\265U\334?\215\307\343\361x<\336?3\tv\025\276\334\300?\370\377\377\377\377\377\273?\240\311\227\r\232|\331?j\276V\317\016\201\333?q=\n\327\243p\315?&\2736Q\262k\303?D\007)`y\274\301?H\264\302\346@\242\305?\002\241\344N\321\302\311?\030\310\014\256I\334\346?\312f\263\331l6\333?;\177\213\323\232\355\303?\374\377\377\377\377\377\307?\300\333\017\t\274\375\320?\016\201\033\313\240T\310?333333\343?\2008\340\361\207\003\276?\275\303\272-\363\021\272?\227z2~\273\324\323?2\177\257\215X\227\316?S\005\242i\017\177\336?\007\004\002\201@ \340?\265f\373D\365\240\321?\377\377\377\377\377\377\331?\346:Fq\256c\324?\253g\207\300\215e\320?\217\302\365(\\\217\322?\323y\213!\235\267\250?\302$f\3278}\275?\371\355RO\306o\327?:\244&\030oe\317?\341]\226\360\200\001\334?l6\233\315f\263\331?\261\253\360\345\206\030\300?\002\000\000\000\000\000\322?\346:Fq\256c\324?\016\201\033\313\240T\310?\037\205\353Q\270\036\325?a\271\247\021\226{\272?\037\010[M-Z\273?\347@\242\0256\007\302?%w\212\026\316\200\320?\347\236\312\335b\321\333?\255V\253\325j\265\332?8\304\200t,e\322?\000\000\000\000\000\000\331?x\373!\201\267\037\322?\220\234\346k\365\354\340?{\024\256G\341z\244?\322y\213!\235\267\270?\024\345XP\\\030\301?\251\'\343\267K=\311?\301x+\373\034R\323?\n\2371\034-H\340?\212F\243\321h4\332?J\260\253\360\345\206\310?\004\000\000\000\000\000\312?x\373!\201\267\037\322?\231x?r\232\257\325?\037\205\353Q\270\036\325?a\271\247\021\226{\272?\242\2700\"\320\017\275?p\227z2~\273\324?\226}\016\251\t\306\353?\272\025\357\344\007s\336?\013\207\303\341p8\334?\276\334\020\003\322\261\304?\000\000\000\000\000\000\304?\345\313\006M\276l\320?O\363\265zv\010\334?\n\327\243p=\n\307?D\311\256M\224\354\332?\323\014\356\345\212=\300?\371\355RO\306o\327?\261.=\346\357\265\341?UUUUUU\345?\007\004\002\201@ \340?3\tv\025\276\334\320?\002\000\000\000\000\000\302?\017\232|\331\240\311\327?\330\352\331!pc\271?ffffff\326?\357\370\303\001\217?\254?t)\371o\226`\262?H\264\302\346@\242\305?\251\t\306[\331\347\300?\234\220\200\232]/\322?\013\205B\241P(\324?;\177\213\323\232\355\303?\002\000\000\000\000\000\334?U\013+=\265\260\322?\330\352\331!pc\331?\270\036\205\353Q\270\256?\323y\213!\235\267\250?=\023\345XP\\\270?\251\'\343\267K=\311?UUUUUU\325?\264\007s\036\227\276\335?\013\207\303\341p8\334?<\177\213\323\232\355\263?\002\000\000\000\000\000\302?Z\351\251\205\225\236\332?4(\025&\336\217\314?)\\\217\302\365(\334?\265\372RA\253/\265?\007\220i\237\355L\304?\343\267K=\031\277\335?\257\215X\227\036\363\347?\206\030\'\330Y)\342?\013\205B\241P(\324?\223`W\341\313\r\341?\000\000\000\000\000\000\304?Vzja\245\247\306?j\276V\317\016\201\333?\327\243p=\n\327\323?B:o1\244\363\326?\003\375\320A\nX\276?H\264\302\346@\242\265?-\234\001\241\344N\321?s\r|\306p\264\340?\261\327\353\365z\275\336?\322\310;\177\213\323\312?\002\000\000\000\000\000\322?\353\030\305\271\216Q\334?\216eP*L\274\317?ffffff\326?\265\372RA\253/\265?\003\375\320A\nX\276?\013\233\003\211V\330\314?\002\241\344N\321\302\311?\341*\336\311\017\346\334?+\026\213\305b\261\330?\315\r1 \035K\311?\377\377\377\377\377\377\331?Vzja\245\247\326?Y\006\245\302\304\373\341?)\\\217\302\365(\274?\322y\213!\235\267\270?$i\006\367r\305\276?\227z2~\273\324\303?\311\235\242\2053 \304?\254\307\245o\177e\342?(\024\n\205B\241\340?D\365\240\221w\376\266?\002\000\000\000\000\000\314?\024x\373!\201\267\317?\006\245\302\304\373\221\323?R\270\036\205\353Q\310?^\233(\331\265\211\302?@t\220\002\226\307\273?Zas \321\n\313?\372{m\304\272\364\310?\340\304m|-\257\336?\361\367\373\375~\277\337?S&\301\256\302\227\273?\000\000\000\000\000\000\324?\300\333\017\t\274\375\300?G\027]t\321E\307?\000\000\000\000\000\000\320?\016x\374\341\200\307\257?$i\006\367r\305\276?H\264\302\346@\242\245?\261.=\346\357\265\301?\265$n\343ky\325?\316\347\363\371|>\337?2\tv\025\276\334\260?\376\377\377\377\377\377\317?\305\271\216Q\234\353\310?\340\3062(\025&\336?\000\000\000\000\000\000\000\000\317\352K\005\255\276\324?\033\247\257\243\347\356\307?\347@\242\0256\007\322?\321\302\031\020J\356\324?\362\030\216\026$\240\346?\211D\"\221H$\342?\331>Q=h\344\315?\376\377\377\377\377\377\320?\300\333\017\t\274\375\320?\006\245\302\304\373\221\323?\037\205\353Q\270\036\325?\226{\032a\271\247\261?\340/\360\342[\177\272?\371\355RO\306o\327?\2766b]z\314\337?jnJ\252Cl\340?:\034\016\207\303\341\340?\271!\006\244c)\303?\000\000\000\000\000\000\264?\351:Fq\256c\304?*L\274\0379\315\327?{\024\256G\341z\224?\016x\374\341\200\307\257?\374:z\356~\201\267?H\264\302\346@\242\245?\241\344N\321\302\031\240?\n\2371\034-H\340?\211D\"\221H$\342?\322\310;\177\213\323\312?\000\000\000\000\000\000\304?\240\311\227\r\232|\331?\221\234\346k\365\354\300?q=\n\327\243p\335?\210\003\036\1778\340\341?y\212\244\031\334\313\305?\013\233\003\211V\330\234?\301x+\373\034R\223?i\306p\264 \001\345?\214\305b\261X,\326?\276\334\020\003\322\261\304?\001\000\000\000\000\000\330?\352\251\205\225\236Z\330?\363\265zv\010\334\330?\000\000\000\000\000\000\340?&\2736Q\262k\263?\250H\232\301\275\\\341?\371\355RO\306o\327?\256\354sHM0\336?\264\007s\036\227\276\335?\215\307\343\361x<\316?J\260\253\360\345\206\350?\000\000\000\000\000\000\304?[X\351\251\205\225\336?\264C\340\3062(\305?\341z\024\256G\341\342?D:o1\244\363\266?@t\220\002\226\307\273?\013\233\003\211V\330\234?\"5\301x+\373\254?5\013\022P\263\353\345?\315\345r\271\\.\327?\364\2678\255\331>\321?\376\377\377\377\377\377\305?\300\333\017\t\274\375\320?\330\352\331!pc\311?\327\243p=\n\327\323?\357\370\303\001\217?\254?\201L\373lg\242\274? \321\n\233\003\211\326?m\304\272\364\230\277\327?\331\035\311Ai\250\340?\211D\"\221H$\342?\303\227\033b@:\306?\000\000\000\000\000\000\304?x\373!\201\267\037\322?\253g\207\300\215e\320?{\024\256G\341z\324?\316[\014\351\274\305\300?\242\2700\"\320\017\275?\251\'\343\267K=\331?\321\302\031\020J\356\324?\243[,z\3038\341?/\227\313\345r\271\334?\310R&\301\256\302\307?\002\000\000\000\000\000\322?Vzja\245\247\346?\304\373\221\323|\255\316?H\341z\024\256G\341?\316[\014\351\274\305\300?\306\267\3764\034r\303?6\007\022\255\2609\320?\032\020J\356\024-\314?h\223\270\215\257\345\345?\353\365z\275^\257\327?rZ\263}\242z\320?\002\000\000\000\000\000\334?\235\353\030\305\271\216\341?\264C\340\3062(\305?)\\\217\302\365(\334?\323y\213!\235\267\250?y\212\244\031\334\313\265?Zas \321\n\313?\372{m\304\272\364\310?\334\342\235\374`\316\343?\016\006\203\301`0\330?\364\2678\255\331>\321?\000\000\000\000\000\000\316?\300\333\017\t\274\375\320?o,\203Ra\342\335?q=\n\327\243p\315?\322y\213!\235\267\270?Hh\324\t\277\'\305?\016$Zas \321?:\244&\030oe\337?\264\007s\036\227\276\335?\353\365z\275^\257\327?@:\2262\tv\305?\004\000\000\000\000\000\300?1\212s\035\2438\327?\304\373\221\323|\255\336?\270\036\205\353Q\270\316?\361\370\303\001\217?\274?\312\030\252\336a\335\326?\013\233\003\211V\330\254?\"5\301x+\373\254?\302\375\225\211B7\345?L\247\323\351t:\335?\276\334\020\003\322\261\304?\000\000\000\000\000\000\264?\235\353\030\305\271\216\341?]t\321E\027]\344?333333\323?\2008\340\361\207\003\276?\236W\205x\212\244\311?H\264\302\346@\242\265?\331\347\220\232`\274\325?\346\347?fpM\342?O&\223\311d2\311?\020\003\322\261\224I\340?\376\377\377\377\377\377\320?\345\313\006M\276l\320?\264C\340\3062(\325?{\024\256G\341z\304?\226{\032a\271\247\261?E\325;\254\3332\277?\227z2~\273\324\303?\3511\177\257\215X\307?z\201h\332\303\237\337?\007\004\002\201@ \340?\303\227\033b@:\306?\000\000\000\000\000\000\304?\353\030\305\271\216Q\334?\353\331!pc\031\344?\354Q\270\036\205\353\321?a\271\247\021\226{\272?cAqaD\240\277?\202D+l\016$\332?\\\331\347\220\232`\354?\254\307\245o\177e\342?O&\223\311d2\331?]\234\326l\237\250\276?\002\000\000\000\000\000\302?[X\351\251\205\225\336?j\276V\317\016\201\313?R\270\036\205\353Q\330?\323y\213!\235\267\250?\372\323p\310M\306\320?\371\355RO\306o\327?\251\t\306[\331\347\340?\210\335\373\222QO\345?(\225J\245R\251\324?J\260\253\360\345\206\310?\000\000\000\000\000\000\000\000\024x\373!\201\267\317?\330\352\331!pc\311?\217\302\365(\\\217\322?\2008\340\361\207\003\276?\302VS\213\326\006\300? \321\n\233\003\211\326?\n\306[\331\347\220\332?\332\266\361\265\274\372\335?\031\014\006\203\301`\340?\322\310;\177\213\323\312?\000\000\000\000\000\000\331?\346:Fq\256c\324?4(\025&\336\217\314?R\270\036\205\353Q\330?\264\372RA\253/\245?\326m\231\217\320\250\263?6\007\022\255\2609\300?\271S\264p\006\204\302?\032Kx\300\000\316\334?\212F\243\321h4\332?\336\371[\234\326l\317?\004\000\000\000\000\000\312?5\371\262A\223/\313?\241T\230x?r\332?\232\231\231\231\231\231\271?\225{\032a\271\247\241?|\353O\303!7\271?\371\355RO\306o\327?e\237Cj\202\361\326?\201\216}bj\335\333?\312f\263\331l6\333?@:\2262\tv\305?\370\377\377\377\377\377\273?0\0334\371\262A\323?\330\352\331!pc\251?\256G\341z\024\256\327?\000\000\000\000\000\000\000\000eAqaD\240\257?\224\361\333\245\236\214\337?\217\371{m\304\272\344?\000\000\000\000\000\000\000\000\215\307\343\361x<\276?2\tv\025\276\334\260?\377\377\377\377\377\377\344?y\373!\201\267\037\302?Y\006\245\302\304\373\321?\217\302\365(\\\217\322?\265\372RA\253/\265?\340/\360\342[\177\272?2~\273\324\223\361\333?\271S\264p\006\204\342?!\362\034\373\304\324\332?p\267\333\355v\273\335?\303\227\033b@:\306?\004\000\000\000\000\000\312?\303JO-\254\364\344?u\321E\027]t\321?\232\231\231\231\231\231\341?&\2736Q\262k\263?\275\303\272-\363\021\272?H\264\302\346@\242\325?-\234\001\241\344N\321?\362\030\216\026$\240\346?\211D\"\221H$\322?rZ\263}\242z\320?\002\000\000\000\000\000\322?Vzja\245\247\306?\274\0379\315\327\352\331?\000\000\000\000\000\000\000\000\323y\213!\235\267\250?=\023\345XP\\\270?H\264\302\346@\242\245?\002\241\344N\321\302\211?\320o\346\243lG\322?p\267\333\355v\273\335?F\260\253\360\345\206\230?\001\000\000\000\000\000\323?[X\351\251\205\225\316?O\363\265zv\010\334?\000\000\000\000\000\000\000\000\263\372RA\253/\225?\272b\017\204\255\246\266?\251\'\343\267K=\311?\362V\3669\244&\270?\274e\242\320MI\325?\031\014\006\203\301`\340??:\2262\tv\265?\000\000\000\000\000\000\316?5\371\262A\223/\313?\340\3062(\025&\336?{\024\256G\341z\264?\016x\374\341\200\307\257?es^\025\342)\302?\277]\352\311\370\355\322?g@(\271S\264\340?40\2003\037e\333?\215\307\343\361x<\336?\261\253\360\345\206\030\300?\370\377\377\377\377\377\273?\300\333\017\t\274\375\300?\231x?r\232\257\325?{\024\256G\341z\264?\226{\032a\271\247\261?@t\220\002\226\307\273?p\227z2~\273\324?:\244&\030oe\317?\241\032*\020M{\330?l\265Z\255V\253\345?\322\310;\177\213\323\312?\002\000\000\000\000\000\322?\304JO-\254\364\324?\274\0379\315\327\352\331?333333\323?\265\372RA\253/\265?$i\006\367r\305\276?\347@\242\0256\007\302?\261.=\346\357\265\321?V\375.Kx\300\340?(\024\n\205B\241\340?@:\2262\tv\305?\376\377\377\377\377\377\320?\304JO-\254\364\324?O\363\265zv\010\334?\232\231\231\231\231\231\271?\226{\032a\271\247\301?\343\302\210@?t\300?\013\233\003\211V\330\314?\022\353\322c\376^\313?\203\3360N\260\263\342?\356v\273\335n\267\333?3\tv\025\276\334\300?\000\000\000\000\000\000\304?\215\342\\\307(\316\345?4(\025&\336\217\314?)\\\217\302\365(\344?\322y\213!\235\267\270?\003/\276\365\247\341\300?\347@\242\0256\007\262?\301x+\373\034R\263?\376\342\004;+E\350?L\245R\251T*\325?I\260\253\360\345\206\270?\000\000\000\000\000\000\304?\325\302JO-\254\344?\241T\230x?r\312?\024\256G\341z\024\346?\322y\213!\235\267\270?`\340\305\267\3764\274?\227z2~\273\324\303?\"5\301x+\373\274?\347\321\202\004\324\354\332?\212F\243\321h4\312?J\260\253\360\345\206\310?\001\000\000\000\000\200\345?x\373!\201\267\037\322?\330\352\331!pc\331?\354Q\270\036\205\353\301?a\271\247\021\226{\272?cAqaD\240\277?\013\233\003\211V\330\234?\"5\301x+\373\254?\023\013\253\021\351t\341?H$\022\211D\"\341?\276\334\020\003\322\261\304?\002\000\000\000\000\000\327?Vzja\245\247\306?\315\327\352\331!p\343?{\024\256G\341z\224?a\271\247\021\226{\272?Y\036ods^\265?\251\'\343\267K=\311?\022\353\322c\376^\273?\007\332\\a5\"\335?\013\205B\241P(\344?\276\334\020\003\322\261\304?\000\000\000\000\000\000\331?\000\000\000\000\000\000\360?\330\352\331!pc\311?\315\314\314\314\314\314\344?\267\030\322y\213!\335?U\275\303\272-\363\301?\277]\352\311\370\355\322?\2063 \224\334)\332?9\272)\251\016\261\341?\010\006\203\301`0\310?{\320\310;\177\213\323?\000\000\000\000\000\000\360?\304JO-\254\364\324?\224\n\023\357GN\343?\354Q\270\036\205\353\301?\361\370\303\001\217?\274?$\233\363\252\020O\301?H\264\302\346@\242\305?\301x+\373\034R\323?\035\335\224T\207\330\340?\316\347\363\371|>\337?\261\253\360\345\206\030\300?\376\377\377\377\377\377\317?\256c\024\347:F\341?Y\006\245\302\304\373\321?\366(\\\217\302\365\330?&\2736Q\262k\263?8\2629\257\n\361\264?H\264\302\346@\242\265?\"5\301x+\373\254?\371%\243\236\312\335\342?\214\305b\261X,\326?\303\227\033b@:\306?\000\000\000\000\000\000\304?1\212s\035\2438\327?\206\211\367#\247\371\332?\354Q\270\036\205\353\321?\017x\374\341\200\307\277?U\275\303\272-\363\301?\013\233\003\211V\330\314?~\016\251\t\306[\331?C\214\023\354\254\024\341?\212F\243\321h4\332?E\365\240\221w\376\306?\376\377\377\377\377\377\320?\237ZX\351\251\205\325?G\027]t\321E\327?{\024\256G\341z\264?\265\372RA\253/\265?\347#4\352\204\337\303?Zas \321\n\313?2\177\257\215X\227\316?\347\321\202\004\324\354\332?\347t:\235N\247\323?X\341\313\r1 \275?\000\000\000\000\000\000\331?\345\313\006M\276l\320?\2510\361~\3444\337?\000\000\000\000\000\000\000\000\323y\213!\235\267\250?\024\345XP\\\030\301?\277]\352\311\370\355\322?\311\235\242\2053 \304?\215X\364\206q\202\335?\007\004\002\201@ \340?\271!\006\244c)\303?\000\000\000\000\000\000\316?{ja\245\247\026\346?\216eP*L\274\317?\\\217\302\365(\\\337?\352K\005\255\276T\320?\275\303\272-\363\021\272?6\007\022\255\2609\320?*Z8\003B\311\315?\206\030\'\330Y)\342?\013\207\303\341p8\314?@:\2262\tv\305?\000\000\000\000\000\000\304?5\371\262A\223/\313?~\255\236\035\0027\326?\000\000\000\000\000\000\000\000\265\372RA\253/\265?\201L\373lg\242\274?\016$Zas \341?E\013g@(\271\323?N\025\210\246=\374\331?\031\014\006\203\301`\340?{\320\310;\177\213\323?\001\000\000\000\000\000\335?~\331\240\311\227\r\312?\264C\340\3062(\325?\000\000\000\000\000\000\320?\2008\340\361\207\003\276?\302$f\3278}\275?6\007\022\255\2609\300?\372{m\304\272\364\310?\2400\347q\351\333\337?\211D\"\221H$\342?Nk\266OT\017\272?\000\000\000\000\000\000\331?\300\333\017\t\274\375\320?\375\221\323|\255\236\315?\217\302\365(\\\217\322?\226{\032a\271\247\261?`\340\305\267\3764\274?\251\'\343\267K=\331?\362V\3669\244&\330?0N\260\263R\204\340?z<\036\217\307\343\341?;\177\213\323\232\355\303?\000\000\000\000\000\000\304?\300\333\017\t\274\375\300?G\027]t\321E\327?\000\000\000\000\000\000\000\000D:o1\244\363\266?\201L\373lg\242\274?\347@\242\0256\007\262?\301x+\373\034R\223?U\"\235.\3449\326?Z\255V\253\325j\345?\261\253\360\345\206\030\300?\000\000\000\000\000\000\336?\024x\373!\201\267\317?\264C\340\3062(\325?\244p=\n\327\243\300?a\271\247\021\226{\272?`\340\305\267\3764\274?\343\267K=\031\277\335?]z\314\337k#\326?\241\032*\020M{\330?Z,\026\213\305b\341?;\177\213\323\232\355\303?\002\000\000\000\000\000\327?\345\313\006M\276l\340?\220\234\346k\365\354\320?\\\217\302\365(\\\347?\303\001\217?\034\360\330?\340/\360\342[\177\272?\242\0256\007\022\255\340?\032\020J\356\024-\334?\234N\027\362\034\373\344?i\265Z\255V\253\325?<\177\213\323\232\355\323?\000\000\000\000\000\200\341?\017\232|\331\240\311\327?\217eP*L\274\277?q=\n\327\243p\335?\265\372RA\253/\265?D\007)`y\274\301?\016$Zas \321?\271S\264p\006\204\302?\334\2404T \232\326?\212F\243\321h4\332?\266f\373D\365\240\301?\002\000\000\000\000\000\334?Vzja\245\247\326?=;\004n,\203\322?333333\323?^\233(\331\265\211\302?\037\010[M-Z\273?\202D+l\016$\332?Dj\202\361V\366\351?9\272)\251\016\261\341?\013\207\303\341p8\334?]\234\326l\237\250\276?\002\000\000\000\000\000\302?\212s\035\2438\327\341?\"pc\031\224\n\263?\\\217\302\365(\\\337?\316[\014\351\274\305\300?\323\014\356\345\212=\300?\347@\242\0256\007\302?\321\302\031\020J\356\304?V\375.Kx\300\340?\016\006\203\301`0\330?\322\310;\177\213\323\312?\376\377\377\377\377\377\337?0\0334\371\262A\303?\330\352\331!pc\331?\232\231\231\231\231\231\271?\323y\213!\235\267\250?$i\006\367r\305\256?\227z2~\273\324\303?\241\344N\321\302\031\300?:>\374\371\217\031\314?\031\215F\243\321h\344?S&\301\256\302\227\273?\377\377\377\377\377\377\341?\345\313\006M\276l\320?\006\245\302\304\373\221\323?\232\231\231\231\231\231\311?\2008\340\361\207\003\276?\024\345XP\\\030\341?\251\'\343\267K=\271?\002\241\344N\321\302\251?z\201h\332\303\237\337?\353\365z\275^\257\327?\002\351X\312$\330\325?\000\000\000\000\000\000\324?Z\351\251\205\225\236\332?\330\352\331!pc\311?\366(\\\217\302\365\330?\264\372RA\253/\245?\242\2700\"\320\017\275?\347@\242\0256\007\342?E\013g@(\271\323?\307E\326V\361N\336?\233L&\223\311d\342?\\\234\326l\237\250\316?\001\000\000\000\000\000\330?\352\251\205\225\236Z\330?\241T\230x?r\332?\n\327\243p=\n\307?\231\231\231\231\231\231\311?4Q\216\005\305\205\321?\215\337.\365d\374\346?\330F\254K\217\371\353?\002\222\034\224\206\n\344?L\245R\251T*\325?\200\213\323\232\355\023\325?\370\377\377\377\377\377\273?\346:Fq\256c\324?\330\352\331!pc\271?\303\365(\\\217\302\325?]\233(\331\265\211\322?Y\036ods^\265?\251\'\343\267K=\271?\002\241\344N\321\302\271?\243[,z\3038\341?\016\006\203\301`0\330?\005\244c)\223`\327?\001\000\000\000\000\000\330?\2448\3271\212s\315?\301\215eP*L\334?\270\036\205\353Q\270\236?\016x\374\341\200\307\257?`\340\305\267\3764\274?H\264\302\346@\242\265?\301x+\373\034R\243?\324`g\245\010A\333?\215\307\343\361x<\336?7\304\200t,e\242?\000\000\000\000\000\000\304?\177H\340\355\207\004\336?\016\201\033\313\240T\310?=\n\327\243p=\332?\322y\213!\235\267\270?\003\375\320A\nX\276?\347@\242\0256\007\302?]z\314\337k#\326?\037\325!6\360\031\343?\353\365z\275^\257\327?Nk\266OT\017\272?\000\000\000\000\000\000\304?\2448\3271\212s\315?9\315\327\352\331!\340?{\024\256G\341z\224?\361\370\303\001\217?\274?\037\010[M-Z\273?Zas \321\n\313?\"5\301x+\373\314?V\375.Kx\300\340?i4\032\215F\243\341?X\341\313\r1 \275?\004\000\000\000\000\000\300?U\013+=\265\260\322?4(\025&\336\217\334?\000\000\000\000\000\000\000\000\225{\032a\271\247\241?U\275\303\272-\363\301?\347@\242\0256\007\262?\341\014\010%w\212\246?n\203\322P\201h\332?Z,\026\213\305b\341?\271!\006\244c)\303?\000\000\000\000\000\000\304?5\371\262A\223/\313?\320\016\201\033\313\240\324?\n\327\243p=\n\267?\265\372RA\253/\265?Y\036ods^\265?H\264\302\346@\242\245?\301x+\373\034R\223?\341\220N\027\362\034\333?\261\327\353\365z\275\336?\261\253\360\345\206\030\300?\000\000\000\000\000\000\324?\2448\3271\212s\315?G\027]t\321E\307?\270\036\205\353Q\270\316?&\2736Q\262k\263?|\353O\303!7\271?\202D+l\016$\332?\271S\264p\006\204\322?[\022\267\361\265\274\332?i4\032\215F\243\341?\271!\006\244c)\303?\376\377\377\377\377\377\317?|\331\240\311\227\r\332?G\027]t\321E\327?\n\327\243p=\n\307?\323y\213!\235\267\250?`\340\305\267\3764\274?6\007\022\255\2609\300?\362V\3669\244&\270?[\022\267\361\265\274\332?(\225J\245R\251\324?I\260\253\360\345\206\270?\002\000\000\000\000\000\314?\2478\3271\212s\275?\220\234\346k\365\354\320?\000\000\000\000\000\000\000\000\323y\213!\235\267\250?\236W\205x\212\244\251?\013\233\003\211V\330\234?\241\344N\321\302\031\240?\217\250\247r\267X\324?\251T*\225J\245\342?<\177\213\323\232\355\323?\376\377\377\377\377\377\337?\235\353\030\305\271\216\321?\030]t\321E\027\335?q=\n\327\243p\315?\265\372RA\253/\265?\323\014\356\345\212=\300?\013\233\003\211V\330\314?5\301x+\373\034\342?\032Kx\300\000\316\334?L\247\323\351t:\335?D\365\240\221w\376\266?\000\000\000\000\000\000\304?\024x\373!\201\267\317?\304\373\221\323|\255\336?\000\000\000\000\000\000\000\000\226{\032a\271\247\261?\037\010[M-Z\273?\347@\242\0256\007\302?\341\014\010%w\212\306?\206\030\'\330Y)\342?\331l6\233\315f\343?\266f\373D\365\240\301?\002\000\000\000\000\000\302?[X\351\251\205\225\316?r\232\257\325\263C\340?\000\000\000\000\000\000\000\000D:o1\244\363\266?\242\2700\"\320\017\275?\273\324\223\361\333\245\316?\261.=\346\357\265\301?\314\021\351t!\317\341?:\034\016\207\303\341\340?\276\334\020\003\322\261\304?\002\000\000\000\000\000\302?|\373!\201\267\037\262?\216eP*L\274\317?H\341z\024\256G\321?&\2736Q\262k\263?\024\345XP\\\030\301?\227z2~\273\324\323?E\013g@(\271\323?\242\263R\204\240\315\325?\215F\243\321h4\352?\310R&\301\256\302\307?\001\000\000\000\000\000\343?\237ZX\351\251\205\305?G\027]t\321E\307?H\341z\024\256G\321?\316[\014\351\274\305\300?\374:z\356~\201\267?\251\'\343\267K=\271?2\177\257\215X\227\316?\2751\203k\022\267\321?\353\365z\275^\257\327?\266f\373D\365\240\301?\000\000\000\000\000\200\341?y\373!\201\267\037\302?4(\025&\336\217\314?\205\353Q\270\036\205\333?&\2736Q\262k\263?|\353O\303!7\271?\371\355RO\306o\307?\"5\301x+\373\274?\017kD:]\310\323?z<\036\217\307\343\341?\277\334\020\003\322\261\324?\376\377\377\377\377\377\332?\353\030\305\271\216Q\334?\330\352\331!pc\331?\000\000\000\000\000\000\340?\322y\213!\235\267\270?\201L\373lg\242\274?\321\n\233\003\211V\330?\2063 \224\334)\332?\362\030\216\026$\240\346?\312d2\231L&\343?6\304\200t,e\302?\374\377\377\377\377\377\307?0\0334\371\262A\343?\330\352\331!pc\311?\024\256G\341z\024\346?\265\372RA\253/\265?\363x#\233\363\252\300?\347@\242\0256\007\262?\362V\3669\244&\270?e&\n\335\224T\347?i\265Z\255V\253\325?\303\227\033b@:\306?\370\377\377\377\377\377\273?\345\313\006M\276l\320?\217eP*L\274\277?\303\365(\\\217\302\325?\322y\213!\235\267\270?\323\014\356\345\212=\260?H\264\302\346@\242\245?\002\241\344N\321\302\211?;=\225\273\305\242\327?(\024\n\205B\241\340?\310R&\301\256\302\307?\000\000\000\000\000\000\331?\240\311\227\r\232|\331?\375\221\323|\255\236\315?\000\000\000\000\000\000\340?\016x\374\341\200\307\257?|\353O\303!7\271?H\264\302\346@\242\265?\241\344N\321\302\031\260?\357D\010\332\\a\325?\353\365z\275^\257\327?R&\301\256\302\227\313?\000\000\000\000\000\000\344?\024x\373!\201\267\317?\330\352\331!pc\331?\244p=\n\327\243\320?\265\372RA\253/\265?\003\375\320A\nX\276?\013\233\003\211V\330\314?\353\322c\376^\033\341? \214\254\255\342\235\334?\356v\273\335n\267\333?\266f\373D\365\240\301?\004\000\000\000\000\000\312?[X\351\251\205\225\316?\016\201\033\313\240T\310?\270\036\205\353Q\270\316?&\2736Q\262k\263?\374:z\356~\201\267?\321\n\233\003\211V\330?\251\t\306[\331\347\320?[\022\267\361\265\274\332?Z,\026\213\305b\341?\261\253\360\345\206\030\300?\000\000\000\000\000\000\316?\017\232|\331\240\311\307?\016\201\033\313\240T\330?{\024\256G\341z\264?\016x\374\341\200\307\257?es^\025\342)\302?\251\'\343\267K=\311?m\304\272\364\230\277\327?40\2003\037e\333?\312f\263\331l6\333?\261\253\360\345\206\030\300?\370\377\377\377\377\377\273?\2448\3271\212s\335?a\342\375\310i\276\346?{\024\256G\341z\324?\322y\213!\235\267\270?`\340\305\267\3764\274?\273\324\223\361\333\245\336?\246\307\374\2756b\355?\323v$\007\245\241\342?l6\233\315f\263\331?D\365\240\221w\376\266?\002\000\000\000\000\000\302?\013+=\265\260\322\323?j\276V\317\016\201\313?\270\036\205\353Q\270\336?\016x\374\341\200\307\257?3\037\241Q\'\374\316?\013\233\003\211V\330\254?\261.=\346\357\265\261?9\272)\251\016\261\341?\013\207\303\341p8\334?S&\301\256\302\227\333?\002\000\000\000\000\000\302?~\331\240\311\227\r\312?\253g\207\300\215e\340?\270\036\205\353Q\270\236?\322y\213!\235\267\270?V\275\303\272-\363\261?H\264\302\346@\242\265?\241\344N\321\302\031\260?u]/\262\266\212\327?z<\036\217\307\343\341?E\365\240\221w\376\306?\000\000\000\000\000\000\336?\350:Fq\256c\344?~\255\236\035\0027\306?\\\217\302\365(\\\337?|\032a\271\247\021\306?$\233\363\252\020O\301?e\374v\251\'\343\347?*Z8\003B\311\335?\262\204\007\014\340\314\347?\013\207\303\341p8\334?rZ\263}\242z\320?\376\377\377\377\377\377\325?f\203&_6h\342?\216eP*L\274\317?\024\256G\341z\024\336?GX\356i\204\345\276?E\325;\254\3332\277?\013\233\003\211V\330\274?\341\014\010%w\212\306?&|\306p\264 \341?O&\223\311d2\331?3\tv\025\276\334\320?\377\377\377\377\377\377\341?[X\351\251\205\225\336?\353\331!pc\031\304?\024\256G\341z\024\336?\2008\340\361\207\003\276?E\325;\254\3332\277?\371\355RO\306o\307?\331\347\220\232`\274\305?_\301\316J\021\202\346?\316\347\363\371|>\337?w\025\276\334\020\003\322?\000\000\000\000\000\000\324?5\371\262A\223/\313?\340\3062(\025&\336?\354Q\270\036\205\353\261?\361\370\303\001\217?\274?\003/\276\365\247\341\300?\251\'\343\267K=\311?\362V\3669\244&\270?aS\353\336\227\214\332?\007\004\002\201@ \340?\276\334\020\003\322\261\304?\002\000\000\000\000\000\334?[X\351\251\205\225\316?\375\221\323|\255\236\315?333333\323?\357\370\303\001\217?\254?\242\2700\"\320\017\275?\013\233\003\211V\330\334?\246\307\374\2756b\335?\343\357\262\204\007\014\340?:\034\016\207\303\341\340?J\260\253\360\345\206\310?\000\000\000\000\000\000\304?\305\271\216Q\234\353\310?\030]t\321E\027\335?333333\303?\016x\374\341\200\307\257?\272b\017\204\255\246\306?H\264\302\346@\242\305?\341\014\010%w\212\266?\"X\215H\247\013\331?H$\022\211D\"\341?Ok\266OT\017\312?\002\000\000\000\000\000\334?\235\353\030\305\271\216\321?4(\025&\336\217\314?\270\036\205\353Q\270\276?\357\370\303\001\217?\254?es^\025\342)\302?6\007\022\255\2609\320?\251\t\306[\331\347\300?\364\316\261OL\255\333?L\245R\251T*\325?I\260\253\360\345\206\270?\002\000\000\000\000\000\302?\345\313\006M\276l\340?b\342\375\310i\276\326?q=\n\327\243p\315?\017x\374\341\200\307\277?\003/\276\365\247\341\300?\273\324\223\361\333\245\316?\251\t\306[\331\347\320?5\013\022P\263\353\345?\016\006\203\301`0\330?\310R&\301\256\302\307?\002\000\000\000\000\000\322?[X\351\251\205\225\316?\363\265zv\010\334\330?\244p=\n\327\243\320?\014\351\274\305\220\316\333?]\177\032\016\271\311\270?\273\324\223\361\333\245\336?\247h\341\014\010%\347?\371%\243\236\312\335\342?\361\367\373\375~\277\337?I\260\253\360\345\206\270?\002\000\000\000\000\000\302?\353\030\305\271\216Q\314?\274\0379\315\327\352\331?{\024\256G\341z\224?\361\370\303\001\217?\274?\302$f\3278}\275?\013\233\003\211V\330\314?\343\255\354sHM\340?6\263\353E\326V\341?\251T*\225J\245\342?\276\334\020\003\322\261\304?\374\377\377\377\377\377\307?Vzja\245\247\306?\004n,\203Ra\342?{\024\256G\341z\224?\017x\374\341\200\307\277?\237W\205x\212\244\271?\013\233\003\211V\330\314?\341\014\010%w\212\306?\001\267\212w\362\203\331?L\245R\251T*\345?A:\2262\tv\325?\001\000\000\000\000\000\343?5\371\262A\223/\313?O\363\265zv\010\334?{\024\256G\341z\224?\265\372RA\253/\265?\333\316D9\026\024\267?\251\'\343\267K=\271?2\177\257\215X\227\276?V\375.Kx\300\340?\233L&\223\311d\342?Ok\266OT\017\312?\000\000\000\000\000\000\304?\017\232|\331\240\311\327?\363\265zv\010\334\330?\n\327\243p=\n\307?\226{\032a\271\247\301?\343\302\210@?t\300?\227z2~\273\324\303?\022\353\322c\376^\333?\tly\365\273,\341?\013\205B\241P(\324?\261\253\360\345\206\030\300?\002\000\000\000\000\000\302?y\373!\201\267\037\302?Y\006\245\302\304\373\321?\303\365(\\\217\302\305?\323y\213!\235\267\250?\275\303\272-\363\021\272?H\264\302\346@\242\265?\241\344N\321\302\031\240?\034\233+\254F\244\323?{\275^\257\327\353\345?\261\253\360\345\206\030\300?\001\000\000\000\000\000\335?\021x\373!\201\267\337?~\255\236\035\0027\326?\256G\341z\024\256\327?\000\000\000\000\000\000\360?h\324\t\277\'\225\325?\321\n\233\003\211V\350?\363\367\332\210u\351\341?\000\000\000\000\000\000\360?\214\305b\261X,\326?3\tv\025\276\334\320?\000\000\000\000\000\000\264?\013+=\265\260\322\323?4(\025&\336\217\334?ffffff\346?D:o1\244\363\266?u)\371o\226`\302?H\264\302\346@\242\325?\270\262\317!5\301\350?V\375.Kx\300\340?H$\022\211D\"\321?]\234\326l\237\250\276?\000\000\000\000\000\000\264?\353\030\305\271\216Q\314?\231x?r\232\257\325?\354Q\270\036\205\353\261?\357\370\303\001\217?\254?|\353O\303!7\271?\251\'\343\267K=\311?\"5\301x+\373\274?;=\225\273\305\242\327?\356v\273\335n\267\333?\315\r1 \035K\311?\002\000\000\000\000\000\327?\235\353\030\305\271\216\321?\330\352\331!pc\331?\000\000\000\000\000\000\000\000\2008\340\361\207\003\276?t)\371o\226`\262?H\264\302\346@\242\265?\341\014\010%w\212\246?\032\030\300\231\217\262\335?\007\004\002\201@ \340?\266f\373D\365\240\301?\002\000\000\000\000\000\327?[X\351\251\205\225\316?\220\234\346k\365\354\320?\232\231\231\231\231\231\311?\323y\213!\235\267\250?eAqaD\240\257?p\227z2~\273\324?\3511\177\257\215X\327?\335W\277\313\022\036\320?\007\004\002\201@ \340?6\304\200t,e\302?\376\377\377\377\377\377\337?\345\313\006M\276l\340?~\255\236\035\0027\306?)\\\217\302\365(\344?\316[\014\351\274\305\300?$i\006\367r\305\276?\013\233\003\211V\330\254?\002\241\344N\321\302\271?\030\310\014\256I\334\346?\212F\243\321h4\332?\336\371[\234\326l\317?\376\377\377\377\377\377\332?U\013+=\265\260\322?\330\352\331!pc\271?\232\231\231\231\231\231\331?\323y\213!\235\267\250?\225\225.%\377\315\262?\347@\242\0256\007\302?2\177\257\215X\227\276?-#k\253x\'\337?L\247\323\351t:\335?\277\334\020\003\322\261\324?\340\377\377\377\377\377\237?\035\2438\3271\212\343?\363\265zv\010\334\330?\341z\024\256G\341\342?\2008\340\361\207\003\276?\302VS\213\326\006\300?H\264\302\346@\242\305?-\234\001\241\344N\321?O\360\031\303\321\202\344?\214\305b\261X,\326?J\260\253\360\345\206\310?\000\000\000\000\000\000\331?\240\311\227\r\232|\331?\353\331!pc\031\324?333333\323?\226{\032a\271\247\261?\272b\017\204\255\246\266?\251\'\343\267K=\271?\261.=\346\357\265\261?\334H\016JC\005\342?L\247\323\351t:\335?W\341\313\r1 \315?\000\000\000\000\000\000\324?~\331\240\311\227\r\312?\353\331!pc\031\324?{\024\256G\341z\244?\264\372RA\253/\245?E\325;\254\3332\277?6\007\022\255\2609\320?-\234\001\241\344N\321?\347\321\202\004\324\354\332?\261\327\353\365z\275\336?\364\2678\255\331>\321?\000\000\000\000\000\000\304?\351:Fq\256c\304?*L\274\0379\315\327?\354Q\270\036\205\353\301?a\271\247\021\226{\312?]\177\032\016\271\311\270?\371\355RO\306o\327?\216X\227\036\363\367\332?\0003\270&q\033\337?L\247\323\351t:\335?D\365\240\221w\376\266?\370\377\377\377\377\377\273?\017\232|\331\240\311\327?\274\0379\315\327\352\331?\354Q\270\036\205\353\301?a\271\247\021\226{\272?\374:z\356~\201\267?6\007\022\255\2609\300?\"5\301x+\373\314?\343\357\262\204\007\014\340?\252\325j\265Z\255\326?;\177\213\323\232\355\303?\000\000\000\000\000\000\304?\345\313\006M\276l\320?\375\221\323|\255\236\315?\n\327\243p=\n\307?\323y\213!\235\267\250?\201L\373lg\242\274?p\227z2~\273\324?\321\302\031\020J\356\324?\223fpM\3426\336?\215\307\343\361x<\336?\271!\006\244c)\303?\002\000\000\000\000\000\302?\024x\373!\201\267\277?\016\201\033\313\240T\330?\232\231\231\231\231\231\311?a\271\247\021\226{\272?\377\233%\230\304\354\272?\251\'\343\267K=\311?\261.=\346\357\265\321?\250\364\206q\202\235\325?L\245R\251T*\345?Ok\266OT\017\312?\000\000\000\000\000\000\344?5\371\262A\223/\313?\330\352\331!pc\331?333333\323?\016x\374\341\200\307\317?\034\247\257\243\347\356\267?\016$Zas \321?\321\302\031\020J\356\344?\210\335\373\222QO\345?\013\207\303\341p8\334?\260\253\360\345\206\030\340?\376\377\377\377\377\377\320?\024x\373!\201\267\317?j\276V\317\016\201\333?\303\365(\\\217\302\305?\t\313=\215\260\334\323?\363x#\233\363\252\320?\215\337.\365d\374\346?\271S\264p\006\204\342?&|\306p\264 \341?\312f\263\331l6\333?Nk\266OT\017\272?\000\000\000\000\000\000\304?\177H\340\355\207\004\336?\206\211\367#\247\371\332?\270\036\205\353Q\270\316?a\271\247\021\226{\272?@t\220\002\226\307\273?\347@\242\0256\007\262?\331\347\220\232`\274\305?\243[,z\3038\341?e4\032\215F\243\321?6\304\200t,e\302?\002\000\000\000\000\000\302?\351:Fq\256c\304?@r\232\257\325\263\343?\270\036\205\353Q\270\236?\355\332D\311\256M\304?|\353O\303!7\271?\371\355RO\306o\327?\321\302\031\020J\356\324?\357\336\227\214z*\327?{\275^\257\327\353\345?I\260\253\360\345\206\270?\377\377\377\377\377\377\344?\305\271\216Q\234\353\310?\304\373\221\323|\255\316?\327\243p=\n\327\323?\244\363\026C:o\341?$i\006\367r\305\276? \321\n\233\003\211\326?:\244&\030oe\317?\346\264\207?\3771\343?\007\004\002\201@ \340?\310R&\301\256\302\307?\376\377\377\377\377\377\317?\2448\3271\212s\315?\241T\230x?r\332?\270\036\205\353Q\270\256?\361\370\303\001\217?\274?`\340\305\267\3764\274?\013\233\003\211V\330\314?:\244&\030oe\337?L+E\010\332\\\341?\331l6\233\315f\343?]\234\326l\237\250\276?\374\377\377\377\377\377\307?\306(\316u\214\342\334?\231x?r\232\257\325?333333\343?&\2736Q\262k\263?\332\316D9\026\024\247?\013\233\003\211V\330\254?\321\302\031\020J\356\264?\016\201\001\234\371(\333?\013\207\303\341p8\334?\375-Nk\266O\324?\000\000\000\000\000\200\343?5\371\262A\223/\313?\330\352\331!pc\331?333333\323?\016x\374\341\200\307\317?\034\247\257\243\347\356\267?\016$Zas \321?\321\302\031\020J\356\344?\210\335\373\222QO\345?\013\207\303\341p8\334?\260\253\360\345\206\030\340?\376\377\377\377\377\377\320?\2448\3271\212s\315?j\276V\317\016\201\313?333333\323?\016x\374\341\200\307\257?\275\303\272-\363\021\272?Zas \321\n\333?\002\241\344N\321\302\331?\2400\347q\351\333\337?H$\022\211D\"\341?;\177\213\323\232\355\303?\000\000\000\000\000\000\304?\345\313\006M\276l\340?~\255\236\035\0027\306?)\\\217\302\365(\344?\316[\014\351\274\305\300?$i\006\367r\305\276?\013\233\003\211V\330\254?\002\241\344N\321\302\271?\030\310\014\256I\334\346?\212F\243\321h4\332?\336\371[\234\326l\317?\376\377\377\377\377\377\332?\024x\373!\201\267\277?\320\016\201\033\313\240\324?\000\000\000\000\000\000\000\000\265\372RA\253/\265?\232\366\331\316D9\266?{2~\273\324\223\341?\301x+\373\034R\323?\357\336\227\214z*\327?\013\205B\241P(\344?F\365\240\221w\376\326?\376\377\377\377\377\377\325?[X\351\251\205\225\336?\"pc\031\224\n\323?\270\036\205\353Q\270\316?\017x\374\341\200\307\277?\266\001d\332g;\303?H\264\302\346@\242\305?\321\302\031\020J\356\304?e&\n\335\224T\347?\312f\263\331l6\333?\266f\373D\365\240\301?\000\000\000\000\000\000\316?\013+=\265\260\322\323?j\276V\317\016\201\313?\354Q\270\036\205\353\321?\265\372RA\253/\265?\333\316D9\026\024\267?H\264\302\346@\242\305?\301x+\373\034R\303?z\201h\332\303\237\337?+\026\213\305b\261\330?\\\234\326l\237\250\316?\374\377\377\377\377\377\307?\013+=\265\260\322\343?\231x?r\232\257\325?\037\205\353Q\270\036\345?\356i\204\345\236F\310?\352\204\337\223\312J\307?\347@\242\0256\007\262?\002\241\344N\321\302\251?\206\030\'\330Y)\342?\307\347\363\371|>\317?\336\371[\234\326l\317?\000\000\000\000\000\000\336?\235\353\030\305\271\216\321?\340\3062(\025&\336?\232\231\231\231\231\231\251?\017x\374\341\200\307\277?\377\233%\230\304\354\272?\251\'\343\267K=\311?\251\t\306[\331\347\300?\243[,z\3038\341?\212F\243\321h4\332?@:\2262\tv\305?\374\377\377\377\377\377\267?x\373!\201\267\037\322?y?r\232\257\325\343?\244p=\n\327\243\320?\231\231\231\231\231\231\311?\007\220i\237\355L\304?Zas \321\n\333?v\3511\177\257\215\330?gC\005\242i\017\337?\212F\243\321h4\332?<\177\213\323\232\355\263?\370\377\377\377\377\377\273?5\371\262A\223/\313?\330\352\331!pc\331?\270\036\205\353Q\270\276?D:o1\244\363\266?\003\375\320A\nX\276?H\264\302\346@\242\305?\261.=\346\357\265\301?\340\304m|-\257\336?\352t:\235N\247\343?\303\227\033b@:\306?\376\377\377\377\377\377\320?~\331\240\311\227\r\312?\016\201\033\313\240T\330?\232\231\231\231\231\231\311?\1778\340\361\207\003\256?\326m\231\217\320\250\263?\251\'\343\267K=\271?\002\241\344N\321\302\271?T8Z\220\200\232\315?\007\004\002\201@ \340?I\260\253\360\345\206\270?\376\377\377\377\377\377\337?5\371\262A\223/\333?\353\331!pc\031\324?\303\365(\\\217\302\325?\013Z}\251\240\325\307?\341\220\233\214\241\352\275?\013\233\003\211V\330\254?\002\241\344N\321\302\251?)A\233+\254F\344?\356v\273\335n\267\333?X\341\313\r1 \275?\376\377\377\377\377\377\325?5\371\262A\223/\313?G\027]t\321E\327?\303\365(\\\217\302\305?\357\370\303\001\217?\254?\272b\017\204\255\246\266?\251\'\343\267K=\311?\"5\301x+\373\274?\310\374`\316\343\322\327?i4\032\215F\243\341?\322\310;\177\213\323\312?\002\000\000\000\000\200\324?Vzja\245\247\306?\264C\340\3062(\325?{\024\256G\341z\244?D:o1\244\363\266?=\023\345XP\\\270?\251\'\343\267K=\271?\"5\301x+\373\254?N\025\210\246=\374\331?(\024\n\205B\241\340?E\365\240\221w\376\306?\002\000\000\000\000\000\302?\237ZX\351\251\205\325?\241T\230x?r\332?\270\036\205\353Q\270\276?\016x\374\341\200\307\257?\237W\205x\212\244\271?\242\0256\007\022\255\340?\241\344N\321\302\031\320?{\236c\237\230Z\327?\007\004\002\201@ \340?A:\2262\tv\325?\001\000\000\000\000\200\340?U\013+=\265\260\322?\353\331!pc\031\324?\037\205\353Q\270\036\325?&\2736Q\262k\263?$i\006\367r\305\276?\251\'\343\267K=\311?T\264p\006\204\222\353?z\201h\332\303\237\337?\315\345r\271\\.\327?3\tv\025\276\334\300?\000\000\000\000\000\000\304?[X\351\251\205\225\316?\351\242\213.\272\350\342?\270\036\205\353Q\270\236?\265\372RA\253/\265?\024\345XP\\\030\301?6\007\022\255\2609\300?\321\302\031\020J\356\264?\340\304m|-\257\336?\031\014\006\203\301`\340??:\2262\tv\265?\376\377\377\377\377\377\305?\350:Fq\256c\344?j\276V\317\016\201\313?\232\231\231\231\231\231\341?\265\372RA\253/\265?|\353O\303!7\271?\013\233\003\211V\330\254?\321\302\031\020J\356\264?\002\222\034\224\206\n\344?\246T*\225J\245\322?\303\227\033b@:\306?\002\000\000\000\000\000\327?\024x\373!\201\267\317?\274\0379\315\327\352\331?{\024\256G\341z\204?&\2736Q\262k\263?\340/\360\342[\177\272?H\264\302\346@\242\305?\002\241\344N\321\302\311?0\033\370\214\341h\341?\251T*\225J\245\342?J\260\253\360\345\206\310?\004\000\000\000\000\000\312?:\371\262A\223/\253?\335X\006\245\302\304\333?\000\000\000\000\000\000\000\000|\032a\271\247\021\266?\242\2700\"\320\017\275?\251\'\343\267K=\311?\261.=\346\357\265\301?\034hs\205\325\210\324?\215F\243\321h4\352?@:\2262\tv\305?\000\000\000\000\000\000\344?\024x\373!\201\267\317?\241T\230x?r\332?\232\231\231\231\231\231\251?\226{\032a\271\247\261?\034\247\257\243\347\356\267?p\227z2~\273\324?\"5\301x+\373\314?\316\354z\221\265U\334?H$\022\211D\"\341?6\304\200t,e\302?\000\000\000\000\000\000\336?5\371\262A\223/\313?\330\352\331!pc\311?\341z\024\256G\341\312?a\271\247\021\226{\272?cAqaD\240\277?p\227z2~\273\324?~\016\251\t\306[\331?\301U\274\223\037\314\331?(\024\n\205B\241\340?]\234\326l\237\250\276?\376\377\377\377\377\377\317?Vzja\245\247\326?j\276V\317\016\201\313?\n\327\243p=\n\327?^\233(\331\265\211\302?\302$f\3278}\275?\202D+l\016$\332?#\326\245\307\374\275\346?\n\2371\034-H\340?\315\345r\271\\.\327?\266f\373D\365\240\301?\002\000\000\000\000\000\302?x\373!\201\267\037\322?=;\004n,\203\342?\217\302\365(\\\217\322?\1778\340\361\207\003\316?\003\375\320A\nX\276?\347@\242\0256\007\322?\3511\177\257\215X\327?z\347\330\'\246\326\335?L\245R\251T*\325?]\234\326l\237\250\276?\002\000\000\000\000\000\302?6h\362e\203&\337?\221\234\346k\365\354\300?q=\n\327\243p\335?\016x\374\341\200\307\257?\323\014\356\345\212=\260?\013\233\003\211V\330\254?\341\014\010%w\212\246?\243[,z\3038\341?\215\307\343\361x<\316?\265f\373D\365\240\321?\376\377\377\377\377\377\320?\370C\002o?$\340?\363\265zv\010\334\330?\341z\024\256G\341\332?\316[\014\351\274\305\300?\363x#\233\363\252\300?\273\324\223\361\333\245\336?\216X\227\036\363\367\332?\234N\027\362\034\373\344?\312f\263\331l6\333?\324\203F\336\371[\314?\000\000\000\000\000\000\304?\304JO-\254\364\324?\221\234\346k\365\354\300?\270\036\205\353Q\270\336?\265\372RA\253/\265?$\233\363\252\020O\301?\347@\242\0256\007\262?\301x+\373\034R\243?\343\255I\334\306\327\322?\212F\243\321h4\332?\303\227\033b@:\306?\000\000\000\000\000\200\343?Vzja\245\247\306?\264C\340\3062(\325?{\024\256G\341z\264?a\271\247\021\226{\272?]\177\032\016\271\311\270?H\264\302\346@\242\305?\241\344N\321\302\031\300?c\326V\361N~\320?(\024\n\205B\241\340?\331>Q=h\344\315?\000\000\000\000\000\000\344?x\373!\201\267\037\322?\304\373\221\323|\255\336?\270\036\205\353Q\270\256?\226{\032a\271\247\261?\201L\373lg\242\274?\016$Zas \321?\3511\177\257\215X\307?4\312\017\346<.\335?(\024\n\205B\241\340?R&\301\256\302\227\313?\001\000\000\000\000\000\330?y\373!\201\267\037\302?G\027]t\321E\327?\n\327\243p=\n\267?\357\370\303\001\217?\254?3Q\216\005\305\205\261?p\227z2~\273\324?\321\302\031\020J\356\304?#\017\030\300\231\217\322?\013\205B\241P(\344?\276\334\020\003\322\261\304?\002\000\000\000\000\000\334?\351:Fq\256c\304?\340\3062(\025&\336?\000\000\000\000\000\000\000\000`\271\247\021\226{\252?t)\371o\226`\262?H\264\302\346@\242\265?\301x+\373\034R\243?\341\330\\a5\"\275?\233L&\223\311d\342?]\234\326l\237\250\276?\000\000\000\000\000\000\346?\024x\373!\201\267\317?\016\201\033\313\240T\330?\000\000\000\000\000\000\000\000&\2736Q\262k\263?\232\366\331\316D9\266?H\264\302\346@\242\265?\241\344N\321\302\031\240?\201\364\355\257L\024\332?z<\036\217\307\343\341?\271!\006\244c)\303?\002\000\000\000\000\000\334?1\212s\035\2438\327?\"pc\031\224\n\343?\000\000\000\000\000\000\000\000\225{\032a\271\247\241?\272b\017\204\255\246\266?p\227z2~\273\324?\331\347\220\232`\274\305?\"X\215H\247\013\331?\255V\253\325j\265\332?3\tv\025\276\334\300?\374\377\377\377\377\377\307?Vzja\245\247\326?\241T\230x?r\312?\315\314\314\314\314\314\344?\356i\204\345\236F\330?\242\2700\"\320\017\275?\013\233\003\211V\330\234?\002\241\344N\321\302\211?om\025\357\344\007\343?\255V\253\325j\265\332?\271!\006\244c)\303?\000\000\000\000\000\000\331?\353\030\305\271\216Q\334?\330\352\331!pc\331?\000\000\000\000\000\000\340?\322y\213!\235\267\270?\201L\373lg\242\274?\321\n\233\003\211V\330?\2063 \224\334)\332?\362\030\216\026$\240\346?\312d2\231L&\343?6\304\200t,e\302?\374\377\377\377\377\377\307?\021x\373!\201\267\337?G\027]t\321E\307?\270\036\205\353Q\270\336?\265\372RA\253/\265?\024\345XP\\\030\261?\013\233\003\211V\330\254?\301x+\373\034R\223?\365\205<\307>1\325?\315\345r\271\\.\327?R&\301\256\302\227\313?\377\377\377\377\377\377\341?\351\251\205\225\236Z\350?Y\006\245\302\304\373\321?\244p=\n\327\243\340?D:o1\244\363\266?|\353O\303!7\271?\227z2~\273\324\303?\3511\177\257\215X\307?KA\002jv\275\350?\211D\"\221H$\322?\266f\373D\365\240\301?\000\000\000\000\000\000\264?\352\251\205\225\236Z\330?\375\221\323|\255\236\315?R\270\036\205\353Q\340?\2008\340\361\207\003\276?\024\345XP\\\030\261?H\264\302\346@\242\305?\251\t\306[\331\347\300?\357\336\227\214z*\327?L\247\323\351t:\335?\002\351X\312$\330\325?\000\000\000\000\000\200\350?\177H\340\355\207\004\336?\217eP*L\274\277?\\\217\302\365(\\\337?y\213!\235\267\030\322?\341\220\233\214\241\352\275?\013\233\003\211V\330\274?\261.=\346\357\265\261?O\341hA\002j\326?\252\325j\265Z\255\326?X\341\313\r1 \275?\000\000\000\000\000\000\344?\235\353\030\305\271\216\321?\033\313\240T\230x\337?{\024\256G\341z\204?\265\372RA\253/\265?\232\366\331\316D9\266?Zas \321\n\333?*Z8\003B\311\315?\020\004m\256\260\032\321?:\034\016\207\303\341\340?6\304\200t,e\302?\001\000\000\000\000\200\340?Vzja\245\247\306?\206\211\367#\247\371\332?\000\000\000\000\000\000\000\000\1778\340\361\207\003\316?$\233\363\252\020O\301? \321\n\233\003\211\346?\340k#\326\245\307\334?\2105\"\235.\344\331?\315\345r\271\\.\327?7\304\200t,e\262?\000\000\000\000\000\000\304?6h\362e\203&\337?\217eP*L\274\277?H\341z\024\256G\341?\322y\213!\235\267\270?\272b\017\204\255\246\266?H\264\302\346@\242\265?\241\344N\321\302\031\300?\001\352B\236c\237\330?i\265Z\255V\253\325?]\234\326l\237\250\276?\000\000\000\000\000\000\344?5\371\262A\223/\333?\363\265zv\010\334\330?\354Q\270\036\205\353\301?&\2736Q\262k\263?$i\006\367r\305\276?H\264\302\346@\242\325?\251\t\306[\331\347\320?\371%\243\236\312\335\342?\013\205B\241P(\324?\266f\373D\365\240\301?\374\377\377\377\377\377\307?[X\351\251\205\225\316?\253g\207\300\215e\320?\270\036\205\353Q\270\316?\361\370\303\001\217?\274?`\340\305\267\3764\274?\371\355RO\306o\327?v\3511\177\257\215\330?\315\206\nD\323\036\336?l\265Z\255V\253\345?;\177\213\323\232\355\303?\377\377\377\377\377\377\331?\300\333\017\t\274\375\320?\304\373\221\323|\255\316?\\\217\302\365(\\\337?&\2736Q\262k\263?\323\014\356\345\212=\300?Zas \321\n\313?*Z8\003B\311\315?\323v$\007\245\241\342?\251T*\225J\245\342?\310R&\301\256\302\307?\374\377\377\377\377\377\267?\235\353\030\305\271\216\321?\330\352\331!pc\251?\303\365(\\\217\302\325?\017x\374\341\200\307\277?\333\316D9\026\024\267?\251\'\343\267K=\311?\321\302\031\020J\356\324?\010\304\237\377\230\301\325?\361\367\373\375~\277\337?\364\2678\255\331>\321?\001\000\000\000\000\200\340?\300\333\017\t\274\375\320?\n\023\357GN\363\345?\270\036\205\353Q\270\236?&\2736Q\262k\263?\363x#\233\363\252\300?H\264\302\346@\242\265?\341\014\010%w\212\266?40\2003\037e\333?\315\345r\271\\.\327?\266f\373D\365\240\301?\376\377\377\377\377\377\305?6h\362e\203&\357?\335X\006\245\302\304\333?\\\217\302\365(\\\337?\270\030\322y\213!\315?D\007)`y\274\301?6\007\022\255\2609\300?\022\353\322c\376^\273?z\264 \0015\273\356?\203D\"\221H$\302?\336\371[\234\326l\317?\377\377\377\377\377\377\331?Vzja\245\247\266?/\272\350\242\213.\332?\000\000\000\000\000\000\000\000\323y\213!\235\267\250?\343\302\210@?t\300?Zas \321\n\313?UUUUUU\325?CJ\252Cl\340\323?L\245R\251T*\345?X\341\313\r1 \275?\002\000\000\000\000\000\314?\300\333\017\t\274\375\300?\033\313\240T\230x\337?\232\231\231\231\231\231\271?\2008\340\361\207\003\276?3Q\216\005\305\205\261?H\264\302\346@\242\305?\251\t\306[\331\347\300?]\225\"\004m\256\320?:\235N\247\323\351\344?Nk\266OT\017\272?\000\000\000\000\000\000\341?5\371\262A\223/\313?o,\203Ra\342\335?\000\000\000\000\000\000\000\000\226{\032a\271\247\261?\206\337\223\312J\227\302?\013\233\003\211V\330\274?\002\241\344N\321\302\271?A-\257~\227%\334?\215\307\343\361x<\336?\276\334\020\003\322\261\304?\374\377\377\377\377\377\307?f\203&_6h\342?\330\352\331!pc\251?\270\036\205\353Q\270\336?\264\372RA\253/\245?\034\247\257\243\347\356\267?H\264\302\346@\242\265?\"5\301x+\373\254?}\254\255\342\235\374\340?\016\006\203\301`0\330?\310R&\301\256\302\307?\376\377\377\377\377\377\317?\013+=\265\260\322\323?\234\346k\365\354\020\330?)\\\217\302\365(\314?\265\372RA\253/\265?@t\220\002\226\307\273?\227z2~\273\324\303?m\304\272\364\230\277\327?-#k\253x\'\337?\356v\273\335n\267\333?S&\301\256\302\227\273?\370\377\377\377\377\377\273?5\371\262A\223/\333?\330\352\331!pc\271?\037\205\353Q\270\036\325?\322y\213!\235\267\270?8\2629\257\n\361\264?\215\337.\365d\374\346?\216X\227\036\363\367\332?\346\347?fpM\342?\233L&\223\311d\342?\002\351X\312$\330\325?\376\377\377\377\377\377\320?\020\t\274\375\220\300\333?Y\006\245\302\304\373\321?\270\036\205\353Q\270\316?\017x\374\341\200\307\277?\024\345XP\\\030\301?\371\355RO\306o\307?2\177\257\215X\227\316?\323v$\007\245\241\342?\312d2\231L&\323?\336\371[\234\326l\317?\000\000\000\000\000\000\316?\345\313\006M\276l\320?\320\016\201\033\313\240\324?{\024\256G\341z\224?\357\370\303\001\217?\254?$i\006\367r\305\276?H\264\302\346@\242\305?\311\235\242\2053 \304?\356x\'?\230\363\330?\316\347\363\371|>\337?\261\253\360\345\206\030\300?\000\000\000\000\000\000\324?\346:Fq\256c\324?\216eP*L\274\317?\\\217\302\365(\\\337?\2008\340\361\207\003\276?$i\006\367r\305\276?2~\273\324\223\361\333?E\013g@(\271\323?O\360\031\303\321\202\344?\215\307\343\361x<\336?\260\253\360\345\206\030\320?\340\377\377\377\377\377\237?Z\351\251\205\225\236\332?\274\0379\315\327\352\331?\244p=\n\327\243\320?|\032a\271\247\021\306?\363x#\233\363\252\300?H\264\302\346@\242\325?\343\255\354sHM\340?\205pM\3426\276\346?O&\223\311d2\331?\303\227\033b@:\306?\374\377\377\377\377\377\307?\353\030\305\271\216Q\314?\016\201\033\313\240T\310?\217\302\365(\\\217\322?\361\370\303\001\217?\274?U\275\303\272-\363\301?\016$Zas \321?=\346\357\265\021\353\322?\032Kx\300\000\316\334?H$\022\211D\"\341?J\260\253\360\345\206\310?\000\000\000\000\000\000\331?\325\302JO-\254\344?*L\274\0379\315\327?\000\000\000\000\000\000\340?\2008\340\361\207\003\276?\341\220\233\214\241\352\275?\347@\242\0256\007\262?\321\302\031\020J\356\304?KA\002jv\275\350?\312d2\231L&\323?\364\2678\255\331>\321?\376\377\377\377\377\377\325?\304JO-\254\364\324?\375\221\323|\255\236\275?\341z\024\256G\341\332?&\2736Q\262k\263?\242\2700\"\320\017\275?\347@\242\0256\007\302?\251\t\306[\331\347\300?\243[,z\3038\341?\353\365z\275^\257\327?w\025\276\334\020\003\322?\002\000\000\000\000\000\302?[X\351\251\205\225\336?\220\234\346k\365\354\320?\\\217\302\365(\\\337?\017x\374\341\200\307\277?@t\220\002\226\307\273?\347@\242\0256\007\302?\321\302\031\020J\356\264?g\251u\357KF\335?+\026\213\305b\261\330?E\365\240\221w\376\306?\377\377\377\377\377\377\336?\2448\3271\212s\315?\206\211\367#\247\371\332?\270\036\205\353Q\270\236?D:o1\244\363\266?\242\2700\"\320\017\275?\013\233\003\211V\330\314?%w\212\026\316\200\340?6\263\353E\326V\341?\371|>\237\317\347\343?\271!\006\244c)\303?\004\000\000\000\000\000\312?\323S\013+=\265\340?\330\352\331!pc\311?\024\256G\341z\024\336?D:o1\244\363\266?\340/\360\342[\177\272?\013\233\003\211V\330\274?\022\353\322c\376^\273?\200(\r\025\210\246\335?+\026\213\305b\261\330?rZ\263}\242z\320?\000\000\000\000\000\200\341?\2438\3271\212s\355?\"pc\031\224\n\263?)\\\217\302\365(\334?D:o1\244\363\266?\377\233%\230\304\354\272?6\007\022\255\2609\300?\"5\301x+\373\274?B~\311\250\247r\347?%\024\n\205B\241\320?{\320\310;\177\213\323?\370\377\377\377\377\377\273?\024x\373!\201\267\317?\304\373\221\323|\255\316?\270\036\205\353Q\270\316?\016x\374\341\200\307\257?\333\316D9\026\024\267?\273\324\223\361\333\245\316?%w\212\026\316\200\320?N\025\210\246=\374\331?\361\367\373\375~\277\337?\303\227\033b@:\306?\001\000\000\000\000\000\323?\300\333\017\t\274\375\320?b\342\375\310i\276\326?\341z\024\256G\341\312?D:o1\244\363\266?|\353O\303!7\271?H\264\302\346@\242\265?\261.=\346\357\265\301?\264\007s\036\227\276\335?\312f\263\331l6\333?3\tv\025\276\334\300?\374\377\377\377\377\377\307?\240\311\227\r\232|\331?\353\331!pc\031\324?333333\323?\226{\032a\271\247\261?\272b\017\204\255\246\266?\251\'\343\267K=\271?\261.=\346\357\265\261?\334H\016JC\005\342?L\247\323\351t:\335?W\341\313\r1 \315?\000\000\000\000\000\000\324?\237ZX\351\251\205\305?\375\221\323|\255\236\315?\232\231\231\231\231\231\271?&\2736Q\262k\263?\037\010[M-Z\273?\202D+l\016$\332?%w\212\026\316\200\320?\373uV\212\020\264\331?\316\347\363\371|>\337?D\365\240\221w\376\266?\002\000\000\000\000\000\302?\305\271\216Q\234\353\310?4(\025&\336\217\334?\354Q\270\036\205\353\261?\323y\213!\235\267\250?]\177\032\016\271\311\270?Zas \321\n\313?]z\314\337k#\326?aS\353\336\227\214\332?\356v\273\335n\267\333?\276\334\020\003\322\261\304?\004\000\000\000\000\000\300?\2448\3271\212s\315?*L\274\0379\315\327?\232\231\231\231\231\231\251?\322y\213!\235\267\270?\302$f\3278}\275?Zas \321\n\313?\362V\3669\244&\310?H\324S\271[,\332?\007\004\002\201@ \340?\276\334\020\003\322\261\304?\002\000\000\000\000\000\322?\303JO-\254\364\344?4(\025&\336\217\314?\037\205\353Q\270\036\345?^\233(\331\265\211\302?$\233\363\252\020O\301?\227z2~\273\324\303?\301x+\373\034R\303?\313i\017\177\376c\346?\214\305b\261X,\326?E\365\240\221w\376\306?\002\000\000\000\000\000\327?x\373!\201\267\037\322?*L\274\0379\315\327?\327\243p=\n\327\323?\016x\374\341\200\307\257?=\023\345XP\\\270? \321\n\233\003\211\326?e\237Cj\202\361\346?A\372\366W&\n\335?\356v\273\335n\267\333?]\234\326l\237\250\276?\004\000\000\000\000\000\300?B\223/\0334\371\342?G\027]t\321E\307?\315\314\314\314\314\314\334?&\2736Q\262k\263?\341\220\233\214\241\352\275?\347@\242\0256\007\262?\"5\301x+\373\254?O\360\031\303\321\202\344?\004\205B\241P(\304?\315\r1 \035K\311?\370\377\377\377\377\377\273?Vzja\245\247\326?=;\004n,\203\322?H\341z\024\256G\321?\322y\213!\235\267\270?t)\371o\226`\262?\371\355RO\306o\307?\261.=\346\357\265\301?\216\334\306\327\362\352\327?\214\305b\261X,\326?w\025\276\334\020\003\322?\376\377\377\377\377\377\332?Vzja\245\247\306?Y\006\245\302\304\373\341?\270\036\205\353Q\270\236?bH\347-\206t\336?\201L\373lg\242\274?\347@\242\0256\007\262?\301x+\373\034R\243?g\251u\357KF\335?\352t:\235N\247\343?Nk\266OT\017\272?\377\377\377\377\377\177\342?\2448\3271\212s\315?\330\352\331!pc\311?q=\n\327\243p\335?\265\372RA\253/\265?\340/\360\342[\177\272?p\227z2~\273\324?2\177\257\215X\227\316?a\271[,z\303\330?(\024\n\205B\241\340?<\177\213\323\232\355\323?\000\000\000\000\000\000\331?\300\333\017\t\274\375\320?\206\211\367#\247\371\332?\270\036\205\353Q\270\236?&\2736Q\262k\263?\242\2700\"\320\017\275?\371\355RO\306o\327?*Z8\003B\311\315?!\362\034\373\304\324\332?i4\032\215F\243\341?\310R&\301\256\302\307?\001\000\000\000\000\000\330?\346:Fq\256c\324?{v\010\334X\006\345?H\341z\024\256G\321?\265\372RA\253/\265?\323\014\356\345\212=\300?H\264\302\346@\242\265?\022\353\322c\376^\273?\032Kx\300\000\316\334?\212F\243\321h4\332??:\2262\tv\265?\000\000\000\000\000\000\316?x\373!\201\267\037\322?b\342\375\310i\276\326?\000\000\000\000\000\000\000\000\357\370\303\001\217?\254?]\177\032\016\271\311\270?H\264\302\346@\242\265?\261.=\346\357\265\261?\264\324\272\367%\243\336?\212F\243\321h4\332?\310R&\301\256\302\307?\002\000\000\000\000\000\302?\177H\340\355\207\004\336?\363\265zv\010\334\330?\354Q\270\036\205\353\261?|\032a\271\247\021\306?\266\001d\332g;\303?2~\273\324\223\361\333?\2063 \224\334)\332?h-H@\315\256\347?/\227\313\345r\271\334?W\341\313\r1 \315?\004\000\000\000\000\000\312?~\331\240\311\227\r\312?\311i\276V\317\016\341?\n\327\243p=\n\307?a\271\247\021\226{\272?T$\315\340^\256\330?6\007\022\255\2609\260?\251\t\306[\331\347\320?\224\314\340\232\304m\334?(\024\n\205B\241\340?\276\334\020\003\322\261\304?\002\000\000\000\000\000\322?\3301\212s\035\243\350?\253g\207\300\215e\320?\217\302\365(\\\217\342?\226{\032a\271\247\261?]\177\032\016\271\311\270?\251\'\343\267K=\311?\022\353\322c\376^\313?\376\342\004;+E\350?\007\004\002\201@ \320?I\260\253\360\345\206\270?\000\000\000\000\000\000\264?\305\271\216Q\234\353\330?\256\236\035\0027\226\341?\270\036\205\353Q\270\316?\357\370\303\001\217?\254?`\340\305\267\3764\274?6\007\022\255\2609\300?\362V\3669\244&\270?\306\337e\t\017\030\340?\356v\273\335n\267\333?Ok\266OT\017\312?\000\000\000\000\000\000\316?\235\353\030\305\271\216\341?\375\221\323|\255\236\315?=\n\327\243p=\332?D:o1\244\363\266?$i\006\367r\305\276?H\264\302\346@\242\265?\261.=\346\357\265\261?l3\037e;\222\343?H$\022\211D\"\321?Ok\266OT\017\312?\004\000\000\000\000\000\300?\035\2438\3271\212\343?\216eP*L\274\317?\270\036\205\353Q\270\336?\2008\340\361\207\003\276?@t\220\002\226\307\273?\251\'\343\267K=\271?\341\014\010%w\212\266?v\322P\201h\332\343?e4\032\215F\243\321?]\234\326l\237\250\276?\000\000\000\000\000\000\331?\017\232|\331\240\311\307?\212\367#\247\371Z\335?\354Q\270\036\205\353\261?a\271\247\021\226{\272?\343\302\210@?t\300?\013\233\003\211V\330\314?2\177\257\215X\227\336?\347\321\202\004\324\354\332?\261\327\353\365z\275\336?\261\253\360\345\206\030\300?\376\377\377\377\377\377\317?\2478\3271\212s\275?\274\0379\315\327\352\331?{\024\256G\341z\264?\265\372RA\253/\265?|\353O\303!7\271?Zas \321\n\313?\"5\301x+\373\274?6\263\353E\326V\321?+\225J\245R\251\344?3\tv\025\276\334\320?\377\377\377\377\377\377\331?\345\313\006M\276l\320?\016\201\033\313\240T\330?\270\036\205\353Q\270\236?\357\370\303\001\217?\314?\242\2700\"\320\017\275?\371\355RO\306o\327?\241\344N\321\302\031\320?\372\017\346<.}\333?\013\207\303\341p8\314??:\2262\tv\265?\370\377\377\377\377\377\273?Z\351\251\205\225\236\332?\330\352\331!pc\311?\366(\\\217\302\365\330?\264\372RA\253/\245?\242\2700\"\320\017\275?\347@\242\0256\007\342?E\013g@(\271\323?\307E\326V\361N\336?\233L&\223\311d\342?\\\234\326l\237\250\316?\001\000\000\000\000\000\330?\300\333\017\t\274\375\340?c\031\224\n\023\357\347?\205\353Q\270\036\205\333?\316[\014\351\274\305\300?\242\2700\"\320\017\275?\347@\242\0256\007\322?:\244&\030oe\337?\334\342\235\374`\316\343?\007\004\002\201@ \320?6\304\200t,e\302?\376\377\377\377\377\377\317?\237ZX\351\251\205\325?\241T\230x?r\312?\366(\\\217\302\365\340?\016x\374\341\200\307\257?\334\313\025{ l\345?\013\233\003\211V\330\274?\241\344N\321\302\031\300?\254\307\245o\177e\342?\007\004\002\201@ \320?\024\325\203F\336\371\333?\374\377\377\377\377\377\267?\017\232|\331\240\311\327?\"pc\031\224\n\323?=\n\327\243p=\332?\264\372RA\253/\305?\024\345XP\\\030\301? \321\n\233\003\211\326?\271S\264p\006\204\322?\037\325!6\360\031\343?/\227\313\345r\271\334?]\234\326l\237\250\276?\000\000\000\000\000\000\324?\2448\3271\212s\315?\304\373\221\323|\255\316?333333\323?\265\372RA\253/\265?\003\375\320A\nX\276?\273\324\223\361\333\245\336?\n\306[\331\347\220\332?\n\2371\034-H\340?i4\032\215F\243\341?X\341\313\r1 \275?\002\000\000\000\000\000\302?\300\333\017\t\274\375\300?\375\221\323|\255\236\315?{\024\256G\341z\304?\016x\374\341\200\307\257?=\023\345XP\\\270?\347@\242\0256\007\302?2\177\257\215X\227\276?\001\267\212w\362\203\331?H$\022\211D\"\341?\336\371[\234\326l\317?\376\377\377\377\377\377\317?\2448\3271\212s\315?4(\025&\336\217\314?{\024\256G\341z\324?\016x\374\341\200\307\257?\272b\017\204\255\246\266?\343\267K=\031\277\335?\331\347\220\232`\274\325?\366-\026\275a\234\340?\211D\"\221H$\342?\364\2678\255\331>\321?\002\000\000\000\000\000\314?Vzja\245\247\326?\335X\006\245\302\304\333?\000\000\000\000\000\000\320?&\2736Q\262k\263?\003\375\320A\nX\276?\251\'\343\267K=\271?\261.=\346\357\265\301?\214}bj\335\373\342?\312f\263\331l6\333?\276\334\020\003\322\261\304?\000\000\000\000\000\000\316?\017\232|\331\240\311\307?Y\006\245\302\304\373\321?\270\036\205\353Q\270\316?\357\370\303\001\217?\254?@t\220\002\226\307\273?\273\324\223\361\333\245\316?\341\014\010%w\212\306?U\"\235.\3449\326?\031\014\006\203\301`\340?\276\334\020\003\322\261\304?\377\377\377\377\377\377\324?[X\351\251\205\225\316?4(\025&\336\217\314?\327\243p=\n\327\323?a\271\247\021\226{\272?\340/\360\342[\177\272?\013\233\003\211V\330\274?\241\344N\321\302\031\320?\032Kx\300\000\316\334?:\034\016\207\303\341\340?\261\253\360\345\206\030\300?\002\000\000\000\000\000\302?\2448\3271\212s\315?\000\000\000\000\000\000\340?\232\231\231\231\231\231\251?\335\323\010\313=\215\320?cAqaD\240\277?H\264\302\346@\242\245?\241\344N\321\302\031\240?\032Kx\300\000\316\334?:\034\016\207\303\341\340?7\304\200t,e\242?\001\000\000\000\000\000\330?\353\030\305\271\216Q\314?\221\234\346k\365\354\240?)\\\217\302\365(\334?\361\370\303\001\217?\274?\034\247\257\243\347\356\267?\013\233\003\211V\330\314?\311\235\242\2053 \304?\372v\275\310\332*\316?\261\327\353\365z\275\336?\261\253\360\345\206\030\300?\000\000\000\000\000\200\343?\305\271\216Q\234\353\310?\363\265zv\010\334\330?\270\036\205\353Q\270\256?_*h\365\245\202\326?\027F\004\372\241\203\264?\347@\242\0256\007\302?\301x+\373\034R\263?\032Kx\300\000\316\334?:\034\016\207\303\341\340?;\177\213\323\232\355\303?\002\000\000\000\000\000\327?\352\251\205\225\236Z\330?\036\0027\226A\251\340?\354Q\270\036\205\353\301?\361\370\303\001\217?\274?cAqaD\240\277?\013\233\003\211V\330\274?\301x+\373\034R\303?\346\264\207?\3771\343?\215\307\343\361x<\336?\310R&\301\256\302\307?\000\000\000\000\000\000\324?2\212s\035\2438\347?/\272\350\242\213.\332?\037\205\353Q\270\036\345?\227\nZ}\251\240\325?\003\375\320A\nX\276?H\264\302\346@\242\265?\"5\301x+\373\314?D4\355\341\317\177\354?%\024\n\205B\241\320?\\\234\326l\237\250\316?\000\000\000\000\000\000\316?{ja\245\247\026\326?\201\033\313\240T\230\330?\n\327\243p=\n\307?\265\372RA\253/\265?`\340\305\267\3764\274?\013\233\003\211V\330\254?\301x+\373\034R\303?-#k\253x\'\337?\315\345r\271\\.\327?D\365\240\221w\376\266?\004\000\000\000\000\000\312?S\013+=\265\260\342?\030]t\321E\027\335?\232\231\231\231\231\231\341?\322y\213!\235\267\270?$i\006\367r\305\276?\347@\242\0256\007\262?\341\014\010%w\212\246?e&\n\335\224T\347?i\265Z\255V\253\325?W\341\313\r1 \315?\000\000\000\000\000\000\304?[X\351\251\205\225\316?\030]t\321E\027\335?\244p=\n\327\243\320?\016x\374\341\200\307\257?\254\251Ek\003\310\344?Zas \321\n\313?5\301x+\373\034\322?\343\357\262\204\007\014\340?L\245R\251T*\325?\034K\231\004\273\n\337?\002\000\000\000\000\000\302?Z\351\251\205\225\236\332?\353\331!pc\031\324?\n\327\243p=\n\327?\016x\374\341\200\307\257?$i\006\367r\305\276?\347@\242\0256\007\262?\261.=\346\357\265\261?\320~\227%<`\340?\255V\253\325j\265\332?3\tv\025\276\334\320?\002\000\000\000\000\000\327?x\373!\201\267\037\322?\004n,\203Ra\342?{\024\256G\341z\204?\2008\340\361\207\003\276?\340/\360\342[\177\272?\334\245\236\214\337.\345?\251\t\306[\331\347\340?G;+E\010\332\334?\007\004\002\201@ \340?\303\227\033b@:\306?\002\000\000\000\000\000\327?y\373!\201\267\037\302?\256\236\035\0027\226\341?\000\000\000\000\000\000\000\000\265\372RA\253/\265?\027F\004\372\241\203\264?\347@\242\0256\007\262?\341\014\010%w\212\246?\332\2039\217K\337\336?Z\255V\253\325j\345?@:\2262\tv\305?\000\000\000\000\000\000\316?\346:Fq\256c\324?G\027]t\321E\307?R\270\036\205\353Q\330?\361\370\303\001\217?\274?\242\2700\"\320\017\275?\227z2~\273\324\303?M0\336\312>\207\324?\206\030\'\330Y)\342?\013\207\303\341p8\334??:\2262\tv\265?\000\000\000\000\000\000\264?\017\232|\331\240\311\327?\220\234\346k\365\354\320?\\\217\302\365(\\\337?\316[\014\351\274\305\300?\003\375\320A\nX\276?\273\324\223\361\333\245\316?\023\214\267\262\317!\345?\037\325!6\360\031\343?\013\207\303\341p8\334?\276\334\020\003\322\261\304?\000\000\000\000\000\000\304?\2448\3271\212s\315?4(\025&\336\217\314?)\\\217\302\365(\334?\2008\340\361\207\003\276?\333\316D9\026\024\267?\277]\352\311\370\355\322?\251\t\306[\331\347\320?.@fpM\342\326?\013\207\303\341p8\334?{\320\310;\177\213\323?\000\000\000\000\000\000\336?U\013+=\265\260\322?\311i\276V\317\016\341?\000\000\000\000\000\000\000\000&\2736Q\262k\263?$i\006\367r\305\276?\013\233\003\211V\330\274?\002\241\344N\321\302\271?\201[\305;\371\301\334?p\267\333\355v\273\335?\322\310;\177\213\323\312?\001\000\000\000\000\000\330?\345\313\006M\276l\320?\206\211\367#\247\371\332?\270\036\205\353Q\270\276?]\233(\331\265\211\322?Hh\324\t\277\'\305?\264\302\346@\242\025\346?\321\302\031\020J\356\344?F\204\240\315\025V\343?\212F\243\321h4\332?3\tv\025\276\334\320?\002\000\000\000\000\000\302?[X\351\251\205\225\316?\264C\340\3062(\325?{\024\256G\341z\324?\265\372RA\253/\265?]\177\032\016\271\311\270? \321\n\233\003\211\346?\002\241\344N\321\302\331?/\014G\013\022P\323?\215\307\343\361x<\336?\370rC\014H\307\322?\000\000\000\000\000\000\346?6h\362e\203&\337?\353\331!pc\031\304?)\\\217\302\365(\334?\322y\213!\235\267\270?\242\2700\"\320\017\275?\277]\352\311\370\355\322?\241\344N\321\302\031\320?O\360\031\303\321\202\344?L\247\323\351t:\335?Ok\266OT\017\312?\374\377\377\377\377\377\307?\353\030\305\271\216Q\314?Y\006\245\302\304\373\321?\354Q\270\036\205\353\301?\316[\014\351\274\305\300?\037\010[M-Z\273?\251\'\343\267K=\311?\372{m\304\272\364\310?\247\nD\323\036\376\334?\316\347\363\371|>\337?I\260\253\360\345\206\270?\376\377\377\377\377\377\325?\237ZX\351\251\205\325?\3454_\253g\207\340?)\\\217\302\365(\274?\226{\032a\271\247\261?\363x#\233\363\252\300?Zas \321\n\313?e\237Cj\202\361\326?\223fpM\3426\336?\252\325j\265Z\255\326?\370rC\014H\307\322?\376\377\377\377\377\377\305?\020\t\274\375\220\300\333?\241T\230x?r\312?\244p=\n\327\243\340?&\2736Q\262k\263?\341\220\233\214\241\352\275?\347@\242\0256\007\262?\241\344N\321\302\031\300?\323v$\007\245\241\342?\214\305b\261X,\326?S&\301\256\302\227\273?\000\000\000\000\000\000\304?\353\030\305\271\216Q\334?\264C\340\3062(\305?\024\256G\341z\024\336?\225{\032a\271\247\241?\225\225.%\377\315\262?\013\233\003\211V\330\274?\"5\301x+\373\274?vGrP\032*\340?\016\006\203\301`0\330?\370rC\014H\307\322?\002\000\000\000\000\000\322?\024x\373!\201\267\317?\330\352\331!pc\311?\303\365(\\\217\302\325?\016x\374\341\200\307\257?\377\233%\230\304\354\272?\273\324\223\361\333\245\316?\002\241\344N\321\302\311?a5\211\333\370Z\316?\007\004\002\201@ \340?\200\213\323\232\355\023\325?\377\377\377\377\377\177\351?\2448\3271\212s\315?\264C\340\3062(\325?\354Q\270\036\205\353\261?\225{\032a\271\247\241?\340/\360\342[\177\272?\013\233\003\211V\330\254?\341\014\010%w\212\266?}\254\255\342\235\374\340?L\247\323\351t:\335?8\304\200t,e\322?\376\377\377\377\377\377\305?\237ZX\351\251\205\325?\241T\230x?r\312?\205\353Q\270\036\205\333?\322y\213!\235\267\270?y\212\244\031\334\313\265?\227z2~\273\324\303?\321\302\031\020J\356\264?\001\267\212w\362\203\331?i\265Z\255V\253\325?8\304\200t,e\322?\376\377\377\377\377\377\332?\352\251\205\225\236Z\330?\000\000\000\000\000\000\000\000\315\314\314\314\314\314\334?\016x\374\341\200\307\257?\377\233%\230\304\354\272?6\007\022\255\2609\300?\362V\3669\244&\270?5\226\360\200\001\234\331?:\034\016\207\303\341\340?rZ\263}\242z\320?\000\000\000\000\000\000\341?0\0334\371\262A\323?\363\265zv\010\334\330?\232\231\231\231\231\231\251?&\2736Q\262k\263?\343\302\210@?t\300?\227z2~\273\324\303?\321\302\031\020J\356\304?\020\004m\256\260\032\341?\316\347\363\371|>\337?@:\2262\tv\305?\000\000\000\000\000\000\316?|\373!\201\267\037\242?\216eP*L\274\317?\270\036\205\353Q\270\316?&\2736Q\262k\263?\027F\004\372\241\203\264?6\007\022\255\2609\320?\261.=\346\357\265\321?F\325\272\367%\243\276?/\026\213\305b\261\350?\336\371[\234\326l\317?\000\000\000\000\000\200\353?\304JO-\254\364\324?\016\201\033\313\240T\330?\244p=\n\327\243\300?\226{\032a\271\247\301?U\275\303\272-\363\301?\371\355RO\306o\307?e\237Cj\202\361\326?l3\037e;\222\343?i\265Z\255V\253\325?\303\227\033b@:\306?\374\377\377\377\377\377\267?\2448\3271\212s\315?J\205\211\367#\247\331?{\024\256G\341z\224?\226{\032a\271\247\261?U\275\303\272-\363\301?6\007\022\255\2609\300?\311\235\242\2053 \304?\357\336\227\214z*\327?\211D\"\221H$\342?]\234\326l\237\250\276?\001\000\000\000\000\200\340?x\373!\201\267\037\322?\363\265zv\010\334\330?\n\327\243p=\n\307?\322y\213!\235\267\270?\037\010[M-Z\273?\013\233\003\211V\330\314?\301x+\373\034R\323?\023\013\253\021\351t\341?Z,\026\213\305b\341?;\177\213\323\232\355\303?\000\000\000\000\000\000\316?5\371\262A\223/\273?Y\006\245\302\304\373\301?\244p=\n\327\243\320?\357\370\303\001\217?\254?y\212\244\031\334\313\265?\013\233\003\211V\330\234?\241\344N\321\302\031\240?\340\342\317\177\314\340\272?\031\014\006\203\301`\340?\261\253\360\345\206\030\300?\000\000\000\000\000\000\351?\353\030\305\271\216Q\314?\2510\361~\3444\337?\000\000\000\000\000\000\000\000\226{\032a\271\247\261?\242\2700\"\320\017\275?\371\355RO\306o\307?\3511\177\257\215X\307?V\375.Kx\300\340?\233L&\223\311d\342?3\tv\025\276\334\300?\002\000\000\000\000\000\302?6h\362e\203&\337?\253g\207\300\215e\320?\232\231\231\231\231\231\331?\2008\340\361\207\003\276?\024\345XP\\\030\301?H\264\302\346@\242\305?\271S\264p\006\204\322?\014d\006\327$n\343?\016\006\203\301`0\330?\310R&\301\256\302\307?\000\000\000\000\000\000\316?\240\311\227\r\232|\331?G\027]t\321E\307?\341z\024\256G\341\332?\016x\374\341\200\307\257?\326m\231\217\320\250\263?\013\233\003\211V\330\274?\301x+\373\034R\263?\326\260\032\221N\027\322?\214\305b\261X,\326?3\tv\025\276\334\300?\001\000\000\000\000\000\335?\325\302JO-\254\344?Ra\342\375\310i\336?\366(\\\217\302\365\340?|\032a\271\247\021\306?]\177\032\016\271\311\310?H\264\302\346@\242\265?\362V\3669\244&\270?\351\254\024!hs\345?i\265Z\255V\253\325?{\320\310;\177\213\323?\377\377\377\377\377\177\342?Z\351\251\205\225\236\332?\253g\207\300\215e\320?)\\\217\302\365(\334?\226{\032a\271\247\261?E\325;\254\3332\277?\013\233\003\211V\330\274?\002\241\344N\321\302\271?M^\375.Kx\340?\312f\263\331l6\333?3\tv\025\276\334\300?\000\000\000\000\000\000\304?\345\313\006M\276l\320?\363\265zv\010\334\330?)\\\217\302\365(\314?\016x\374\341\200\307\257?\341\220\233\214\241\352\275?\277]\352\311\370\355\342?\331\347\220\232`\274\325?U\357\344\007s\036\327?\211D\"\221H$\322?P&\301\256\302\227\253?\370\377\377\377\377\377\273?\325\302JO-\254\344?\253g\207\300\215e\320?\037\205\353Q\270\036\345?&\2736Q\262k\303?(\374\236TV\272\304?6\007\022\255\2609\300?\022\353\322c\376^\273?e&\n\335\224T\347?(\225J\245R\251\324?<\177\213\323\232\355\323?\001\000\000\000\000\000\323?0\0334\371\262A\303?b\342\375\310i\276\326?333333\303?\016x\374\341\200\307\257?@t\220\002\226\307\273? \321\n\233\003\211\326?\3511\177\257\215X\307?G;+E\010\332\314?L\247\323\351t:\335?\370rC\014H\307\322?\377\377\377\377\377\377\336?\240\311\227\r\232|\331?\264C\340\3062(\265?\270\036\205\353Q\270\316?\265\372RA\253/\265?`\340\305\267\3764\274?\000\000\000\000\000\000\000\000\261.=\346\357\265\301?\234N\027\362\034\373\344?:\034\016\207\303\341\340?\277\334\020\003\322\261\324?\002\000\000\000\000\000\322?\212s\035\2438\327\341?\241T\230x?r\312?\217\302\365(\\\217\342?)\331\265\211\222]\313?|\353O\303!7\271?\013\233\003\211V\330\314?m\304\272\364\230\277\327?\242\263R\204\240\315\345?\016\006\203\301`0\330?\364\2678\255\331>\321?\376\377\377\377\377\377\317?0\0334\371\262A\323?O\363\265zv\010\354?\341z\024\256G\341\312?\226{\032a\271\247\261?\003\375\320A\nX\276?\371\355RO\306o\307?\032\020J\356\024-\314?\233\331\365\"k\253\330?\215\307\343\361x<\336??:\2262\tv\265?\000\000\000\000\000\000\324?0\0334\371\262A\323?\3454_\253g\207\340?\354Q\270\036\205\353\341?&\2736Q\262k\263?\272b\017\204\255\246\306?\202D+l\016$\332?\002\241\344N\321\302\351?z\201h\332\303\237\337?O&\223\311d2\331?\315\r1 \035K\311?\002\000\000\000\000\000\302?[X\351\251\205\225\316?\030]t\321E\027\335?{\024\256G\341z\224?D:o1\244\363\266?\237W\205x\212\244\271?Zas \321\n\333?-\234\001\241\344N\341?\016\264\271\302jD\332?L\247\323\351t:\335?\322\310;\177\213\323\312?\377\377\377\377\377\377\331?\305\271\216Q\234\353\310?j\276V\317\016\201\333?\000\000\000\000\000\000\000\000\017x\374\341\200\307\277?\013\361\024I3\270\307?\251\'\343\267K=\311?\331\347\220\232`\274\305?\356x\'?\230\363\330?i4\032\215F\243\341?E\365\240\221w\376\306?\002\000\000\000\000\000\334?\2448\3271\212s\315?~\255\236\035\0027\326?H\341z\024\256G\321?\2008\340\361\207\003\276?$i\006\367r\305\276?\227z2~\273\324\303?\"5\301x+\373\334?\264\007s\036\227\276\335?\031\014\006\203\301`\340?W\341\313\r1 \315?\000\000\000\000\000\000\331?\2448\3271\212s\315?\206\211\367#\247\371\332?\000\000\000\000\000\000\000\000\226{\032a\271\247\261?es^\025\342)\302?\371\355RO\306o\307?\002\241\344N\321\302\311?S\322\351B\236c\337?\361\367\373\375~\277\337?\271!\006\244c)\303?\000\000\000\000\000\000\264?\352\251\205\225\236Z\330?\353\331!pc\031\324?\341z\024\256G\341\312?D:o1\244\363\266?\323\014\356\345\212=\300?\347@\242\0256\007\322?\n\306[\331\347\220\312?\306\337e\t\017\030\340?p\267\333\355v\273\335?\271!\006\244c)\323?\377\377\377\377\377\377\331?\353\030\305\271\216Q\314?\264C\340\3062(\265?\\\217\302\365(\\\337?\016x\374\341\200\307\257?\332\316D9\026\024\247?\251\'\343\267K=\271?\301x+\373\034R\263?\023q\033_\313\253\317?\031\014\006\203\301`\340?\266f\373D\365\240\301?\000\000\000\000\000\200\343?U\013+=\265\260\322?\016\201\033\313\240T\330?q=\n\327\243p\315?\322y\213!\235\267\270?\037\010[M-Z\273?\227z2~\273\324\323?\261.=\346\357\265\341?: \232\366\360\347\337?\353\365z\275^\257\327?\271!\006\244c)\303?\000\000\000\000\000\000\304?\353\030\305\271\216Q\314?Y\006\245\302\304\373\321?\232\231\231\231\231\231\311?\226{\032a\271\247\261?@t\220\002\226\307\273?\321\n\233\003\211V\330?\301x+\373\034R\323?N\025\210\246=\374\331?\361\367\373\375~\277\337?\310R&\301\256\302\307?\001\000\000\000\000\000\323?\235\353\030\305\271\216\321?\253g\207\300\215e\320?\000\000\000\000\000\000\320?\2008\340\361\207\003\276?\275\303\272-\363\021\272?\251\'\343\267K=\331?e\237Cj\202\361\326?\364\233\371(\333\221\334?\361\367\373\375~\277\337?\271!\006\244c)\303?\000\000\000\000\000\000\324?\017\232|\331\240\311\307?\221\234\346k\365\354\300?\354Q\270\036\205\353\321?a\271\247\021\226{\272?\000\000\000\000\000\000\000\000\224\361\333\245\236\214\337?=\346\357\265\021\353\342?c3\273^dm\245?\212F\243\321h4\332?7\304\200t,e\242?\376\377\377\377\377\377\337?\300\333\017\t\274\375\320?\304\373\221\323|\255\316?\037\205\353Q\270\036\325?\361\370\303\001\217?\274?`\340\305\267\3764\274?\347@\242\0256\007\262?\022\353\322c\376^\273?\233s\205\325\210t\332?\013\207\303\341p8\334?\271!\006\244c)\303?\376\377\377\377\377\377\332?\024x\373!\201\267\257?*L\274\0379\315\327?{\024\256G\341z\204?\357\370\303\001\217?\254?V\275\303\272-\363\261?\013\233\003\211V\330\254?\251\t\306[\331\347\300?\372\361\2039\217K\317?:\235N\247\323\351\344?{\320\310;\177\213\323?\000\000\000\000\000\000\344?Vzja\245\247\326?\006\245\302\304\373\221\323?\217\302\365(\\\217\322?&\2736Q\262k\263?8\2629\257\n\361\304?6\007\022\255\2609\320?\300\327F\254K\217\351?V\375.Kx\300\340?\312d2\231L&\303??Q=h\344\235\357?\004\000\000\000\000\000\312?\353\030\305\271\216Q\314?\363\265zv\010\334\330?{\024\256G\341z\204?\322y\213!\235\267\270?\242\2700\"\320\017\275?\371\355RO\306o\327?*Z8\003B\311\315?\001\267\212w\362\203\331?H$\022\211D\"\341?\271!\006\244c)\303?\376\377\377\377\377\377\325?{ja\245\247\026\326?\241T\230x?r\312?\232\231\231\231\231\231\311?\316[\014\351\274\305\300?\363x#\233\363\252\300?\273\324\223\361\333\245\316?\321\302\031\020J\356\324?\323v$\007\245\241\342?\215\307\343\361x<\336?\324\203F\336\371[\314?\376\377\377\377\377\377\305?\351:Fq\256c\264?\006\245\302\304\373\221\323?\270\036\205\353Q\270\236?\016x\374\341\200\307\257?\037\010[M-Z\253?\321\n\233\003\211V\330?\343\255\354sHM\340?a 3\270&q\253?\312d2\231L&\343?\370rC\014H\307\322?\000\000\000\000\000\200\353?5\371\262A\223/\313?\353\331!pc\031\324?\354Q\270\036\205\353\301?\016x\374\341\200\307\257?`\340\305\267\3764\274?6\007\022\255\2609\300?\022\353\322c\376^\273?\272H\247\013y\216\335?\371|>\237\317\347\343?@:\2262\tv\305?\001\000\000\000\000\000\323?1\212s\035\2438\327?\023\357GN\363\265\332?{\024\256G\341z\304?&\2736Q\262k\263?\246K\311\177\263\004\303?H\264\302\346@\242\305?-\234\001\241\344N\321?\032Kx\300\000\316\334?\013\205B\241P(\324?6\304\200t,e\302?\000\000\000\000\000\000\331?\013+=\265\260\322\323?~\255\236\035\0027\306?)\\\217\302\365(\334?\264\372RA\253/\245?\236W\205x\212\244\251?\347@\242\0256\007\262?\301x+\373\034R\243?\3507\363Q\266#\331?\261\327\353\365z\275\336?@:\2262\tv\305?\376\377\377\377\377\377\325?|\373!\201\267\037\262?\253g\207\300\215e\340?\000\000\000\000\000\000\000\000\263\372RA\253/\225?]\177\032\016\271\311\250?Zas \321\n\313?\241\344N\321\302\031\320?\242M\3426\276\226\307?\000\000\000\000\000\000\360?;\177\213\323\232\355\303?\000\000\000\000\000\000\344?\353\030\305\271\216Q\314?G\027]t\321E\327?\354Q\270\036\205\353\301?\323y\213!\235\267\250?`\340\305\267\3764\274?H\264\302\346@\242\265?\301x+\373\034R\263?\372\017\346<.}\333?\255V\253\325j\265\332?\303\227\033b@:\306?\004\000\000\000\000\000\300?\323S\013+=\265\340?\253g\207\300\215e\320?ffffff\326?\264\372RA\253/\305?\024\345XP\\\030\301?p\227z2~\273\324?\002\241\344N\321\302\331?\357\206q\202\235\225\342?\353\365z\275^\257\327?R&\301\256\302\227\313?\000\000\000\000\000\000\324?\013+=\265\260\322\323?y?r\232\257\325\343?\000\000\000\000\000\000\000\000\264\372RA\253/\305?U\275\303\272-\363\301? \321\n\233\003\211\326?]z\314\337k#\326?\216\334\306\327\362\352\347?l\265Z\255V\253\345?\331>Q=h\344\315?\004\000\000\000\000\000\312?2\212s\035\2438\347?\"pc\031\224\n\303?\256G\341z\024\256\347?\2008\340\361\207\003\276?D\007)`y\274\301?\013\233\003\211V\330\274?\261.=\346\357\265\301?5\013\022P\263\353\345?\315\345r\271\\.\327?3\tv\025\276\334\320?\002\000\000\000\000\000\327?Vzja\245\247\326?\231x?r\232\257\325?)\\\217\302\365(\314?&\2736Q\262k\263?\226\225.%\377\315\302?H\264\302\346@\242\265?\251\t\306[\331\347\300?-#k\253x\'\337?\315\345r\271\\.\327?\266f\373D\365\240\301?\376\377\377\377\377\377\320?\2448\3271\212s\315?\330\352\331!pc\331?{\024\256G\341z\244?\361\370\303\001\217?\274?\037\010[M-Z\273?\273\324\223\361\333\245\316?%w\212\026\316\200\340?6\263\353E\326V\341?\371|>\237\317\347\343?3\tv\025\276\334\300?\000\000\000\000\000\000\304?[X\351\251\205\225\336?\016\201\033\313\240T\330?)\\\217\302\365(\314?\226{\032a\271\247\261?\242\2700\"\320\017\275?\013\233\003\211V\330\274?\321\302\031\020J\356\304?\243[,z\3038\341?\347t:\235N\247\323?3\tv\025\276\334\300?\000\000\000\000\000\000\304?x\373!\201\267\037\322?r\232\257\325\263C\340?{\024\256G\341z\264?a\271\247\021\226{\272?\024\345XP\\\030\301?6\007\022\255\2609\300?\032\020J\356\024-\314?\243[,z\3038\341?O&\223\311d2\331?W\341\313\r1 \315?\004\000\000\000\000\000\312?[X\351\251\205\225\336?\340\3062(\025&\336?)\\\217\302\365(\274?\225{\032a\271\247\241?$i\006\367r\305\276?\251\'\343\267K=\271?\"5\301x+\373\274?!\362\034\373\304\324\332?\377\206\303\341p8\274??:\2262\tv\265?\374\377\377\377\377\377\307?\235\353\030\305\271\216\321?j\276V\317\016\201\333?\341z\024\256G\341\312?D:o1\244\363\266?@t\220\002\226\307\273?2~\273\324\223\361\333?\300\327F\254K\217\351?N\025\210\246=\374\331?\255V\253\325j\265\332?7\304\200t,e\262?\002\000\000\000\000\000\314?Vzja\245\247\266?\353\331!pc\031\304?\256G\341z\024\256\327?\225{\032a\271\247\241?\340/\360\342[\177\272?\227z2~\273\324\303?5\301x+\373\034\342?\"X\215H\247\013\331?L\247\323\351t:\335?\271!\006\244c)\303?\370\377\377\377\377\377\273?\305\271\216Q\234\353\310?{v\010\334X\006\345?\217\302\365(\\\217\322?\262k\023%\2736\321?]\177\032\016\271\311\270?\251\'\343\267K=\311?\n\306[\331\347\220\312?\207\002jv\275\310\332?\371|>\237\317\347\343?\261\253\360\345\206\030\300?\377\377\377\377\377\377\331?\177H\340\355\207\004\336?\253g\207\300\215e\340?R\270\036\205\353Q\310?\227\nZ}\251\240\325?Hh\324\t\277\'\305?\013\233\003\211V\330\334?\032\020J\356\024-\334?l\000g>\312v\344?\013\205B\241P(\324?3\tv\025\276\334\300?\002\000\000\000\000\000\302?\2448\3271\212s\315?\030]t\321E\027\335?\000\000\000\000\000\000\000\000D:o1\244\363\266?\034\247\257\243\347\356\267?6\007\022\255\2609\300?\"5\301x+\373\274?N\025\210\246=\374\331?H$\022\211D\"\341?\331>Q=h\344\315?\377\377\377\377\377\377\331?\024x\373!\201\267\317?\006\245\302\304\373\221\323?H\341z\024\256G\321?\265\372RA\253/\265?|\353O\303!7\271?\371\355RO\306o\307?2\177\257\215X\227\276?I\361N~0\347\321?\261\327\353\365z\275\336?E\365\240\221w\376\306?\000\000\000\000\000\200\341?\305\271\216Q\234\353\310?\"pc\031\224\n\323?{\024\256G\341z\264?\016x\374\341\200\307\257?\340/\360\342[\177\272?{2~\273\324\223\341?\3511\177\257\215X\327?;\n\335\224T\207\330?\312d2\231L&\323?I\260\253\360\345\206\270?\376\377\377\377\377\377\305?\013+=\265\260\322\343?\304\373\221\323|\255\316?H\341z\024\256G\341?\264\372RA\253/\245?D\007)`y\274\301?\277]\352\311\370\355\322?\032\020J\356\024-\314?\020\004m\256\260\032\341?\013\207\303\341p8\314?rZ\263}\242z\320?\002\000\000\000\000\000\314?{ja\245\247\026\326?=;\004n,\203\322?H\341z\024\256G\321?\226{\032a\271\247\261?\326m\231\217\320\250\263?\273\324\223\361\333\245\316?\002\241\344N\321\302\311?\302\273,\341\001\003\330?L\245R\251T*\325?<\177\213\323\232\355\323?\377\377\377\377\377\377\331?\017\232|\331\240\311\327?j\276V\317\016\201\333?\303\365(\\\217\302\305?\226{\032a\271\247\301?$i\006\367r\305\276?H\264\302\346@\242\325?\372{m\304\272\364\350?<\345n\261\350\r\343?+\026\213\305b\261\330?\261\253\360\345\206\030\300?\376\377\377\377\377\377\305?\024x\373!\201\267\317?\241T\230x?r\312?\205\353Q\270\036\205\333?\2008\340\361\207\003\276?\341\220\233\214\241\352\275?\273\324\223\361\333\245\316?2\177\257\215X\227\336?M^\375.Kx\340?p\267\333\355v\273\335?\322\310;\177\213\323\312?\374\377\377\377\377\377\307?\300\333\017\t\274\375\320?r\232\257\325\263C\340?{\024\256G\341z\224?\361\370\303\001\217?\274?|\353O\303!7\271?6\007\022\255\2609\300?\002\241\344N\321\302\251?\356x\'?\230\363\330?\331l6\233\315f\343?W\341\313\r1 \315?\376\377\377\377\377\377\337?U\013+=\265\260\322?\375\221\323|\255\236\315?333333\323?\016x\374\341\200\307\257?3\037\241Q\'\374\316?\013\233\003\211V\330\214?:\244&\030oe\317?\315D\241\233\222\352\340?/\227\313\345r\271\334?\304\227\033b@:\326?\000\000\000\000\000\000\304?|\373!\201\267\037\242?\017\201\033\313\240T\350?\270\036\205\353Q\270\316?\323y\213!\235\267\250?\323\014\356\345\212=\260?2~\273\324\223\361\333?5\301x+\373\034\342?\372\361\2039\217K\317?O&\223\311d2\351?\303\227\033b@:\306?\000\000\000\000\000\000\336?\300\333\017\t\274\375\300?j\276V\317\016\201\333?{\024\256G\341z\224?a\271\247\021\226{\272?=\023\345XP\\\270? \321\n\233\003\211\326?\241\344N\321\302\031\320?c\326V\361N~\320?\233L&\223\311d\342?7\304\200t,e\262?\000\000\000\000\000\000\331?U\013+=\265\260\322?\264C\340\3062(\325?\244p=\n\327\243\320?\226{\032a\271\247\261?\201L\373lg\242\274?SO\306o\227z\342?\216X\227\036\363\367\352?\264\007s\036\227\276\335?+\026\213\305b\261\330?\261\253\360\345\206\030\300?\000\000\000\000\000\000\304?\235\353\030\305\271\216\321?{v\010\334X\006\345?\270\036\205\353Q\270\276?D:o1\244\363\266?P*+]J\376\313?H\264\302\346@\242\265?\022\353\322c\376^\273?\264\007s\036\227\276\335?\261\327\353\365z\275\336?J\260\253\360\345\206\310?\376\377\377\377\377\377\320?\024x\373!\201\267\317?b\342\375\310i\276\326?)\\\217\302\365(\314?D:o1\244\363\266?\367\331\316D9\026\304?\227z2~\273\324\303?\n\306[\331\347\220\332?40\2003\037e\333?\307\347\363\371|>\317?E\365\240\221w\376\306?\370\377\377\377\377\377\273?5\371\262A\223/\273?\274\0379\315\327\352\331?)\\\217\302\365(\274?\016x\374\341\200\307\257?\333\316D9\026\024\267?\273\324\223\361\333\245\316?\261.=\346\357\265\301?\265\361\265\274\372]\326?\031\215F\243\321h\344?\315\r1 \035K\311?\001\000\000\000\000\000\330?\237ZX\351\251\205\305?4(\025&\336\217\314?q=\n\327\243p\315?\353K\005\255\276T\340?\362x#\233\363\252\260?\321\n\233\003\211V\330?\353\322c\376^\033\341?\210\233\222\352\020\033\330?i4\032\215F\243\341?3\tv\025\276\334\300?\377\377\377\377\377\377\341?x\373!\201\267\037\322?\016\201\033\313\240T\330?\244p=\n\327\243\300?\265\372RA\253/\265?\266\001d\332g;\303?\013\233\003\211V\330\314?\362V\3669\244&\310?\217\250\247r\267X\324?O&\223\311d2\331?]\234\326l\237\250\276?\376\377\377\377\377\377\332?Z\351\251\205\225\236\332?\253g\207\300\215e\320?)\\\217\302\365(\334?\226{\032a\271\247\261?E\325;\254\3332\277?\013\233\003\211V\330\274?\002\241\344N\321\302\271?M^\375.Kx\340?\312f\263\331l6\333?3\tv\025\276\334\300?\000\000\000\000\000\000\304?[X\351\251\205\225\336?\016\201\033\313\240T\310?\024\256G\341z\024\336?&\2736Q\262k\263?8\2629\257\n\361\264?\347@\242\0256\007\262?\241\344N\321\302\031\240?\016\201\001\234\371(\333?+\026\213\305b\261\330?X\341\313\r1 \275?\000\000\000\000\000\200\341?\013+=\265\260\322\323?\360GN\363\265z\326?\n\327\243p=\n\307?\226{\032a\271\247\261?\242\2700\"\320\017\275?H\264\302\346@\242\305?\3511\177\257\215X\307?V\375.Kx\300\340?\013\207\303\341p8\334?;\177\213\323\232\355\303?\000\000\000\000\000\000\264?5\371\262A\223/\333?~\255\236\035\0027\306?\341z\024\256G\341\342?\316[\014\351\274\305\300?\201L\373lg\242\274?\013\233\003\211V\330\274?\301x+\373\034R\303?9\272)\251\016\261\341?\312d2\231L&\323?\261\253\360\345\206\030\300?\000\000\000\000\000\200\341?\304JO-\254\364\324?\330\352\331!pc\331?\244p=\n\327\243\300?\2008\340\361\207\003\276?E\325;\254\3332\277?\347@\242\0256\007\262?\"5\301x+\373\274?l3\037e;\222\343?/\227\313\345r\271\334?;\177\213\323\232\355\303?\370\377\377\377\377\377\273?\353\030\305\271\216Q\314?\253g\207\300\215e\320?\341z\024\256G\341\332?\354\332D\311\256M\324?|\353O\303!7\271?\321\n\233\003\211V\330?v\3511\177\257\215\350?}\254\255\342\235\374\340?H$\022\211D\"\341?W\341\313\r1 \315?\000\000\000\000\000\000\324?Vzja\245\247\326?u\321E\027]t\321?\327\243p=\n\327\323?\2008\340\361\207\003\276?cAqaD\240\277?\347@\242\0256\007\322?\261.=\346\357\265\321?\037\325!6\360\031\343?\361\367\373\375~\277\337?\304\227\033b@:\326?\002\000\000\000\000\000\314?\017\232|\331\240\311\307?\221\234\346k\365\354\300?\354Q\270\036\205\353\321?a\271\247\021\226{\272?\000\000\000\000\000\000\000\000\224\361\333\245\236\214\337?=\346\357\265\021\353\342?c3\273^dm\245?\212F\243\321h4\332?7\304\200t,e\242?\376\377\377\377\377\377\337?5\371\262A\223/\333?\217eP*L\274\277?\366(\\\217\302\365\340?a\271\247\021\226{\272?\340/\360\342[\177\272?\347@\242\0256\007\262?\301x+\373\034R\263?\032Kx\300\000\316\334?\315\345r\271\\.\327?Z\234\326l\237\250\336?\000\000\000\000\000\200\341?\353\030\305\271\216Q\314?\217eP*L\274\277?333333\343?\265\372RA\253/\265?\340/\360\342[\177\272?\013\233\003\211V\330\314?2\177\257\215X\227\276?\277\005\t\250\331\365\342?\007\004\002\201@ \340?\331>Q=h\344\315?\377\377\377\377\377\377\324?x\373!\201\267\037\322?\353\331!pc\031\324?333333\323?\226{\032a\271\247\261?\377\233%\230\304\354\272?\251\'\343\267K=\271?\002\241\344N\321\302\271?40\2003\037e\333?/\227\313\345r\271\334?\266f\373D\365\240\301?\001\000\000\000\000\000\323?5\371\262A\223/\333?o,\203Ra\342\335?)\\\217\302\365(\274?\017x\374\341\200\307\277?@t\220\002\226\307\273?\347@\242\0256\007\262?\311\235\242\2053 \304?l3\037e;\222\343?\252\325j\265Z\255\326?\324\203F\336\371[\314?\376\377\377\377\377\377\317?\024x\373!\201\267\317?4(\025&\336\217\314?\270\036\205\353Q\270\336?&\2736Q\262k\263?\341\220\233\214\241\352\275?\371\355RO\306o\307?v\3511\177\257\215\330?V\375.Kx\300\340?\215\307\343\361x<\336?3\tv\025\276\334\300?\370\377\377\377\377\377\273?h\362e\203&_\346?\330\352\331!pc\331?\\\217\302\365(\\\337?\1778\340\361\207\003\316?\226\225.%\377\315\302?\013\233\003\211V\330\254?\002\241\344N\321\302\251?\345\375\374\307\014\256\351?l6\233\315f\263\331?\336\371[\234\326l\317?\000\000\000\000\000\000\341?\2448\3271\212s\315?G\027]t\321E\307?\341z\024\256G\341\312?\361\370\303\001\217?\274?\377\233%\230\304\354\272?\347@\242\0256\007\342?\372{m\304\272\364\330?\247p\264 \0015\333?\361\367\373\375~\277\337?\261\253\360\345\206\030\300?\376\377\377\377\377\377\317?x\373!\201\267\037\322?*L\274\0379\315\327?\n\327\243p=\n\267?\322y\213!\235\267\270?\272b\017\204\255\246\266?\343\267K=\031\277\335?:\244&\030oe\317?\226\034\224\206\nD\323?\211D\"\221H$\342?\336\371[\234\326l\317?\377\377\377\377\377\377\344?0\0334\371\262A\343?\375\221\323|\255\236\275?)\\\217\302\365(\334?\013Z}\251\240\325\307?|\353O\303!7\271?\347@\242\0256\007\262?\321\302\031\020J\356\264?\002\222\034\224\206\n\344?\312d2\231L&\323?\370rC\014H\307\322?\004\000\000\000\000\000\300?x\373!\201\267\037\322?\353\331!pc\031\324?\n\327\243p=\n\267?D:o1\244\363\266?\211@?t\220\002\306?6\007\022\255\2609\300?\"5\301x+\373\314?0N\260\263R\204\340?\214\305b\261X,\326?\303\227\033b@:\306?\000\000\000\000\000\000\304?Vzja\245\247\306?}\255\236\035\0027\346?\000\000\000\000\000\000\000\000\016x\374\341\200\307\257?\341\220\233\214\241\352\275?\013\233\003\211V\330\254?\241\344N\321\302\031\260?)\266\274\372]\226\320?\312d2\231L&\343?2\tv\025\276\334\260?\000\000\000\000\000\000\341?\353\030\305\271\216Q\314?\262\014J\205\211\367\343?\232\231\231\231\231\231\251?\264\372RA\253/\325?\341\220\233\214\241\352\275?\013\233\003\211V\330\234?\002\241\344N\321\302\251?\0266\360\031\303\321\342?(\024\n\205B\241\340?X\341\313\r1 \275?\376\377\377\377\377\377\320?\235\353\030\305\271\216\321?4(\025&\336\217\314?\270\036\205\353Q\270\276?\357\370\303\001\217?\254?es^\025\342)\302?6\007\022\255\2609\320?\251\t\306[\331\347\300?\364\316\261OL\255\333?L\245R\251T*\325?I\260\253\360\345\206\270?\002\000\000\000\000\000\302?:\371\262A\223/\253?\"pc\031\224\n\323?{\024\256G\341z\244?\323y\213!\235\267\250?V\275\303\272-\363\261?6\007\022\255\2609\320?\311\235\242\2053 \344?\310\311\250\247r\267\310?\013\205B\241P(\344?\303\227\033b@:\306?\377\377\377\377\377\177\342?\346:Fq\256c\324?j\276V\317\016\201\313?{\024\256G\341z\324?\361\370\303\001\217?\274?\242\2700\"\320\017\275?p\227z2~\273\324?\2063 \224\334)\332?\247\nD\323\036\376\334?\255V\253\325j\265\332?<\177\213\323\232\355\323?\000\000\000\000\000\000\331?\240\311\227\r\232|\331?\220\234\346k\365\354\340?\303\365(\\\217\302\345?\357\370\303\001\217?\254?`y\274\221\315y\345?\273\324\223\361\333\245\316?\3511\177\257\215X\327?\307E\326V\361N\336?\001\004\002\201@ \300?\272!\006\244c)\343?\374\377\377\377\377\377\267?5\371\262A\223/\313?\264C\340\3062(\265?333333\323?\016x\374\341\200\307\257?\272b\017\204\255\246\266?Zas \321\n\313?\341\014\010%w\212\266?\363\002\321\264\207?\337?{\275^\257\327\353\345?\370rC\014H\307\322?\000\000\000\000\000\000\316?\300\333\017\t\274\375\340?\353\331!pc\031\324?\315\314\314\314\314\314\334?\2008\340\361\207\003\276?\312\030\252\336a\335\306?\343\267K=\031\277\335?\372{m\304\272\364\330?M^\375.Kx\340?+\026\213\305b\261\330?\331>Q=h\344\315?\001\000\000\000\000\000\330?\017\232|\331\240\311\327?=;\004n,\203\322?\\\217\302\365(\\\337?\226{\032a\271\247\301?E\325;\254\3332\277?\013\233\003\211V\330\314?\321\302\031\020J\356\344?\037\325!6\360\031\343?\356v\273\335n\267\333?\276\334\020\003\322\261\304?\004\000\000\000\000\000\312?1\212s\035\2438\327?~\255\236\035\0027\326?\244p=\n\327\243\320?\361\370\303\001\217?\274?es^\025\342)\302?H\264\302\346@\242\265?\311\235\242\2053 \304?9\272)\251\016\261\341?\255V\253\325j\265\332?\276\334\020\003\322\261\304?\004\000\000\000\000\000\300?~\331\240\311\227\r\312?J\205\211\367#\247\331?\270\036\205\353Q\270\276?\227\nZ}\251\240\345?\275\303\272-\363\021\272?{2~\273\324\223\341?\266\021\353\322c\376\336?\017\\\223\270\215\257\345?z<\036\217\307\343\341?X\341\313\r1 \275?\002\000\000\000\000\000\302?[X\351\251\205\225\316?Ra\342\375\310i\336?\000\000\000\000\000\000\000\000\361\370\303\001\217?\274?\377\233%\230\304\354\272?\013\233\003\211V\330\234?\341\014\010%w\212\246?\323v$\007\245\241\342?\273\\.\227\313\345\342?X\341\313\r1 \275?\370\377\377\377\377\377\273?|\331\240\311\227\r\332?\264C\340\3062(\325?\000\000\000\000\000\000\360?|\032a\271\247\021\306?|RY\351R\362\357?2~\273\324\223\361\333?~\016\251\t\306[\331?\313i\017\177\376c\346?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?\002\000\000\000\000\000\302?\300\333\017\t\274\375\320?\216eP*L\274\317?{\024\256G\341z\264?\017x\374\341\200\307\277?$i\006\367r\305\276?\251\'\343\267K=\311?\251\t\306[\331\347\320?z\201h\332\303\237\337?\353\365z\275^\257\327?;\177\213\323\232\355\303?\000\000\000\000\000\000\316?[X\351\251\205\225\316?B\2510\361~\344\344?\232\231\231\231\231\231\271?\016x\374\341\200\307\257?\340/\360\342[\177\272?\016$Zas \321?\311\235\242\2053 \324?\363\002\321\264\207?\337?\261\327\353\365z\275\336?\266f\373D\365\240\301?\370\377\377\377\377\377\273?\2448\3271\212s\315?\335X\006\245\302\304\333?\000\000\000\000\000\000\000\000\226{\032a\271\247\261?es^\025\342)\302?\251\'\343\267K=\311?\n\306[\331\347\220\312?S\322\351B\236c\337?\361\367\373\375~\277\337?\271!\006\244c)\303?\370\377\377\377\377\377\273?U\013+=\265\260\322?\375\221\323|\255\236\255?\341z\024\256G\341\332?\323y\213!\235\267\250?\266\001d\332g;\263?\273\324\223\361\333\245\316?\301x+\373\034R\303?\\/\262\266\212w\322?\356v\273\335n\267\333?R&\301\256\302\227\313?\376\377\377\377\377\377\332?0\0334\371\262A\323?j\276V\317\016\201\313?\270\036\205\353Q\270\256?\016x\374\341\200\307\257?`\340\305\267\3764\274?\227z2~\273\324\303?-\234\001\241\344N\321?A\372\366W&\n\335?\361\367\373\375~\277\337?X\341\313\r1 \275?\002\000\000\000\000\000\314?Vzja\245\247\266?\241T\230x?r\332?\270\036\205\353Q\270\236?\264\372RA\253/\245?\242\2700\"\320\017\275?\347@\242\0256\007\262?\341\014\010%w\212\246?(\3771\203k\022\327?\315\345r\271\\.\347?\303\227\033b@:\306?\376\377\377\377\377\377\317?x\373!\201\267\037\322?\304\373\221\323|\255\316?\303\365(\\\217\302\345?\357\370\303\001\217?\254?\270e>B\243N\350?\273\324\223\361\333\245\316?~\016\251\t\306[\331?}\254\255\342\235\374\340?H$\022\211D\"\321?\370rC\014H\307\342?\004\000\000\000\000\000\300?y\373!\201\267\037\302?j\276V\317\016\201\333?\n\327\243p=\n\267?\361\370\303\001\217?\274?\302$f\3278}\275?\251\'\343\267K=\311?\241\344N\321\302\031\300?\356x\'?\230\363\330?:\235N\247\323\351\344?E\365\240\221w\376\306?\000\000\000\000\000\200\341?U\013+=\265\260\322?\016\201\033\313\240T\310?\341z\024\256G\341\312?\226{\032a\271\247\261?\275\303\272-\363\021\272?\004\211V\330\034H\344?\301x+\373\034R\343?\264\007s\036\227\276\335?\255V\253\325j\265\332?\271!\006\244c)\303?\000\000\000\000\000\000\304?5\371\262A\223/\313?\340\3062(\025&\336?\354Q\270\036\205\353\261?\361\370\303\001\217?\274?\003/\276\365\247\341\300?\251\'\343\267K=\311?\362V\3669\244&\270?aS\353\336\227\214\332?\007\004\002\201@ \340?\276\334\020\003\322\261\304?\002\000\000\000\000\000\334?\352\251\205\225\236Z\330?\264C\340\3062(\305?\327\243p=\n\327\323?&\2736Q\262k\263?\323\014\356\345\212=\300?\227z2~\273\324\303?\321\302\031\020J\356\264?\233s\205\325\210t\332?i\265Z\255V\253\325?3\tv\025\276\334\300?\001\000\000\000\000\000\323?Vzja\245\247\266?4(\025&\336\217\334?\000\000\000\000\000\000\000\000\361\370\303\001\217?\274?\333\316D9\026\024\267?H\264\302\346@\242\265?\"5\301x+\373\254?\025\216\026$\240f\307?\352t:\235N\247\343?\271!\006\244c)\303?\000\000\000\000\000\000\346?\300\333\017\t\274\375\300?7\226A\2510\361\336?\232\231\231\231\231\231\271?\316[\014\351\274\305\300?\302$f\3278}\275?H\264\302\346@\242\305?\261.=\346\357\265\301?\224\231(tSR\335?l\265Z\255V\253\345?\315\r1 \035K\311?\376\377\377\377\377\377\320?|\331\240\311\227\r\332?\206\211\367#\247\371\332?\341z\024\256G\341\312?\017x\374\341\200\307\277?es^\025\342)\302?\251\'\343\267K=\331?m\304\272\364\230\277\327?O\360\031\303\321\202\344?\312f\263\331l6\333?\271!\006\244c)\303?\376\377\377\377\377\377\305?~\331\240\311\227\r\312?*L\274\0379\315\327?\000\000\000\000\000\000\000\000\316[\014\351\274\305\300?\302$f\3278}\275?\347@\242\0256\007\322?\032\020J\356\024-\314?\302\273,\341\001\003\330?:\034\016\207\303\341\340?X\341\313\r1 \275?\002\000\000\000\000\000\327?Vzja\245\247\306?\353\331!pc\031\324?{\024\256G\341z\204?\264\372RA\253/\245?\027F\004\372\241\203\264?\013\233\003\211V\330\314?\241\344N\321\302\031\300?\210\233\222\352\020\033\330?(\024\n\205B\241\340?\271!\006\244c)\303?\004\000\000\000\000\000\312?\2448\3271\212s\315?j\276V\317\016\201\313?R\270\036\205\353Q\330?\316[\014\351\274\305\300?\034\247\257\243\347\356\267?\227z2~\273\324\323?\"5\301x+\373\314?\235\366\360\347?f\320?\215\307\343\361x<\336?\331>Q=h\344\315?\000\000\000\000\000\000\346?\305\271\216Q\234\353\330?\375\221\323|\255\236\315?=\n\327\243p=\332?&\2736Q\262k\263?\326m\231\217\320\250\263?\251\'\343\267K=\311?\022\353\322c\376^\313?6M{\370\363\037\323?\016\006\203\301`0\330?\276\334\020\003\322\261\304?\377\377\377\377\377\177\342?0\0334\371\262A\323?\353\331!pc\031\304?\315\314\314\314\314\314\334?\265\372RA\253/\265?z\212\244\031\334\313\325?\013\233\003\211V\330\254?\241\344N\321\302\031\260?c\326V\361N~\320?(\225J\245R\251\324?8\304\200t,e\322?\000\000\000\000\000\000\344?U\013+=\265\260\322?\320\016\201\033\313\240\324?\000\000\000\000\000\000\320?\226{\032a\271\247\301?@t\220\002\226\307\273?\347@\242\0256\007\322?:\244&\030oe\317?\243[,z\3038\341?\273\\.\227\313\345\342?\210\001\351X\312$\330?\377\377\377\377\377\377\341?\323S\013+=\265\340?\375\221\323|\255\236\275?\024\256G\341z\024\336?\226{\032a\271\247\261?`\340\305\267\3764\274?\347@\242\0256\007\262?\"5\301x+\373\274?9\272)\251\016\261\341?\214\305b\261X,\326?\222w\376\026\2475\333?\001\000\000\000\000\000\330?~\331\240\311\227\r\312?\206\211\367#\247\371\332?{\024\256G\341z\204?a\271\247\021\226{\272?\037\010[M-Z\273?\371\355RO\306o\307?\n\306[\331\347\220\312?N{\370\363\0373\330?\215\307\343\361x<\336?]\234\326l\237\250\276?\002\000\000\000\000\000\327?x\373!\201\267\037\322?j\276V\317\016\201\333?\232\231\231\231\231\231\271?_*h\365\245\202\326?\211@?t\220\002\306?\013\233\003\211V\330\254?\241\344N\321\302\031\240?l3\037e;\222\343?\361\367\373\375~\277\337?R&\301\256\302\227\313?\376\377\377\377\377\377\317?0\0334\371\262A\303?\220\234\346k\365\354\340?\000\000\000\000\000\000\000\000\226{\032a\271\247\301?\237W\205x\212\244\271? \321\n\233\003\211\326?\271S\264p\006\204\322?\226\202\004\324\354z\321?\331l6\233\315f\343?\276\334\020\003\322\261\304?\000\000\000\000\000\000\336?U\013+=\265\260\322?\016\201\033\313\240T\330?q=\n\327\243p\315?\322y\213!\235\267\270?\037\010[M-Z\273?\227z2~\273\324\323?\261.=\346\357\265\341?: \232\366\360\347\337?\353\365z\275^\257\327?\271!\006\244c)\303?\000\000\000\000\000\000\304?\017\232|\331\240\311\327?\"pc\031\224\n\303?R\270\036\205\353Q\330?\322y\213!\235\267\270?\027F\004\372\241\203\264?6\007\022\255\2609\320?\n\306[\331\347\220\332?\024(\246\326\275/\331?\031\014\006\203\301`\340?\331>Q=h\344\315?\001\000\000\000\000\200\340?~\331\240\311\227\r\312?\206\211\367#\247\371\332?{\024\256G\341z\224?\226{\032a\271\247\261?`\340\305\267\3764\274?\273\324\223\361\333\245\316?\301x+\373\034R\303?\023>c8Z\220\340?(\024\n\205B\241\340?\260\253\360\345\206\030\320?\004\000\000\000\000\000\312? \022x\373!\201\347?\016\201\033\313\240T\310?\\\217\302\365(\\\337?\227\nZ}\251\240\325?\333\316D9\026\024\267?\013\233\003\211V\330\254?\3511\177\257\215X\307?\021\273\367%\243\236\352?\315\345r\271\\.\327?\315\r1 \035K\311?\000\000\000\000\000\200\341?\2448\3271\212s\315?\330\352\331!pc\311?q=\n\327\243p\335?\265\372RA\253/\265?\340/\360\342[\177\272?p\227z2~\273\324?2\177\257\215X\227\316?a\271[,z\303\330?(\024\n\205B\241\340?<\177\213\323\232\355\323?\000\000\000\000\000\000\331?\024x\373!\201\267\277?\320\016\201\033\313\240\324?\000\000\000\000\000\000\000\000\265\372RA\253/\265?\232\366\331\316D9\266?{2~\273\324\223\341?\301x+\373\034R\323?\357\336\227\214z*\327?\013\205B\241P(\344?F\365\240\221w\376\326?\376\377\377\377\377\377\325?|\373!\201\267\037\262?\351\242\213.\272\350\342?{\024\256G\341z\264?\263\372RA\253/\225?\242\2700\"\320\017\255?H\264\302\346@\242\305?oe\237Cj\202\341?\326\222\270\215\257\345\305?:\235N\247\323\351\344?<\177\213\323\232\355\323?\000\000\000\000\000\200\346?Vzja\245\247\266?\353\331!pc\031\324?\n\327\243p=\n\267?\322y\213!\235\267\270?eAqaD\240\257?\013\233\003\211V\330\314?\373\034R\023\214\267\342?v\024\272)\251\016\321?\233\315f\263\331l\346?E\365\240\221w\376\306?\000\000\000\000\000\200\346?Vzja\245\247\306?\"pc\031\224\n\343?\270\036\205\353Q\270\236?\322y\213!\235\267\270?\367\331\316D9\026\264?2~\273\324\223\361\333?\251\t\306[\331\347\320?\210\233\222\352\020\033\330?\352t:\235N\247\343?\266f\373D\365\240\301?\001\000\000\000\000\000\343?\3301\212s\035\243\350?Y\006\245\302\304\373\301?\000\000\000\000\000\000\350?\316[\014\351\274\305\300?$i\006\367r\305\276?\227z2~\273\324\323?*Z8\003B\311\315?\002\222\034\224\206\n\344?\215\307\343\361x<\316?\322\310;\177\213\323\312?\001\000\000\000\000\000\335?x\373!\201\267\037\322?\264C\340\3062(\305?)\\\217\302\365(\334?\017x\374\341\200\307\277?\326m\231\217\320\250\303?\251\'\343\267K=\271?\261.=\346\357\265\261?`\234`g\245\010\341?p\267\333\355v\273\335?\364\2678\255\331>\321?\000\000\000\000\000\000\331?\235\353\030\305\271\216\321?~\255\236\035\0027\326?\244p=\n\327\243\320?\226{\032a\271\247\261?\343\302\210@?t\300?\227z2~\273\324\323?\\\331\347\220\232`\354?\272H\247\013y\216\335?\212F\243\321h4\332?;\177\213\323\232\355\303?\374\377\377\377\377\377\307?\305\271\216Q\234\353\310?\363\265zv\010\334\330?\232\231\231\231\231\231\271?\357\370\303\001\217?\254?y\212\244\031\334\313\265?\343\267K=\031\277\335?=\346\357\265\021\353\322?\347\321\202\004\324\354\332?:\034\016\207\303\341\340?Ok\266OT\017\312?\374\377\377\377\377\377\307?5\371\262A\223/\333?o,\203Ra\342\335?\244p=\n\327\243\320?a\271\247\021\226{\272?\341\220\233\214\241\352\275?\227z2~\273\324\323?T\264p\006\204\222\353?\206\030\'\330Y)\342?\312f\263\331l6\333?3\tv\025\276\334\300?\002\000\000\000\000\000\302?Vzja\245\247\306?\206\211\367#\247\371\332?\000\000\000\000\000\000\000\000\1778\340\361\207\003\316?$\233\363\252\020O\301? \321\n\233\003\211\346?\340k#\326\245\307\334?\2105\"\235.\344\331?\315\345r\271\\.\327?7\304\200t,e\262?\000\000\000\000\000\000\304?\352\251\205\225\236Z\330?\"pc\031\224\n\323?\270\036\205\353Q\270\316?\263k\023%\2736\301?4Q\216\005\305\205\301?\273\324\223\361\333\245\336?\311\235\242\2053 \344?\037\325!6\360\031\343?\211D\"\221H$\322?]\234\326l\237\250\276?\370\377\377\377\377\377\273?\304JO-\254\364\324?~\255\236\035\0027\326?\354Q\270\036\205\353\321?\226{\032a\271\247\261?@t\220\002\226\307\273?\347@\242\0256\007\302?\022\353\322c\376^\313?\206\030\'\330Y)\342?\031\014\006\203\301`\340?@:\2262\tv\305?\000\000\000\000\000\000\316?\017\232|\331\240\311\307?\030]t\321E\027\335?{\024\256G\341z\224?\226{\032a\271\247\261?8\2629\257\n\361\264? \321\n\233\003\211\326?\"5\301x+\373\314?\010\221\347\330\'\246\326?\031\014\006\203\301`\340?\370rC\014H\307\322?\001\000\000\000\000\000\330?\346:Fq\256c\324?\016\201\033\313\240T\310?\037\205\353Q\270\036\325?a\271\247\021\226{\272?\037\010[M-Z\273?\347@\242\0256\007\302?%w\212\026\316\200\320?\347\236\312\335b\321\333?\255V\253\325j\265\332?8\304\200t,e\322?\000\000\000\000\000\000\331?\370C\002o?$\340?\253g\207\300\215e\320?)\\\217\302\365(\334?a\271\247\021\226{\272?h\324\t\277\'\225\325?\013\233\003\211V\330\254?\301x+\373\034R\243?5\013\022P\263\353\345?\252\325j\265Z\255\326?E\365\240\221w\376\306?\000\000\000\000\000\000\304?\021x\373!\201\267\337?~\255\236\035\0027\306?q=\n\327\243p\335?\226{\032a\271\247\261?\302$f\3278}\275?\347@\242\0256\007\262?\301x+\373\034R\223?4\312\017\346<.\335?\211D\"\221H$\322?D\365\240\221w\376\266?\001\000\000\000\000\000\323?\353\030\305\271\216Q\314?\330\352\331!pc\331?{\024\256G\341z\204?\322y\213!\235\267\270?\201L\373lg\242\274?p\227z2~\273\324?\372{m\304\272\364\310?\310\374`\316\343\322\327?(\024\n\205B\241\340?@:\2262\tv\305?\001\000\000\000\000\000\330?h\362e\203&_\346?j\276V\317\016\201\313?333333\343?\2008\340\361\207\003\276?\302$f\3278}\275?Zas \321\n\333?\n\306[\331\347\220\332?\313i\017\177\376c\346?\211D\"\221H$\322?\\\234\326l\237\250\316?\000\000\000\000\000\000\324?{ja\245\247\026\326?G\027]t\321E\307?\232\231\231\231\231\231\331?\317[\014\351\274\305\320?t)\371o\226`\262?\013\233\003\211V\330\234?\301x+\373\034R\223?\tly\365\273,\341?\007\004\002\201@ \340?\315\r1 \035K\311?\377\377\377\377\377\377\336?\345\313\006M\276l\320?\206\211\367#\247\371\332?H\341z\024\256G\321?&\2736Q\262k\263?\003\375\320A\nX\276?\013\233\003\211V\330\314?\353\322c\376^\033\341? \214\254\255\342\235\334?\212F\243\321h4\332?\271!\006\244c)\303?\004\000\000\000\000\000\312?\305\271\216Q\234\353\310?\256\236\035\0027\226\341?\000\000\000\000\000\000\000\000a\271\247\021\226{\272?\326m\231\217\320\250\303?\371\355RO\306o\307?\301x+\373\034R\303?\340\304m|-\257\336?\352t:\235N\247\343?3\tv\025\276\334\300?\376\377\377\377\377\377\325?\304JO-\254\364\324?u\321E\027]t\341?\232\231\231\231\231\231\271?\2008\340\361\207\003\276?\302$f\3278}\275?\227z2~\273\324\343?\343\255\354sHM\340?F\204\240\315\025V\343?\251T*\225J\245\342?]\234\326l\237\250\276?\000\000\000\000\000\000\316?Vzja\245\247\326?\206\211\367#\247\371\332?\303\365(\\\217\302\305?\226{\032a\271\247\301?\206\337\223\312J\227\302?\347@\242\0256\007\322?#\326\245\307\374\275\346?\323v$\007\245\241\342?e4\032\215F\243\321?X\341\313\r1 \275?\004\000\000\000\000\000\300?~\331\240\311\227\r\312?\253g\207\300\215e\340?\270\036\205\353Q\270\236?\322y\213!\235\267\270?V\275\303\272-\363\261?H\264\302\346@\242\265?\241\344N\321\302\031\260?u]/\262\266\212\327?z<\036\217\307\343\341?E\365\240\221w\376\306?\000\000\000\000\000\000\336?U\013+=\265\260\322?\216eP*L\274\337?{\024\256G\341z\204?\226{\032a\271\247\261?\037\010[M-Z\273?H\264\302\346@\242\265?\321\302\031\020J\356\304?gC\005\242i\017\337?\031\014\006\203\301`\340?\261\253\360\345\206\030\300?\376\377\377\377\377\377\305?\345\313\006M\276l\320?*L\274\0379\315\327?{\024\256G\341z\264?\2008\340\361\207\003\276?\343\302\210@?t\300?\371\355RO\306o\307?\251\t\306[\331\347\300?\372\017\346<.}\333?\013\207\303\341p8\334?;\177\213\323\232\355\303?\001\000\000\000\000\000\323?\345\313\006M\276l\320?\0027\226A\2510\341?\232\231\231\231\231\231\311?\rx\374\341\200\307\337?u)\371o\226`\302?\202D+l\016$\332?-\234\001\241\344N\341?Y\217K\337\376\312\344?\315\345r\271\\.\327?\271!\006\244c)\303?\370\377\377\377\377\377\273?6h\362e\203&\337?O\363\265zv\010\334?\256G\341z\024\256\327?]\233(\331\265\211\322?8\2629\257\n\361\304?\347@\242\0256\007\302?m\304\272\364\230\277\327?\335\360\347?fp\355?L\247\323\351t:\335?\310R&\301\256\302\307?\001\000\000\000\000\000\323?\304JO-\254\364\324?\231x?r\232\257\325?\000\000\000\000\000\000\000\000\225{\032a\271\247\241?]\177\032\016\271\311\270?\347@\242\0256\007\262?\002\241\344N\321\302\251?\224\377\230\3015\211\333?l6\233\315f\263\331?\310R&\301\256\302\307?\000\000\000\000\000\000\316?U\013+=\265\260\322?~\255\236\035\0027\306?=\n\327\243p=\332?\264\372RA\253/\245?\225\225.%\377\315\262?\347@\242\0256\007\262?\3511\177\257\215X\307?\320o\346\243lG\322?\356v\273\335n\267\333?W\341\313\r1 \315?\000\000\000\000\000\000\331?\353\030\305\271\216Q\334?\375\221\323|\255\236\335?\270\036\205\353Q\270\316?D:o1\244\363\266?\302VS\213\326\006\300?\013\233\003\211V\330\254?\261.=\346\357\265\301?O\360\031\303\321\202\344?\013\205B\241P(\324?\276\334\020\003\322\261\304?\376\377\377\377\377\377\320?C\002o?$\360\346?\330\352\331!pc\331?\\\217\302\365(\\\337?\316[\014\351\274\305\300?\377\233%\230\304\354\272?\013\233\003\211V\330\254?\321\302\031\020J\356\264?5\013\022P\263\353\345?\013\205B\241P(\324?6\304\200t,e\302?\001\000\000\000\000\000\335?5\371\262A\223/\313?G\027]t\321E\267?\232\231\231\231\231\231\331?\323y\213!\235\267\250?y\212\244\031\334\313\265?\347@\242\0256\007\322?v\3511\177\257\215\330?\210\233\222\352\020\033\330?\312d2\231L&\343?E\365\240\221w\376\306?\377\377\377\377\377\377\331?\305\271\216Q\234\353\310?\0027\226A\2510\341?\000\000\000\000\000\000\000\000\016x\374\341\200\307\257?\333\316D9\026\024\267?\343\267K=\031\277\335?\271S\264p\006\204\322?9\272)\251\016\261\341?\214\305b\261X,\346?\322\310;\177\213\323\312?\002\000\000\000\000\000\314?\017\232|\331\240\311\307?\006\245\302\304\373\221\343?\354Q\270\036\205\353\261?&\2736Q\262k\263?\226\225.%\377\315\302?\016$Zas \321?M0\336\312>\207\324?\272\256\027Y[\305\333?l\265Z\255V\253\345?\336\371[\234\326l\317?\376\377\377\377\377\377\337?y\373!\201\267\037\302?\220\234\346k\365\354\320?\366(\\\217\302\365\330?\361\370\303\001\217?\274?@t\220\002\226\307\273?\347@\242\0256\007\262?\002\241\344N\321\302\251?\'f\t\017\030\300\331?\331l6\233\315f\343?R&\301\256\302\227\313?\000\000\000\000\000\000\331?5\371\262A\223/\313?O\363\265zv\010\334?{\024\256G\341z\224?\265\372RA\253/\265?\333\316D9\026\024\267?\251\'\343\267K=\271?2\177\257\215X\227\276?V\375.Kx\300\340?\233L&\223\311d\342?Ok\266OT\017\312?\000\000\000\000\000\000\304?\345\313\006M\276l\320?W\317\016\201\033\313\340?\000\000\000\000\000\000\000\000\226{\032a\271\247\261?$i\006\367r\305\276?\347@\242\0256\007\262?\301x+\373\034R\243?\363\002\321\264\207?\337?\215\307\343\361x<\336?I\260\253\360\345\206\270?\374\377\377\377\377\377\307?x\373!\201\267\037\322?\330\352\331!pc\331?\244p=\n\327\243\320?&\2736Q\262k\263?\242\2700\"\320\017\275?Zas \321\n\333?<E\013g@(\351?\341*\336\311\017\346\334?\353\365z\275^\257\327?X\341\313\r1 \275?\002\000\000\000\000\000\314?\240\311\227\r\232|\331?\311i\276V\317\016\341?{\024\256G\341z\244?\323y\213!\235\267\250?`\340\305\267\3764\274?H\264\302\346@\242\245?\002\241\344N\321\302\251?\323v$\007\245\241\342?\356v\273\335n\267\333?\261\253\360\345\206\030\300?\374\377\377\377\377\377\307?\300\333\017\t\274\375\320?~\255\236\035\0027\326?{\024\256G\341z\224?\357\370\303\001\217?\254?E\325;\254\3332\277?\013\233\003\211V\330\314?\311\235\242\2053 \304?\232@\315\256\027Y\333?\361\367\373\375~\277\337?S&\301\256\302\227\273?\001\000\000\000\000\000\323?\2478\3271\212s\275?\030]t\321E\027\315?\244p=\n\327\243\300?a\271\247\021\226{\272?\225\225.%\377\315\262?\371\355RO\306o\307?\261.=\346\357\265\301?]\225\"\004m\256\320?\214\305b\261X,\346?Ok\266OT\017\312?\000\000\000\000\000\200\343?\353\030\305\271\216Q\334?j\276V\317\016\201\313?\341z\024\256G\341\332?\226{\032a\271\247\261?|\353O\303!7\271?\013\233\003\211V\330\254?\341\014\010%w\212\246?\264\324\272\367%\243\336?(\225J\245R\251\324?\260\253\360\345\206\030\320?\000\000\000\000\000\000\324?y\373!\201\267\037\302?\304\373\221\323|\255\336?333333\303?]\233(\331\265\211\322?\037\010[M-Z\273?H\264\302\346@\242\305?\251\t\306[\331\347\300?\341*\336\311\017\346\334?\013\205B\241P(\344?\276\334\020\003\322\261\304?\000\000\000\000\000\000\341?\305\271\216Q\234\353\330?\340\3062(\025&\336?\000\000\000\000\000\000\000\000a\271\247\021\226{\272?\323\014\356\345\212=\300?6\007\022\255\2609\320?\002\241\344N\321\302\311?\234N\027\362\034\373\344?\261\327\353\365z\275\336?\276\334\020\003\322\261\304?\004\000\000\000\000\000\300?U\013+=\265\260\322?\360GN\363\265z\326?\270\036\205\353Q\270\256?)\331\265\211\222]\313?\302VS\213\326\006\300?\371\355RO\306o\327?]z\314\337k#\326?\223fpM\3426\336?\316\347\363\371|>\337?Ok\266OT\017\312?\376\377\377\377\377\377\325?Z\351\251\205\225\236\332?\301\215eP*L\334?\244p=\n\327\243\320?&\2736Q\262k\263?U\275\303\272-\363\301?\013\233\003\211V\330\254?\3511\177\257\215X\307?\tly\365\273,\341?l6\233\315f\263\331?P&\301\256\302\227\253?\376\377\377\377\377\377\305?S\013+=\265\260\342?\353\331!pc\031\324?\256G\341z\024\256\347?O#,\3674\302\322?\226\225.%\377\315\302?\013\233\003\211V\330\254?\261.=\346\357\265\261?\313i\017\177\376c\346?\016\006\203\301`0\330?\303\227\033b@:\306?\376\377\377\377\377\377\332?0\0334\371\262A\323?j\276V\317\016\201\313?)\\\217\302\365(\334?\226{\032a\271\247\261?u)\371o\226`\302?\347@\242\0256\007\262?\"5\301x+\373\254?N\025\210\246=\374\331?\013\207\303\341p8\334?\310R&\301\256\302\307?\001\000\000\000\000\000\335?\305\271\216Q\234\353\310?\330\352\331!pc\331?\n\327\243p=\n\307?\226{\032a\271\247\261?\201L\373lg\242\274?\273\324\223\361\333\245\316?\241\344N\321\302\031\340?z\201h\332\303\237\337?Z\255V\253\325j\345?6\304\200t,e\302?\004\000\000\000\000\000\300?0\0334\371\262A\303?\330\352\331!pc\311?R\270\036\205\353Q\310?\355\332D\311\256M\304?\377\233%\230\304\354\272?\251\'\343\267K=\311?\n\306[\331\347\220\312?N\025\210\246=\374\331?+\225J\245R\251\344?X\341\313\r1 \275?\377\377\377\377\377\377\344?\305\271\216Q\234\353\310?\030]t\321E\027\335?\000\000\000\000\000\000\000\000\226{\032a\271\247\261?\242\2700\"\320\017\275?\277]\352\311\370\355\322?\n\306[\331\347\220\312?\326\026\213\3360N\340?(\024\n\205B\241\340?\336\371[\234\326l\317?\374\377\377\377\377\377\307?[X\351\251\205\225\316?\006\245\302\304\373\221\303?\366(\\\217\302\365\330?\263\372RA\253/\225?\367\331\316D9\026\264?H\264\302\346@\242\265?\241\344N\321\302\031\240?\272\025\357\344\007s\316?\356v\273\335n\267\333?X\341\313\r1 \275?\000\000\000\000\000\000\336?\013+=\265\260\322\343?\220\234\346k\365\354\320?{\024\256G\341z\344?\265\372RA\253/\265?\367\331\316D9\026\264?\013\233\003\211V\330\254?\"5\301x+\373\254?\323v$\007\245\241\342?\353\365z\275^\257\327?Ok\266OT\017\312?\376\377\377\377\377\377\320?\237ZX\351\251\205\325?\264C\340\3062(\325?)\\\217\302\365(\314?\017x\374\341\200\307\277?$i\006\367r\305\276?H\264\302\346@\242\245?\301x+\373\034R\263?@a\316\343\322\267\337?\212F\243\321h4\332?6\304\200t,e\302?\002\000\000\000\000\000\314?\345\313\006M\276l\320?\016\201\033\313\240T\330?\354Q\270\036\205\353\301?D:o1\244\363\266?@t\220\002\226\307\273?\371\355RO\306o\327?\331\347\220\232`\274\325?g\251u\357KF\335?\312f\263\331l6\333?;\177\213\323\232\355\303?\004\000\000\000\000\000\312?0\0334\371\262A\323?\264C\340\3062(\325?\000\000\000\000\000\000\320?&\2736Q\262k\263?`\340\305\267\3764\274?6\007\022\255\2609\320?UUUUUU\325?\224\314\340\232\304m\334?\013\207\303\341p8\334?D\365\240\221w\376\266?\376\377\377\377\377\377\320?\2478\3271\212s\275?Y\006\245\302\304\373\301?\000\000\000\000\000\000\320?\032a\271\247\021\226\353?\374:z\356~\201\267?\000\000\000\000\000\000\360?\266\021\353\322c\376\356?mu\210\r|\306\340?p\267\333\355v\273\335?\261\253\360\345\206\030\300?\002\000\000\000\000\000\322?|\331\240\311\227\r\332?\304\373\221\323|\255\316?\000\000\000\000\000\000\340?\361\370\303\001\217?\274?t)\371o\226`\262?\227z2~\273\324\303?2\177\257\215X\227\276?\210\233\222\352\020\033\330?\215\307\343\361x<\336?\265f\373D\365\240\321?\001\000\000\000\000\000\350?\352\251\205\225\236Z\330?\375\221\323|\255\236\315?{\024\256G\341z\324?\317\352K\005\255\276\324?\302VS\213\326\006\300?6\007\022\255\2609\300?%w\212\026\316\200\320?\302\375\225\211B7\345?\007\004\002\201@ \340?3\tv\025\276\334\320?\000\000\000\000\000\000\324?\305\271\216Q\234\353\350?\217eP*L\274\277?\327\243p=\n\327\343?\2008\340\361\207\003\276?\341\220\233\214\241\352\275?\347@\242\0256\007\262?\362V\3669\244&\270?\262\204\007\014\340\314\347?L\245R\251T*\325?Ok\266OT\017\312?\374\377\377\377\377\377\307?\304JO-\254\364\324?\220\234\346k\365\354\340?\217\302\365(\\\217\322?\270\030\322y\213!\315?\377\233%\230\304\354\272?\227z2~\273\324\303?\241\344N\321\302\031\260?\223fpM\3426\336?z<\036\217\307\343\341?\322\310;\177\213\323\312?\000\000\000\000\000\000\336?~\331\240\311\227\r\312?\304\373\221\323|\255\316?\327\243p=\n\327\323?&\2736Q\262k\263?\201L\373lg\242\274?\347@\242\0256\007\322?5\301x+\373\034\322?gC\005\242i\017\337?\233L&\223\311d\342?3\tv\025\276\334\300?\000\000\000\000\000\000\304?6h\362e\203&\357?o,\203Ra\342\335?R\270\036\205\353Q\350?\323y\213!\235\267\310?\226\225.%\377\315\302?\347@\242\0256\007\262?*Z8\003B\311\315?V\014\340\314G\331\356?L\245R\251T*\305?\322\310;\177\213\323\312?\376\377\377\377\377\377\332?\013+=\265\260\322\323?\360GN\363\265z\326?\n\327\243p=\n\307?\226{\032a\271\247\261?\242\2700\"\320\017\275?H\264\302\346@\242\305?\3511\177\257\215X\307?V\375.Kx\300\340?\013\207\303\341p8\334?;\177\213\323\232\355\303?\000\000\000\000\000\000\264?\351:Fq\256c\304?\241T\230x?r\312?\000\000\000\000\000\000\320?\226{\032a\271\247\261?\340/\360\342[\177\272?\347@\242\0256\007\322?-\234\001\241\344N\321?\243[,z\3038\341?:\235N\247\323\351\344?\303\227\033b@:\306?\004\000\000\000\000\000\312?5\371\262A\223/\333?\375\221\323|\255\236\315?\024\256G\341z\024\336?\361\370\303\001\217?\274?\302VS\213\326\006\300?\347@\242\0256\007\262?\341\014\010%w\212\266?CY[\305;\371\341?(\225J\245R\251\324?Nk\266OT\017\272?\000\000\000\000\000\000\324?x\373!\201\267\037\322?\241T\230x?r\332?\232\231\231\231\231\231\251?\322y\213!\235\267\270?\201L\373lg\242\274?\347@\242\0256\007\262?\301x+\373\034R\263?\020\004m\256\260\032\341?\356v\273\335n\267\333?E\365\240\221w\376\306?\004\000\000\000\000\000\300?5\371\262A\223/\313?\016\201\033\313\240T\330?\354Q\270\036\205\353\321?\262k\023%\2736\321?E\325;\254\3332\277?\227z2~\273\324\303?~\016\251\t\306[\331?Zy\216}bj\335?L\247\323\351t:\335?\324\203F\336\371[\314?\000\000\000\000\000\000\331?6h\362e\203&\337?`\253g\207\300\215\345?)\\\217\302\365(\314?|\032a\271\247\021\306?\347#4\352\204\337\303?\347@\242\0256\007\302?\241\344N\321\302\031\340?\345\375\374\307\014\256\351?Z,\026\213\305b\341?\310R&\301\256\302\307?\002\000\000\000\000\000\334?\353\030\305\271\216Q\314?\375\221\323|\255\236\335?\000\000\000\000\000\000\000\000D:o1\244\363\266?\275\303\272-\363\021\272?\227z2~\273\324\303?\002\241\344N\321\302\271?\343\357\262\204\007\014\340?\251T*\225J\245\342?Nk\266OT\017\272?\004\000\000\000\000\000\300?[X\351\251\205\225\336?\363\265zv\010\334\330?\327\243p=\n\327\323?D:o1\244\363\266?\363x#\233\363\252\300? \321\n\233\003\211\326?\341\014\010%w\212\326?5\013\022P\263\353\345?\214\305b\261X,\326?E\365\240\221w\376\306?\376\377\377\377\377\377\320?\346:Fq\256c\324?\375\221\323|\255\236\315?\327\243p=\n\327\323?\226{\032a\271\247\261?\341\220\233\214\241\352\275?\251\'\343\267K=\271?\"5\301x+\373\274?\201\216}bj\335\333?O&\223\311d2\331?R&\301\256\302\227\313?\377\377\377\377\377\377\324?\024x\373!\201\267\317?b\342\375\310i\276\326?R\270\036\205\353Q\310?\016x\374\341\200\307\257?\341\220\233\214\241\352\275?\251\'\343\267K=\311?\341\014\010%w\212\306?\272\025\357\344\007s\336?\273\\.\227\313\345\342?\322\310;\177\213\323\312?\000\000\000\000\000\000\324?\177H\340\355\207\004\336?\253g\207\300\215e\340?\354Q\270\036\205\353\321?\2008\340\361\207\003\276?`\340\305\267\3764\274?\347@\242\0256\007\322?\236\242\2053 \224\334?\323v$\007\245\241\342?\312f\263\331l6\333?S&\301\256\302\227\273?\004\000\000\000\000\000\312?\300\333\017\t\274\375\320?\335X\006\245\302\304\333?\270\036\205\353Q\270\236?\226{\032a\271\247\261?cAqaD\240\277?\371\355RO\306o\307?M0\336\312>\207\324?\343\357\262\204\007\014\340?\361\367\373\375~\277\337?<\177\213\323\232\355\263?\002\000\000\000\000\000\322?\013+=\265\260\322\323?u\321E\027]t\341?q=\n\327\243p\315?\2008\340\361\207\003\276?\367\331\316D9\026\264?\013\233\003\211V\330\254?\"5\301x+\373\254?\n\2371\034-H\340?\361\367\373\375~\277\337?\266f\373D\365\240\301?\002\000\000\000\000\000\334?{ja\245\247\026\326?Y\006\245\302\304\373\321?\341z\024\256G\341\342?\225{\032a\271\247\241?`y\274\221\315y\345?Zas \321\n\313?:\244&\030oe\317?\355\216\344\2404T\340?F\247\323\351t:\315?\032y\347oqZ\343?\370\377\377\377\377\377\273?\306(\316u\214\342\334?\340\3062(\025&\336?{\024\256G\341z\324?\361\370\303\001\217?\274?\323\014\356\345\212=\300?\277]\352\311\370\355\322?\353\322c\376^\033\341?\254\307\245o\177e\342?\356v\273\335n\267\333?\303\227\033b@:\306?\376\377\377\377\377\377\317?\305\271\216Q\234\353\310?j\276V\317\016\201\333?\232\231\231\231\231\231\271?\265\372RA\253/\265?E\325;\254\3332\277?\273\324\223\361\333\245\316?\177\257\215X\227\036\343?N\025\210\246=\374\331?\215\307\343\361x<\336?X\341\313\r1 \275?\376\377\377\377\377\377\320?\371\262A\223/\033\344?u\321E\027]t\321?)\\\217\302\365(\344?D:o1\244\363\266?\275\303\272-\363\021\272?H\264\302\346@\242\265?\022\353\322c\376^\273?o\370\363\0373\270\346?\353\365z\275^\257\327?R&\301\256\302\227\313?\001\000\000\000\000\000\330?\021x\373!\201\267\337?\330\352\331!pc\311?{\024\256G\341z\344?\226{\032a\271\247\301?\373:z\356~\201\307?6\007\022\255\2609\300?\032\020J\356\024-\314?\323v$\007\245\241\342?+\026\213\305b\261\330?\315\r1 \035K\311?\000\000\000\000\000\000\344?\345\313\006M\276l\320?*L\274\0379\315\327?{\024\256G\341z\224?\2008\340\361\207\003\276?@t\220\002\226\307\273?\347@\242\0256\007\302?\3511\177\257\215X\307?[Eo\030\'\330\331?\316\347\363\371|>\337?\303\227\033b@:\306?\002\000\000\000\000\000\327?Vzja\245\247\306?\220\234\346k\365\354\320?333333\303?\265\372RA\253/\265?\037\010[M-Z\273?\277]\352\311\370\355\322?=\346\357\265\021\353\322?\233s\205\325\210t\332?L\247\323\351t:\335?\303\227\033b@:\306?\004\000\000\000\000\000\300?B\223/\0334\371\342?G\027]t\321E\307?\315\314\314\314\314\314\334?&\2736Q\262k\263?\341\220\233\214\241\352\275?\347@\242\0256\007\262?\"5\301x+\373\254?O\360\031\303\321\202\344?\004\205B\241P(\304?\315\r1 \035K\311?\370\377\377\377\377\377\273?C\002o?$\360\346?\330\352\331!pc\331?\\\217\302\365(\\\337?\316[\014\351\274\305\300?\377\233%\230\304\354\272?\013\233\003\211V\330\254?\321\302\031\020J\356\264?5\013\022P\263\353\345?\013\205B\241P(\324?6\304\200t,e\302?\001\000\000\000\000\000\335?\024x\373!\201\267\317?\304\373\221\323|\255\336?\000\000\000\000\000\000\000\000\226{\032a\271\247\261?\037\010[M-Z\273?\347@\242\0256\007\302?\341\014\010%w\212\306?\206\030\'\330Y)\342?\331l6\233\315f\343?\266f\373D\365\240\301?\002\000\000\000\000\000\302?\235\353\030\305\271\216\321?G\027]t\321E\327?{\024\256G\341z\264?\361\370\303\001\217?\274?y\212\244\031\334\313\305?\371\355RO\306o\307?\241\344N\321\302\031\320?0N\260\263R\204\340?O&\223\311d2\331?\315\r1 \035K\311?\376\377\377\377\377\377\305?5\371\262A\223/\313?\216eP*L\274\317?R\270\036\205\353Q\310?\322y\213!\235\267\270?|\353O\303!7\271?\273\324\223\361\333\245\316?\362V\3669\244&\310?\310b\321\033\306\t\326?\031\014\006\203\301`\340?\266f\373D\365\240\301?\001\000\000\000\000\000\330?\345\313\006M\276l\320?\231x?r\232\257\325?\270\036\205\353Q\270\256?\2008\340\361\207\003\276?cAqaD\240\277?\016$Zas \321?2\177\257\215X\227\316?\223fpM\3426\336?\007\004\002\201@ \340?;\177\213\323\232\355\303?\376\377\377\377\377\377\325?{ja\245\247\026\326?\221\234\346k\365\354\300?ffffff\326?\357\370\303\001\217?\254?8\2629\257\n\361\264?\347@\242\0256\007\262?\"5\301x+\373\254?\025[^\375.K\330?\013\207\303\341p8\334?\336\371[\234\326l\317?\001\000\000\000\000\200\340?\346:Fq\256c\324?j\276V\317\016\201\333?H\341z\024\256G\321?&\2736Q\262k\263?D\007)`y\274\301?\013\233\003\211V\330\254?\236\242\2053 \224\334?\031\243\236\312\335b\341?\347t:\235N\247\323?\303\227\033b@:\306?\374\377\377\377\377\377\267?\024x\373!\201\267\317?\266zv\010\334X\346?\000\000\000\000\000\000\000\000D:o1\244\363\266?\323\014\356\345\212=\300?Zas \321\n\313?\321\302\031\020J\356\304?s\332\303\237\377\230\341?L\245R\251T*\345?Ok\266OT\017\312?\376\377\377\377\377\377\320?\013+=\265\260\322\323?\000\000\000\000\000\000\340?)\\\217\302\365(\314?D:o1\244\363\266?\237W\205x\212\244\271?\347@\242\0256\007\302?\032\020J\356\024-\314?-#k\253x\'\337?\316\347\363\371|>\337?3\tv\025\276\334\300?\374\377\377\377\377\377\267?\305\271\216Q\234\353\330?\016\201\033\313\240T\330?\000\000\000\000\000\000\320?\316[\014\351\274\305\300?\377\233%\230\304\354\272?\013\233\003\211V\330\274?E\013g@(\271\343?p\240\315\025V#\342?+\026\213\305b\261\330?6\304\200t,e\302?\374\377\377\377\377\377\307?0\0334\371\262A\303?a\342\375\310i\276\346?{\024\256G\341z\204?&\2736Q\262k\263?\266\001d\332g;\263?\251\'\343\267K=\311?\331\347\220\232`\274\305?\334\2404T \232\326?l\265Z\255V\253\345?<\177\213\323\232\355\263?\376\377\377\377\377\377\332?\2448\3271\212s\335?G\027]t\321E\307?\366(\\\217\302\365\330?\225{\032a\271\247\241?\333\316D9\026\024\267?\013\233\003\211V\330\234?\002\241\344N\321\302y?\010\304\237\377\230\301\325?\252\325j\265Z\255\326?3\tv\025\276\334\300?\001\000\000\000\000\000\335?\353\030\305\271\216Q\334?j\276V\317\016\201\313?\327\243p=\n\327\323?\361\370\303\001\217?\274?U\275\303\272-\363\301?Zas \321\n\313?-\234\001\241\344N\321?\037\325!6\360\031\343?\252\325j\265Z\255\326?\324\203F\336\371[\314?\000\000\000\000\000\000\316?{ja\245\247\026\326?\241T\230x?r\312?{\024\256G\341z\324?\016x\374\341\200\307\257?\333\316D9\026\024\267? \321\n\233\003\211\326?5\301x+\373\034\322?/\246\326\275/\031\325?\007\004\002\201@ \340?\331>Q=h\344\315?\001\000\000\000\000\200\340?\035\2438\3271\212\343?~\255\236\035\0027\326?\270\036\205\353Q\270\346?HX\356i\204\345\316?\033\247\257\243\347\356\307?\347@\242\0256\007\262?\"5\301x+\373\254?l3\037e;\222\343?\304f\263\331l6\313?\271!\006\244c)\323?\001\000\000\000\000\200\340?x\373!\201\267\037\322?\353\331!pc\031\324?\270\036\205\353Q\270\276?\016x\374\341\200\307\257?D\007)`y\274\321?\347@\242\0256\007\262?\362V\3669\244&\270?\201\216}bj\335\333?\312f\263\331l6\333?\277\334\020\003\322\261\324?\004\000\000\000\000\000\312?Vzja\245\247\266?~\255\236\035\0027\326?{\024\256G\341z\244?\357\370\303\001\217?\254?eAqaD\240\257?\013\233\003\211V\330\254?\341\014\010%w\212\246?\366\353\254\024!h\323?/\026\213\305b\261\350?\271!\006\244c)\303?\001\000\000\000\000\000\335?\345\313\006M\276l\320?\006\245\302\304\373\221\323?R\270\036\205\353Q\310?\226{\032a\271\247\261?\037\010[M-Z\273?6\007\022\255\2609\300?2\177\257\215X\227\316?\233s\205\325\210t\332?\031\014\006\203\301`\340?\261\253\360\345\206\030\300?\374\377\377\377\377\377\307?\235\353\030\305\271\216\321?\217eP*L\274\277?\303\365(\\\217\302\345?C:o1\244\363\306?}\204F\235\360{\342?\013\233\003\211V\330\254?\002\241\344N\321\302\231?V\375.Kx\300\340?l6\233\315f\263\331?\2272\tv\025\276\334?\002\000\000\000\000\000\314?\353\030\305\271\216Q\314?\363\265zv\010\334\330?{\024\256G\341z\204?\361\370\303\001\217?\274?@t\220\002\226\307\273?\016$Zas \321?\2766b]z\314\337?L+E\010\332\\\341?\031\215F\243\321h\344?;\177\213\323\232\355\303?\004\000\000\000\000\000\312?"
      }
    }
  }
}
node {
  name: "normalize_element/component_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1155
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 1155
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "TensorSliceDataset"
  op: "TensorSliceDataset"
  input: "normalize_element/component_0"
  input: "normalize_element/component_1"
  device: "/device:CPU:0"
  attr {
    key: "Toutput_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "buffer_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 33
      }
    }
  }
}
node {
  name: "seed"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "seed2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "ShuffleDataset"
  op: "ShuffleDataset"
  input: "TensorSliceDataset"
  input: "buffer_size"
  input: "seed"
  input: "seed2"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "reshuffle_each_iteration"
    value {
      b: true
    }
  }
}
node {
  name: "batch_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 33
      }
    }
  }
}
node {
  name: "drop_remainder"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "BatchDatasetV2"
  op: "BatchDatasetV2"
  input: "ShuffleDataset"
  input: "batch_size"
  input: "drop_remainder"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "parallel_copy"
    value {
      b: false
    }
  }
}
node {
  name: "optimizations"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 3
          }
        }
        string_val: "map_and_batch_fusion"
        string_val: "noop_elimination"
        string_val: "shuffle_and_repeat_fusion"
      }
    }
  }
}
node {
  name: "OptimizeDataset"
  op: "OptimizeDataset"
  input: "BatchDatasetV2"
  input: "optimizations"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "optimization_configs"
    value {
      list {
        s: "map_vectorization:use_choose_fastest:false"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
}
node {
  name: "ModelDataset"
  op: "ModelDataset"
  input: "OptimizeDataset"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "algorithm"
    value {
      i: 0
    }
  }
  attr {
    key: "cpu_budget"
    value {
      i: 0
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
}
node {
  name: "IteratorV2"
  op: "IteratorV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MakeIterator"
  op: "MakeIterator"
  input: "ModelDataset"
  input: "IteratorV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@IteratorV2"
      }
    }
  }
}
node {
  name: "IteratorToStringHandle"
  op: "IteratorToStringHandle"
  input: "IteratorV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "IteratorGetNext"
  op: "IteratorGetNext"
  input: "IteratorV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
}
node {
  name: "input_1"
  op: "Placeholder"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 11
        }
      }
    }
  }
}
node {
  name: "dense_features/Cast"
  op: "Cast"
  input: "input_1"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "dense_features/x_1/Cast"
  op: "Cast"
  input: "dense_features/Cast"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "dense_features/x_1/Shape"
  op: "Shape"
  input: "dense_features/x_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dense_features/x_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dense_features/x_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dense_features/x_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dense_features/x_1/strided_slice"
  op: "StridedSlice"
  input: "dense_features/x_1/Shape"
  input: "dense_features/x_1/strided_slice/stack"
  input: "dense_features/x_1/strided_slice/stack_1"
  input: "dense_features/x_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dense_features/x_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 11
      }
    }
  }
}
node {
  name: "dense_features/x_1/Reshape/shape"
  op: "Pack"
  input: "dense_features/x_1/strided_slice"
  input: "dense_features/x_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dense_features/x_1/Reshape"
  op: "Reshape"
  input: "dense_features/x_1/Cast"
  input: "dense_features/x_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "dense_features/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dense_features/concat/concat"
  op: "Identity"
  input: "dense_features/x_1/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "dense_1/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\013\000\000\000\334\000\000\000"
      }
    }
  }
}
node {
  name: "dense_1/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: -0.16116459280507606
      }
    }
  }
}
node {
  name: "dense_1/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 0.16116459280507606
      }
    }
  }
}
node {
  name: "dense_1/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dense_1/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
          dim {
            size: 220
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dense_1/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dense_1/kernel/Initializer/random_uniform/max"
  input: "dense_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dense_1/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dense_1/kernel/Initializer/random_uniform/RandomUniform"
  input: "dense_1/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
          dim {
            size: 220
          }
        }
      }
    }
  }
}
node {
  name: "dense_1/kernel/Initializer/random_uniform"
  op: "Add"
  input: "dense_1/kernel/Initializer/random_uniform/mul"
  input: "dense_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
          dim {
            size: 220
          }
        }
      }
    }
  }
}
node {
  name: "dense_1/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 11
        }
        dim {
          size: 220
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dense_1/kernel"
    }
  }
}
node {
  name: "dense_1/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dense_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dense_1/kernel/Assign"
  op: "AssignVariableOp"
  input: "dense_1/kernel"
  input: "dense_1/kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "dense_1/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
          dim {
            size: 220
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "dense_1/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 220
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 220
          }
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "dense_1/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 220
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dense_1/bias"
    }
  }
}
node {
  name: "dense_1/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dense_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dense_1/bias/Assign"
  op: "AssignVariableOp"
  input: "dense_1/bias"
  input: "dense_1/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "dense_1/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 220
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "dense_1/Cast"
  op: "Cast"
  input: "dense_features/concat/concat"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "dense_1/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
          dim {
            size: 220
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "dense_1/MatMul"
  op: "MatMul"
  input: "dense_1/Cast"
  input: "dense_1/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 220
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_1/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 220
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "dense_1/BiasAdd"
  op: "BiasAdd"
  input: "dense_1/MatMul"
  input: "dense_1/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 220
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dense_1/Relu"
  op: "Relu"
  input: "dense_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 220
          }
        }
      }
    }
  }
}
node {
  name: "dense_2/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\334\000\000\000^\001\000\000"
      }
    }
  }
}
node {
  name: "dense_2/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: -0.10259783520851541
      }
    }
  }
}
node {
  name: "dense_2/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 0.10259783520851541
      }
    }
  }
}
node {
  name: "dense_2/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dense_2/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 220
          }
          dim {
            size: 350
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dense_2/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dense_2/kernel/Initializer/random_uniform/max"
  input: "dense_2/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dense_2/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dense_2/kernel/Initializer/random_uniform/RandomUniform"
  input: "dense_2/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 220
          }
          dim {
            size: 350
          }
        }
      }
    }
  }
}
node {
  name: "dense_2/kernel/Initializer/random_uniform"
  op: "Add"
  input: "dense_2/kernel/Initializer/random_uniform/mul"
  input: "dense_2/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 220
          }
          dim {
            size: 350
          }
        }
      }
    }
  }
}
node {
  name: "dense_2/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 220
        }
        dim {
          size: 350
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dense_2/kernel"
    }
  }
}
node {
  name: "dense_2/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dense_2/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dense_2/kernel/Assign"
  op: "AssignVariableOp"
  input: "dense_2/kernel"
  input: "dense_2/kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "dense_2/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_2/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 220
          }
          dim {
            size: 350
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "dense_2/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 350
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 350
          }
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "dense_2/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 350
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dense_2/bias"
    }
  }
}
node {
  name: "dense_2/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dense_2/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dense_2/bias/Assign"
  op: "AssignVariableOp"
  input: "dense_2/bias"
  input: "dense_2/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "dense_2/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_2/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 350
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "dense_2/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_2/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 220
          }
          dim {
            size: 350
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "dense_2/MatMul"
  op: "MatMul"
  input: "dense_1/Relu"
  input: "dense_2/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 350
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_2/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_2/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 350
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "dense_2/BiasAdd"
  op: "BiasAdd"
  input: "dense_2/MatMul"
  input: "dense_2/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 350
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dense_2/Relu"
  op: "Relu"
  input: "dense_2/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 350
          }
        }
      }
    }
  }
}
node {
  name: "dense_3/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "^\001\000\000^\001\000\000"
      }
    }
  }
}
node {
  name: "dense_3/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: -0.09258200997725514
      }
    }
  }
}
node {
  name: "dense_3/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 0.09258200997725514
      }
    }
  }
}
node {
  name: "dense_3/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dense_3/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 350
          }
          dim {
            size: 350
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dense_3/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dense_3/kernel/Initializer/random_uniform/max"
  input: "dense_3/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dense_3/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dense_3/kernel/Initializer/random_uniform/RandomUniform"
  input: "dense_3/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 350
          }
          dim {
            size: 350
          }
        }
      }
    }
  }
}
node {
  name: "dense_3/kernel/Initializer/random_uniform"
  op: "Add"
  input: "dense_3/kernel/Initializer/random_uniform/mul"
  input: "dense_3/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 350
          }
          dim {
            size: 350
          }
        }
      }
    }
  }
}
node {
  name: "dense_3/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 350
        }
        dim {
          size: 350
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dense_3/kernel"
    }
  }
}
node {
  name: "dense_3/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dense_3/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dense_3/kernel/Assign"
  op: "AssignVariableOp"
  input: "dense_3/kernel"
  input: "dense_3/kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "dense_3/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_3/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 350
          }
          dim {
            size: 350
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "dense_3/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 350
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 350
          }
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "dense_3/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 350
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dense_3/bias"
    }
  }
}
node {
  name: "dense_3/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dense_3/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dense_3/bias/Assign"
  op: "AssignVariableOp"
  input: "dense_3/bias"
  input: "dense_3/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "dense_3/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_3/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 350
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "dense_3/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_3/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 350
          }
          dim {
            size: 350
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "dense_3/MatMul"
  op: "MatMul"
  input: "dense_2/Relu"
  input: "dense_3/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 350
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_3/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_3/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 350
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "dense_3/BiasAdd"
  op: "BiasAdd"
  input: "dense_3/MatMul"
  input: "dense_3/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 350
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dense_3/Relu"
  op: "Relu"
  input: "dense_3/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 350
          }
        }
      }
    }
  }
}
node {
  name: "dense_4/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_4/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "^\001\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "dense_4/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_4/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: -0.12909944487358055
      }
    }
  }
}
node {
  name: "dense_4/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_4/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 0.12909944487358055
      }
    }
  }
}
node {
  name: "dense_4/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dense_4/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_4/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 350
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dense_4/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dense_4/kernel/Initializer/random_uniform/max"
  input: "dense_4/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_4/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dense_4/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dense_4/kernel/Initializer/random_uniform/RandomUniform"
  input: "dense_4/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_4/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 350
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dense_4/kernel/Initializer/random_uniform"
  op: "Add"
  input: "dense_4/kernel/Initializer/random_uniform/mul"
  input: "dense_4/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_4/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 350
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dense_4/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_4/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 350
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dense_4/kernel"
    }
  }
}
node {
  name: "dense_4/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dense_4/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dense_4/kernel/Assign"
  op: "AssignVariableOp"
  input: "dense_4/kernel"
  input: "dense_4/kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "dense_4/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_4/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 350
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "dense_4/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_4/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 10
          }
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "dense_4/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_4/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dense_4/bias"
    }
  }
}
node {
  name: "dense_4/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dense_4/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dense_4/bias/Assign"
  op: "AssignVariableOp"
  input: "dense_4/bias"
  input: "dense_4/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "dense_4/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_4/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "dense_4/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_4/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 350
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "dense_4/MatMul"
  op: "MatMul"
  input: "dense_3/Relu"
  input: "dense_4/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_4/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_4/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "dense_4/BiasAdd"
  op: "BiasAdd"
  input: "dense_4/MatMul"
  input: "dense_4/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dense_4/Softmax"
  op: "Softmax"
  input: "dense_4/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "model/dense_features/x/Cast"
  op: "Cast"
  input: "IteratorGetNext"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "model/dense_features/x/Shape"
  op: "Shape"
  input: "model/dense_features/x/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "model/dense_features/x/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "model/dense_features/x/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "model/dense_features/x/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "model/dense_features/x/strided_slice"
  op: "StridedSlice"
  input: "model/dense_features/x/Shape"
  input: "model/dense_features/x/strided_slice/stack"
  input: "model/dense_features/x/strided_slice/stack_1"
  input: "model/dense_features/x/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "model/dense_features/x/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 11
      }
    }
  }
}
node {
  name: "model/dense_features/x/Reshape/shape"
  op: "Pack"
  input: "model/dense_features/x/strided_slice"
  input: "model/dense_features/x/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "model/dense_features/x/Reshape"
  op: "Reshape"
  input: "model/dense_features/x/Cast"
  input: "model/dense_features/x/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "model/dense_features/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "model/dense_features/concat/concat"
  op: "Identity"
  input: "model/dense_features/x/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "model/dense_1/Cast"
  op: "Cast"
  input: "model/dense_features/concat/concat"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 11
          }
        }
      }
    }
  }
}
node {
  name: "model/dense_1/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
          dim {
            size: 220
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "model/dense_1/MatMul"
  op: "MatMul"
  input: "model/dense_1/Cast"
  input: "model/dense_1/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 220
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "model/dense_1/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 220
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "model/dense_1/BiasAdd"
  op: "BiasAdd"
  input: "model/dense_1/MatMul"
  input: "model/dense_1/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 220
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "model/dense_1/Relu"
  op: "Relu"
  input: "model/dense_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 220
          }
        }
      }
    }
  }
}
node {
  name: "model/dense_2/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_2/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 220
          }
          dim {
            size: 350
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "model/dense_2/MatMul"
  op: "MatMul"
  input: "model/dense_1/Relu"
  input: "model/dense_2/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 350
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "model/dense_2/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_2/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 350
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "model/dense_2/BiasAdd"
  op: "BiasAdd"
  input: "model/dense_2/MatMul"
  input: "model/dense_2/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 350
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "model/dense_2/Relu"
  op: "Relu"
  input: "model/dense_2/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 350
          }
        }
      }
    }
  }
}
node {
  name: "model/dense_3/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_3/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 350
          }
          dim {
            size: 350
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "model/dense_3/MatMul"
  op: "MatMul"
  input: "model/dense_2/Relu"
  input: "model/dense_3/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 350
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "model/dense_3/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_3/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 350
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "model/dense_3/BiasAdd"
  op: "BiasAdd"
  input: "model/dense_3/MatMul"
  input: "model/dense_3/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 350
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "model/dense_3/Relu"
  op: "Relu"
  input: "model/dense_3/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 350
          }
        }
      }
    }
  }
}
node {
  name: "model/dense_4/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_4/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 350
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "model/dense_4/MatMul"
  op: "MatMul"
  input: "model/dense_3/Relu"
  input: "model/dense_4/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "model/dense_4/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_4/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "model/dense_4/BiasAdd"
  op: "BiasAdd"
  input: "model/dense_4/MatMul"
  input: "model/dense_4/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "model/dense_4/Softmax"
  op: "Softmax"
  input: "model/dense_4/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "ArgMax/dimension"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ArgMax"
  op: "ArgMax"
  input: "model/dense_4/Softmax"
  input: "ArgMax/dimension"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "Shape"
  op: "Shape"
  input: "model/dense_4/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "SparseSoftmaxCrossEntropyWithLogits/Shape"
  op: "Shape"
  input: "IteratorGetNext:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"
  op: "SparseSoftmaxCrossEntropyWithLogits"
  input: "model/dense_4/BiasAdd"
  input: "IteratorGetNext:1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tlabels"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Mean"
  op: "Mean"
  input: "SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"
  input: "Const"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ones"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 1.0
      }
    }
  }
}
node {
  name: "Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Reshape"
  op: "Reshape"
  input: "ones"
  input: "Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Shape_1"
  op: "Shape"
  input: "SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Tile"
  op: "Tile"
  input: "Reshape"
  input: "Shape_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Shape_2"
  op: "Shape"
  input: "SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Shape_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Prod"
  op: "Prod"
  input: "Shape_2"
  input: "Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Prod_1"
  op: "Prod"
  input: "Shape_3"
  input: "Const_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Maximum/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Maximum"
  op: "Maximum"
  input: "Prod_1"
  input: "Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "floordiv"
  op: "FloorDiv"
  input: "Prod"
  input: "Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Cast"
  op: "Cast"
  input: "floordiv"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "truediv"
  op: "RealDiv"
  input: "Tile"
  input: "Cast"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "PreventGradient"
  op: "PreventGradient"
  input: "SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits:1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "message"
    value {
      s: "Currently there is no way to take the second derivative of sparse_softmax_cross_entropy_with_logits due to the fused implementation\'s interaction with tf.gradients()"
    }
  }
}
node {
  name: "ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "ExpandDims"
  op: "ExpandDims"
  input: "truediv"
  input: "ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "mul"
  op: "Mul"
  input: "ExpandDims"
  input: "PreventGradient"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "BiasAddGrad"
  op: "BiasAddGrad"
  input: "mul"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "MatMul"
  op: "MatMul"
  input: "mul"
  input: "model/dense_4/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 350
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "MatMul_1"
  op: "MatMul"
  input: "model/dense_3/Relu"
  input: "mul"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 350
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "ReluGrad"
  op: "ReluGrad"
  input: "MatMul"
  input: "model/dense_3/Relu"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 350
          }
        }
      }
    }
  }
}
node {
  name: "BiasAddGrad_1"
  op: "BiasAddGrad"
  input: "ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 350
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "MatMul_2"
  op: "MatMul"
  input: "ReluGrad"
  input: "model/dense_3/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 350
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "MatMul_3"
  op: "MatMul"
  input: "model/dense_2/Relu"
  input: "ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 350
          }
          dim {
            size: 350
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "ReluGrad_1"
  op: "ReluGrad"
  input: "MatMul_2"
  input: "model/dense_2/Relu"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 350
          }
        }
      }
    }
  }
}
node {
  name: "BiasAddGrad_2"
  op: "BiasAddGrad"
  input: "ReluGrad_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 350
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "MatMul_4"
  op: "MatMul"
  input: "ReluGrad_1"
  input: "model/dense_2/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 220
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "MatMul_5"
  op: "MatMul"
  input: "model/dense_1/Relu"
  input: "ReluGrad_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 220
          }
          dim {
            size: 350
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "ReluGrad_2"
  op: "ReluGrad"
  input: "MatMul_4"
  input: "model/dense_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 220
          }
        }
      }
    }
  }
}
node {
  name: "BiasAddGrad_3"
  op: "BiasAddGrad"
  input: "ReluGrad_2"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 220
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "MatMul_6"
  op: "MatMul"
  input: "model/dense_1/Cast"
  input: "ReluGrad_2"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
          dim {
            size: 220
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/beta_1/Initializer/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "Adam/beta_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "Adam/beta_1"
    }
  }
}
node {
  name: "Adam/beta_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "Adam/beta_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/beta_1/Assign"
  op: "AssignVariableOp"
  input: "Adam/beta_1"
  input: "Adam/beta_1/Initializer/initial_value"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/beta_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "Adam/beta_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/beta_2/Initializer/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "Adam/beta_2"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "Adam/beta_2"
    }
  }
}
node {
  name: "Adam/beta_2/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "Adam/beta_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/beta_2/Assign"
  op: "AssignVariableOp"
  input: "Adam/beta_2"
  input: "Adam/beta_2/Initializer/initial_value"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/beta_2/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "Adam/beta_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/decay/Initializer/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/decay"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Adam/decay"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/decay"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "Adam/decay"
    }
  }
}
node {
  name: "Adam/decay/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "Adam/decay"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/decay/Assign"
  op: "AssignVariableOp"
  input: "Adam/decay"
  input: "Adam/decay/Initializer/initial_value"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/decay/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "Adam/decay"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/learning_rate/Initializer/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/learning_rate"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "Adam/learning_rate"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/learning_rate"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "Adam/learning_rate"
    }
  }
}
node {
  name: "Adam/learning_rate/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "Adam/learning_rate"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/learning_rate/Assign"
  op: "AssignVariableOp"
  input: "Adam/learning_rate"
  input: "Adam/learning_rate/Initializer/initial_value"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/learning_rate/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "Adam/learning_rate"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/dense_1/kernel/m/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\013\000\000\000\334\000\000\000"
      }
    }
  }
}
node {
  name: "Adam/dense_1/kernel/m/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "Adam/dense_1/kernel/m/Initializer/zeros"
  op: "Fill"
  input: "Adam/dense_1/kernel/m/Initializer/zeros/shape_as_tensor"
  input: "Adam/dense_1/kernel/m/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
          dim {
            size: 220
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Adam/dense_1/kernel/m"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 11
        }
        dim {
          size: 220
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "Adam/dense_1/kernel/m"
    }
  }
}
node {
  name: "Adam/dense_1/kernel/m/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "Adam/dense_1/kernel/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/dense_1/kernel/m/Assign"
  op: "AssignVariableOp"
  input: "Adam/dense_1/kernel/m"
  input: "Adam/dense_1/kernel/m/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "Adam/dense_1/kernel/m/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "Adam/dense_1/kernel/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
          dim {
            size: 220
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "Adam/dense_1/bias/m/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 220
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 220
          }
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "Adam/dense_1/bias/m"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 220
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "Adam/dense_1/bias/m"
    }
  }
}
node {
  name: "Adam/dense_1/bias/m/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "Adam/dense_1/bias/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/dense_1/bias/m/Assign"
  op: "AssignVariableOp"
  input: "Adam/dense_1/bias/m"
  input: "Adam/dense_1/bias/m/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "Adam/dense_1/bias/m/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "Adam/dense_1/bias/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 220
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "Adam/dense_2/kernel/m/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\334\000\000\000^\001\000\000"
      }
    }
  }
}
node {
  name: "Adam/dense_2/kernel/m/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "Adam/dense_2/kernel/m/Initializer/zeros"
  op: "Fill"
  input: "Adam/dense_2/kernel/m/Initializer/zeros/shape_as_tensor"
  input: "Adam/dense_2/kernel/m/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 220
          }
          dim {
            size: 350
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Adam/dense_2/kernel/m"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 220
        }
        dim {
          size: 350
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "Adam/dense_2/kernel/m"
    }
  }
}
node {
  name: "Adam/dense_2/kernel/m/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "Adam/dense_2/kernel/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/dense_2/kernel/m/Assign"
  op: "AssignVariableOp"
  input: "Adam/dense_2/kernel/m"
  input: "Adam/dense_2/kernel/m/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "Adam/dense_2/kernel/m/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "Adam/dense_2/kernel/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 220
          }
          dim {
            size: 350
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "Adam/dense_2/bias/m/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 350
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 350
          }
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "Adam/dense_2/bias/m"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 350
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "Adam/dense_2/bias/m"
    }
  }
}
node {
  name: "Adam/dense_2/bias/m/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "Adam/dense_2/bias/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/dense_2/bias/m/Assign"
  op: "AssignVariableOp"
  input: "Adam/dense_2/bias/m"
  input: "Adam/dense_2/bias/m/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "Adam/dense_2/bias/m/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "Adam/dense_2/bias/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 350
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "Adam/dense_3/kernel/m/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "^\001\000\000^\001\000\000"
      }
    }
  }
}
node {
  name: "Adam/dense_3/kernel/m/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "Adam/dense_3/kernel/m/Initializer/zeros"
  op: "Fill"
  input: "Adam/dense_3/kernel/m/Initializer/zeros/shape_as_tensor"
  input: "Adam/dense_3/kernel/m/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 350
          }
          dim {
            size: 350
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Adam/dense_3/kernel/m"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 350
        }
        dim {
          size: 350
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "Adam/dense_3/kernel/m"
    }
  }
}
node {
  name: "Adam/dense_3/kernel/m/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "Adam/dense_3/kernel/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/dense_3/kernel/m/Assign"
  op: "AssignVariableOp"
  input: "Adam/dense_3/kernel/m"
  input: "Adam/dense_3/kernel/m/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "Adam/dense_3/kernel/m/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "Adam/dense_3/kernel/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 350
          }
          dim {
            size: 350
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "Adam/dense_3/bias/m/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 350
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 350
          }
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "Adam/dense_3/bias/m"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 350
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "Adam/dense_3/bias/m"
    }
  }
}
node {
  name: "Adam/dense_3/bias/m/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "Adam/dense_3/bias/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/dense_3/bias/m/Assign"
  op: "AssignVariableOp"
  input: "Adam/dense_3/bias/m"
  input: "Adam/dense_3/bias/m/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "Adam/dense_3/bias/m/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "Adam/dense_3/bias/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 350
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "Adam/dense_4/kernel/m/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_4/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "^\001\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "Adam/dense_4/kernel/m/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_4/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "Adam/dense_4/kernel/m/Initializer/zeros"
  op: "Fill"
  input: "Adam/dense_4/kernel/m/Initializer/zeros/shape_as_tensor"
  input: "Adam/dense_4/kernel/m/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_4/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 350
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Adam/dense_4/kernel/m"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_4/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 350
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "Adam/dense_4/kernel/m"
    }
  }
}
node {
  name: "Adam/dense_4/kernel/m/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "Adam/dense_4/kernel/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_4/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/dense_4/kernel/m/Assign"
  op: "AssignVariableOp"
  input: "Adam/dense_4/kernel/m"
  input: "Adam/dense_4/kernel/m/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "Adam/dense_4/kernel/m/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "Adam/dense_4/kernel/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_4/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 350
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "Adam/dense_4/bias/m/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_4/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 10
          }
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "Adam/dense_4/bias/m"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_4/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "Adam/dense_4/bias/m"
    }
  }
}
node {
  name: "Adam/dense_4/bias/m/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "Adam/dense_4/bias/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_4/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/dense_4/bias/m/Assign"
  op: "AssignVariableOp"
  input: "Adam/dense_4/bias/m"
  input: "Adam/dense_4/bias/m/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "Adam/dense_4/bias/m/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "Adam/dense_4/bias/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_4/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "Adam/dense_1/kernel/v/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\013\000\000\000\334\000\000\000"
      }
    }
  }
}
node {
  name: "Adam/dense_1/kernel/v/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "Adam/dense_1/kernel/v/Initializer/zeros"
  op: "Fill"
  input: "Adam/dense_1/kernel/v/Initializer/zeros/shape_as_tensor"
  input: "Adam/dense_1/kernel/v/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
          dim {
            size: 220
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Adam/dense_1/kernel/v"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 11
        }
        dim {
          size: 220
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "Adam/dense_1/kernel/v"
    }
  }
}
node {
  name: "Adam/dense_1/kernel/v/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "Adam/dense_1/kernel/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/dense_1/kernel/v/Assign"
  op: "AssignVariableOp"
  input: "Adam/dense_1/kernel/v"
  input: "Adam/dense_1/kernel/v/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "Adam/dense_1/kernel/v/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "Adam/dense_1/kernel/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 11
          }
          dim {
            size: 220
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "Adam/dense_1/bias/v/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 220
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 220
          }
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "Adam/dense_1/bias/v"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 220
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "Adam/dense_1/bias/v"
    }
  }
}
node {
  name: "Adam/dense_1/bias/v/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "Adam/dense_1/bias/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/dense_1/bias/v/Assign"
  op: "AssignVariableOp"
  input: "Adam/dense_1/bias/v"
  input: "Adam/dense_1/bias/v/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "Adam/dense_1/bias/v/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "Adam/dense_1/bias/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 220
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "Adam/dense_2/kernel/v/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\334\000\000\000^\001\000\000"
      }
    }
  }
}
node {
  name: "Adam/dense_2/kernel/v/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "Adam/dense_2/kernel/v/Initializer/zeros"
  op: "Fill"
  input: "Adam/dense_2/kernel/v/Initializer/zeros/shape_as_tensor"
  input: "Adam/dense_2/kernel/v/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 220
          }
          dim {
            size: 350
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Adam/dense_2/kernel/v"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 220
        }
        dim {
          size: 350
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "Adam/dense_2/kernel/v"
    }
  }
}
node {
  name: "Adam/dense_2/kernel/v/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "Adam/dense_2/kernel/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/dense_2/kernel/v/Assign"
  op: "AssignVariableOp"
  input: "Adam/dense_2/kernel/v"
  input: "Adam/dense_2/kernel/v/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "Adam/dense_2/kernel/v/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "Adam/dense_2/kernel/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 220
          }
          dim {
            size: 350
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "Adam/dense_2/bias/v/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 350
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 350
          }
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "Adam/dense_2/bias/v"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 350
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "Adam/dense_2/bias/v"
    }
  }
}
node {
  name: "Adam/dense_2/bias/v/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "Adam/dense_2/bias/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/dense_2/bias/v/Assign"
  op: "AssignVariableOp"
  input: "Adam/dense_2/bias/v"
  input: "Adam/dense_2/bias/v/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "Adam/dense_2/bias/v/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "Adam/dense_2/bias/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 350
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "Adam/dense_3/kernel/v/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "^\001\000\000^\001\000\000"
      }
    }
  }
}
node {
  name: "Adam/dense_3/kernel/v/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "Adam/dense_3/kernel/v/Initializer/zeros"
  op: "Fill"
  input: "Adam/dense_3/kernel/v/Initializer/zeros/shape_as_tensor"
  input: "Adam/dense_3/kernel/v/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 350
          }
          dim {
            size: 350
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Adam/dense_3/kernel/v"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 350
        }
        dim {
          size: 350
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "Adam/dense_3/kernel/v"
    }
  }
}
node {
  name: "Adam/dense_3/kernel/v/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "Adam/dense_3/kernel/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/dense_3/kernel/v/Assign"
  op: "AssignVariableOp"
  input: "Adam/dense_3/kernel/v"
  input: "Adam/dense_3/kernel/v/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "Adam/dense_3/kernel/v/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "Adam/dense_3/kernel/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 350
          }
          dim {
            size: 350
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "Adam/dense_3/bias/v/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 350
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 350
          }
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "Adam/dense_3/bias/v"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 350
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "Adam/dense_3/bias/v"
    }
  }
}
node {
  name: "Adam/dense_3/bias/v/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "Adam/dense_3/bias/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/dense_3/bias/v/Assign"
  op: "AssignVariableOp"
  input: "Adam/dense_3/bias/v"
  input: "Adam/dense_3/bias/v/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "Adam/dense_3/bias/v/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "Adam/dense_3/bias/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 350
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "Adam/dense_4/kernel/v/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_4/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "^\001\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "Adam/dense_4/kernel/v/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_4/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "Adam/dense_4/kernel/v/Initializer/zeros"
  op: "Fill"
  input: "Adam/dense_4/kernel/v/Initializer/zeros/shape_as_tensor"
  input: "Adam/dense_4/kernel/v/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_4/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 350
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Adam/dense_4/kernel/v"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_4/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 350
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "Adam/dense_4/kernel/v"
    }
  }
}
node {
  name: "Adam/dense_4/kernel/v/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "Adam/dense_4/kernel/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_4/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/dense_4/kernel/v/Assign"
  op: "AssignVariableOp"
  input: "Adam/dense_4/kernel/v"
  input: "Adam/dense_4/kernel/v/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "Adam/dense_4/kernel/v/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "Adam/dense_4/kernel/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_4/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 350
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "Adam/dense_4/bias/v/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_4/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 10
          }
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "Adam/dense_4/bias/v"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_4/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "Adam/dense_4/bias/v"
    }
  }
}
node {
  name: "Adam/dense_4/bias/v/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "Adam/dense_4/bias/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_4/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/dense_4/bias/v/Assign"
  op: "AssignVariableOp"
  input: "Adam/dense_4/bias/v"
  input: "Adam/dense_4/bias/v/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "Adam/dense_4/bias/v/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "Adam/dense_4/bias/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_4/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "Adam/Cast/ReadVariableOp"
  op: "ReadVariableOp"
  input: "Adam/learning_rate"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/Cast"
  op: "Cast"
  input: "Adam/Cast/ReadVariableOp"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/Identity"
  op: "Identity"
  input: "Adam/Cast"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "Adam/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "Adam/add"
  op: "AddV2"
  input: "Adam/ReadVariableOp"
  input: "Adam/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/Cast_1"
  op: "Cast"
  input: "Adam/add"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/Cast_2/ReadVariableOp"
  op: "ReadVariableOp"
  input: "Adam/beta_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/Cast_2"
  op: "Cast"
  input: "Adam/Cast_2/ReadVariableOp"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/Identity_1"
  op: "Identity"
  input: "Adam/Cast_2"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/Cast_3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "Adam/beta_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/Cast_3"
  op: "Cast"
  input: "Adam/Cast_3/ReadVariableOp"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/Identity_2"
  op: "Identity"
  input: "Adam/Cast_3"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/Pow"
  op: "Pow"
  input: "Adam/Identity_1"
  input: "Adam/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/Pow_1"
  op: "Pow"
  input: "Adam/Identity_2"
  input: "Adam/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 1.0
      }
    }
  }
}
node {
  name: "Adam/sub"
  op: "Sub"
  input: "Adam/sub/x"
  input: "Adam/Pow_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/Sqrt"
  op: "Sqrt"
  input: "Adam/sub"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/sub_1/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 1.0
      }
    }
  }
}
node {
  name: "Adam/sub_1"
  op: "Sub"
  input: "Adam/sub_1/x"
  input: "Adam/Pow"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/truediv"
  op: "RealDiv"
  input: "Adam/Sqrt"
  input: "Adam/sub_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/mul"
  op: "Mul"
  input: "Adam/Identity"
  input: "Adam/truediv"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 1e-07
      }
    }
  }
}
node {
  name: "Adam/sub_2/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 1.0
      }
    }
  }
}
node {
  name: "Adam/sub_2"
  op: "Sub"
  input: "Adam/sub_2/x"
  input: "Adam/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/sub_3/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 1.0
      }
    }
  }
}
node {
  name: "Adam/sub_3"
  op: "Sub"
  input: "Adam/sub_3/x"
  input: "Adam/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/Adam/update_dense_1/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "dense_1/kernel"
  input: "Adam/dense_1/kernel/m"
  input: "Adam/dense_1/kernel/v"
  input: "Adam/Pow"
  input: "Adam/Pow_1"
  input: "Adam/Identity"
  input: "Adam/Identity_1"
  input: "Adam/Identity_2"
  input: "Adam/Const"
  input: "MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/Adam/update_dense_1/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "dense_1/bias"
  input: "Adam/dense_1/bias/m"
  input: "Adam/dense_1/bias/v"
  input: "Adam/Pow"
  input: "Adam/Pow_1"
  input: "Adam/Identity"
  input: "Adam/Identity_1"
  input: "Adam/Identity_2"
  input: "Adam/Const"
  input: "BiasAddGrad_3"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/Adam/update_dense_2/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "dense_2/kernel"
  input: "Adam/dense_2/kernel/m"
  input: "Adam/dense_2/kernel/v"
  input: "Adam/Pow"
  input: "Adam/Pow_1"
  input: "Adam/Identity"
  input: "Adam/Identity_1"
  input: "Adam/Identity_2"
  input: "Adam/Const"
  input: "MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/Adam/update_dense_2/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "dense_2/bias"
  input: "Adam/dense_2/bias/m"
  input: "Adam/dense_2/bias/v"
  input: "Adam/Pow"
  input: "Adam/Pow_1"
  input: "Adam/Identity"
  input: "Adam/Identity_1"
  input: "Adam/Identity_2"
  input: "Adam/Const"
  input: "BiasAddGrad_2"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/Adam/update_dense_3/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "dense_3/kernel"
  input: "Adam/dense_3/kernel/m"
  input: "Adam/dense_3/kernel/v"
  input: "Adam/Pow"
  input: "Adam/Pow_1"
  input: "Adam/Identity"
  input: "Adam/Identity_1"
  input: "Adam/Identity_2"
  input: "Adam/Const"
  input: "MatMul_3"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/Adam/update_dense_3/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "dense_3/bias"
  input: "Adam/dense_3/bias/m"
  input: "Adam/dense_3/bias/v"
  input: "Adam/Pow"
  input: "Adam/Pow_1"
  input: "Adam/Identity"
  input: "Adam/Identity_1"
  input: "Adam/Identity_2"
  input: "Adam/Const"
  input: "BiasAddGrad_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/Adam/update_dense_4/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "dense_4/kernel"
  input: "Adam/dense_4/kernel/m"
  input: "Adam/dense_4/kernel/v"
  input: "Adam/Pow"
  input: "Adam/Pow_1"
  input: "Adam/Identity"
  input: "Adam/Identity_1"
  input: "Adam/Identity_2"
  input: "Adam/Const"
  input: "MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_4/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/Adam/update_dense_4/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "dense_4/bias"
  input: "Adam/dense_4/bias/m"
  input: "Adam/dense_4/bias/v"
  input: "Adam/Pow"
  input: "Adam/Pow_1"
  input: "Adam/Identity"
  input: "Adam/Identity_1"
  input: "Adam/Identity_2"
  input: "Adam/Const"
  input: "BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_4/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/Adam/Const"
  op: "Const"
  input: "^Adam/Adam/update_dense_1/bias/ResourceApplyAdam"
  input: "^Adam/Adam/update_dense_1/kernel/ResourceApplyAdam"
  input: "^Adam/Adam/update_dense_2/bias/ResourceApplyAdam"
  input: "^Adam/Adam/update_dense_2/kernel/ResourceApplyAdam"
  input: "^Adam/Adam/update_dense_3/bias/ResourceApplyAdam"
  input: "^Adam/Adam/update_dense_3/kernel/ResourceApplyAdam"
  input: "^Adam/Adam/update_dense_4/bias/ResourceApplyAdam"
  input: "^Adam/Adam/update_dense_4/kernel/ResourceApplyAdam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "Adam/Adam/AssignAddVariableOp"
  op: "AssignAddVariableOp"
  input: "global_step"
  input: "Adam/Adam/Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "Adam/Adam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "global_step"
  input: "^Adam/Adam/AssignAddVariableOp"
  input: "^Adam/Adam/update_dense_1/bias/ResourceApplyAdam"
  input: "^Adam/Adam/update_dense_1/kernel/ResourceApplyAdam"
  input: "^Adam/Adam/update_dense_2/bias/ResourceApplyAdam"
  input: "^Adam/Adam/update_dense_2/kernel/ResourceApplyAdam"
  input: "^Adam/Adam/update_dense_3/bias/ResourceApplyAdam"
  input: "^Adam/Adam/update_dense_3/kernel/ResourceApplyAdam"
  input: "^Adam/Adam/update_dense_4/bias/ResourceApplyAdam"
  input: "^Adam/Adam/update_dense_4/kernel/ResourceApplyAdam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "Shape_4"
  op: "Shape"
  input: "model/dense_4/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "SparseSoftmaxCrossEntropyWithLogits_1/Shape"
  op: "Shape"
  input: "IteratorGetNext:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "SparseSoftmaxCrossEntropyWithLogits_1/SparseSoftmaxCrossEntropyWithLogits"
  op: "SparseSoftmaxCrossEntropyWithLogits"
  input: "model/dense_4/BiasAdd"
  input: "IteratorGetNext:1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tlabels"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Mean_1"
  op: "Mean"
  input: "SparseSoftmaxCrossEntropyWithLogits_1/SparseSoftmaxCrossEntropyWithLogits"
  input: "Const_3"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss"
      }
    }
  }
}
node {
  name: "loss"
  op: "ScalarSummary"
  input: "loss/tags"
  input: "Mean_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^Adam/beta_1/Assign"
  input: "^Adam/beta_2/Assign"
  input: "^Adam/decay/Assign"
  input: "^Adam/dense_1/bias/m/Assign"
  input: "^Adam/dense_1/bias/v/Assign"
  input: "^Adam/dense_1/kernel/m/Assign"
  input: "^Adam/dense_1/kernel/v/Assign"
  input: "^Adam/dense_2/bias/m/Assign"
  input: "^Adam/dense_2/bias/v/Assign"
  input: "^Adam/dense_2/kernel/m/Assign"
  input: "^Adam/dense_2/kernel/v/Assign"
  input: "^Adam/dense_3/bias/m/Assign"
  input: "^Adam/dense_3/bias/v/Assign"
  input: "^Adam/dense_3/kernel/m/Assign"
  input: "^Adam/dense_3/kernel/v/Assign"
  input: "^Adam/dense_4/bias/m/Assign"
  input: "^Adam/dense_4/bias/v/Assign"
  input: "^Adam/dense_4/kernel/m/Assign"
  input: "^Adam/dense_4/kernel/v/Assign"
  input: "^Adam/learning_rate/Assign"
  input: "^dense_1/bias/Assign"
  input: "^dense_1/kernel/Assign"
  input: "^dense_2/bias/Assign"
  input: "^dense_2/kernel/Assign"
  input: "^dense_3/bias/Assign"
  input: "^dense_3/kernel/Assign"
  input: "^dense_4/bias/Assign"
  input: "^dense_4/kernel/Assign"
  input: "^global_step/Assign"
}
node {
  name: "init_1"
  op: "NoOp"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^init"
  input: "^init_1"
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_1"
  op: "VarIsInitializedOp"
  input: "dense_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_2"
  op: "VarIsInitializedOp"
  input: "dense_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_3"
  op: "VarIsInitializedOp"
  input: "dense_2/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_4"
  op: "VarIsInitializedOp"
  input: "dense_2/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_5"
  op: "VarIsInitializedOp"
  input: "dense_3/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_6"
  op: "VarIsInitializedOp"
  input: "dense_3/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_7"
  op: "VarIsInitializedOp"
  input: "dense_4/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_8"
  op: "VarIsInitializedOp"
  input: "dense_4/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_9"
  op: "VarIsInitializedOp"
  input: "Adam/beta_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_10"
  op: "VarIsInitializedOp"
  input: "Adam/beta_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_11"
  op: "VarIsInitializedOp"
  input: "Adam/decay"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_12"
  op: "VarIsInitializedOp"
  input: "Adam/learning_rate"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_13"
  op: "VarIsInitializedOp"
  input: "Adam/dense_1/kernel/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_14"
  op: "VarIsInitializedOp"
  input: "Adam/dense_1/bias/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_15"
  op: "VarIsInitializedOp"
  input: "Adam/dense_2/kernel/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_16"
  op: "VarIsInitializedOp"
  input: "Adam/dense_2/bias/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_17"
  op: "VarIsInitializedOp"
  input: "Adam/dense_3/kernel/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_18"
  op: "VarIsInitializedOp"
  input: "Adam/dense_3/bias/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_19"
  op: "VarIsInitializedOp"
  input: "Adam/dense_4/kernel/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_20"
  op: "VarIsInitializedOp"
  input: "Adam/dense_4/bias/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_21"
  op: "VarIsInitializedOp"
  input: "Adam/dense_1/kernel/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_22"
  op: "VarIsInitializedOp"
  input: "Adam/dense_1/bias/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_23"
  op: "VarIsInitializedOp"
  input: "Adam/dense_2/kernel/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_24"
  op: "VarIsInitializedOp"
  input: "Adam/dense_2/bias/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_25"
  op: "VarIsInitializedOp"
  input: "Adam/dense_3/kernel/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_26"
  op: "VarIsInitializedOp"
  input: "Adam/dense_3/bias/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_27"
  op: "VarIsInitializedOp"
  input: "Adam/dense_4/kernel/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_28"
  op: "VarIsInitializedOp"
  input: "Adam/dense_4/bias/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/stack"
  op: "Pack"
  input: "report_uninitialized_variables/VarIsInitializedOp"
  input: "report_uninitialized_variables/VarIsInitializedOp_1"
  input: "report_uninitialized_variables/VarIsInitializedOp_2"
  input: "report_uninitialized_variables/VarIsInitializedOp_3"
  input: "report_uninitialized_variables/VarIsInitializedOp_4"
  input: "report_uninitialized_variables/VarIsInitializedOp_5"
  input: "report_uninitialized_variables/VarIsInitializedOp_6"
  input: "report_uninitialized_variables/VarIsInitializedOp_7"
  input: "report_uninitialized_variables/VarIsInitializedOp_8"
  input: "report_uninitialized_variables/VarIsInitializedOp_9"
  input: "report_uninitialized_variables/VarIsInitializedOp_10"
  input: "report_uninitialized_variables/VarIsInitializedOp_11"
  input: "report_uninitialized_variables/VarIsInitializedOp_12"
  input: "report_uninitialized_variables/VarIsInitializedOp_13"
  input: "report_uninitialized_variables/VarIsInitializedOp_14"
  input: "report_uninitialized_variables/VarIsInitializedOp_15"
  input: "report_uninitialized_variables/VarIsInitializedOp_16"
  input: "report_uninitialized_variables/VarIsInitializedOp_17"
  input: "report_uninitialized_variables/VarIsInitializedOp_18"
  input: "report_uninitialized_variables/VarIsInitializedOp_19"
  input: "report_uninitialized_variables/VarIsInitializedOp_20"
  input: "report_uninitialized_variables/VarIsInitializedOp_21"
  input: "report_uninitialized_variables/VarIsInitializedOp_22"
  input: "report_uninitialized_variables/VarIsInitializedOp_23"
  input: "report_uninitialized_variables/VarIsInitializedOp_24"
  input: "report_uninitialized_variables/VarIsInitializedOp_25"
  input: "report_uninitialized_variables/VarIsInitializedOp_26"
  input: "report_uninitialized_variables/VarIsInitializedOp_27"
  input: "report_uninitialized_variables/VarIsInitializedOp_28"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 29
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 29
          }
        }
        string_val: "global_step"
        string_val: "dense_1/kernel"
        string_val: "dense_1/bias"
        string_val: "dense_2/kernel"
        string_val: "dense_2/bias"
        string_val: "dense_3/kernel"
        string_val: "dense_3/bias"
        string_val: "dense_4/kernel"
        string_val: "dense_4/bias"
        string_val: "Adam/beta_1"
        string_val: "Adam/beta_2"
        string_val: "Adam/decay"
        string_val: "Adam/learning_rate"
        string_val: "Adam/dense_1/kernel/m"
        string_val: "Adam/dense_1/bias/m"
        string_val: "Adam/dense_2/kernel/m"
        string_val: "Adam/dense_2/bias/m"
        string_val: "Adam/dense_3/kernel/m"
        string_val: "Adam/dense_3/bias/m"
        string_val: "Adam/dense_4/kernel/m"
        string_val: "Adam/dense_4/bias/m"
        string_val: "Adam/dense_1/kernel/v"
        string_val: "Adam/dense_1/bias/v"
        string_val: "Adam/dense_2/kernel/v"
        string_val: "Adam/dense_2/bias/v"
        string_val: "Adam/dense_3/kernel/v"
        string_val: "Adam/dense_3/bias/v"
        string_val: "Adam/dense_4/kernel/v"
        string_val: "Adam/dense_4/bias/v"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 29
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables/boolean_mask/strided_slice"
  input: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 29
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 29
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables/Const"
  input: "report_uninitialized_variables/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables/LogicalNot"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables/boolean_mask/Reshape"
  input: "report_uninitialized_variables/boolean_mask/Squeeze"
  input: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_resources/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/GatherV2"
  input: "report_uninitialized_resources/Const"
  input: "concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_1"
  op: "VarIsInitializedOp"
  input: "dense_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_2"
  op: "VarIsInitializedOp"
  input: "dense_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_3"
  op: "VarIsInitializedOp"
  input: "dense_2/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_4"
  op: "VarIsInitializedOp"
  input: "dense_2/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_5"
  op: "VarIsInitializedOp"
  input: "dense_3/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_6"
  op: "VarIsInitializedOp"
  input: "dense_3/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_7"
  op: "VarIsInitializedOp"
  input: "dense_4/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_8"
  op: "VarIsInitializedOp"
  input: "dense_4/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_9"
  op: "VarIsInitializedOp"
  input: "Adam/beta_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_10"
  op: "VarIsInitializedOp"
  input: "Adam/beta_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_11"
  op: "VarIsInitializedOp"
  input: "Adam/decay"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_12"
  op: "VarIsInitializedOp"
  input: "Adam/learning_rate"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_13"
  op: "VarIsInitializedOp"
  input: "Adam/dense_1/kernel/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_14"
  op: "VarIsInitializedOp"
  input: "Adam/dense_1/bias/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_15"
  op: "VarIsInitializedOp"
  input: "Adam/dense_2/kernel/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_16"
  op: "VarIsInitializedOp"
  input: "Adam/dense_2/bias/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_17"
  op: "VarIsInitializedOp"
  input: "Adam/dense_3/kernel/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_18"
  op: "VarIsInitializedOp"
  input: "Adam/dense_3/bias/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_19"
  op: "VarIsInitializedOp"
  input: "Adam/dense_4/kernel/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_20"
  op: "VarIsInitializedOp"
  input: "Adam/dense_4/bias/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_21"
  op: "VarIsInitializedOp"
  input: "Adam/dense_1/kernel/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_22"
  op: "VarIsInitializedOp"
  input: "Adam/dense_1/bias/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_23"
  op: "VarIsInitializedOp"
  input: "Adam/dense_2/kernel/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_24"
  op: "VarIsInitializedOp"
  input: "Adam/dense_2/bias/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_25"
  op: "VarIsInitializedOp"
  input: "Adam/dense_3/kernel/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_26"
  op: "VarIsInitializedOp"
  input: "Adam/dense_3/bias/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_27"
  op: "VarIsInitializedOp"
  input: "Adam/dense_4/kernel/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_28"
  op: "VarIsInitializedOp"
  input: "Adam/dense_4/bias/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/stack"
  op: "Pack"
  input: "report_uninitialized_variables_1/VarIsInitializedOp"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_1"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_2"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_3"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_4"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_5"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_6"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_7"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_8"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_9"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_10"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_11"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_12"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_13"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_14"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_15"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_16"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_17"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_18"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_19"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_20"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_21"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_22"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_23"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_24"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_25"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_26"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_27"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_28"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 29
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables_1/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 29
          }
        }
        string_val: "global_step"
        string_val: "dense_1/kernel"
        string_val: "dense_1/bias"
        string_val: "dense_2/kernel"
        string_val: "dense_2/bias"
        string_val: "dense_3/kernel"
        string_val: "dense_3/bias"
        string_val: "dense_4/kernel"
        string_val: "dense_4/bias"
        string_val: "Adam/beta_1"
        string_val: "Adam/beta_2"
        string_val: "Adam/decay"
        string_val: "Adam/learning_rate"
        string_val: "Adam/dense_1/kernel/m"
        string_val: "Adam/dense_1/bias/m"
        string_val: "Adam/dense_2/kernel/m"
        string_val: "Adam/dense_2/bias/m"
        string_val: "Adam/dense_3/kernel/m"
        string_val: "Adam/dense_3/bias/m"
        string_val: "Adam/dense_4/kernel/m"
        string_val: "Adam/dense_4/bias/m"
        string_val: "Adam/dense_1/kernel/v"
        string_val: "Adam/dense_1/bias/v"
        string_val: "Adam/dense_2/kernel/v"
        string_val: "Adam/dense_2/bias/v"
        string_val: "Adam/dense_3/kernel/v"
        string_val: "Adam/dense_3/bias/v"
        string_val: "Adam/dense_4/kernel/v"
        string_val: "Adam/dense_4/bias/v"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 29
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  input: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 29
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 29
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables_1/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables_1/Const"
  input: "report_uninitialized_variables_1/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables_1/LogicalNot"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape"
  input: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_resources_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat_1"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  input: "report_uninitialized_resources_1/Const"
  input: "concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "init_2"
  op: "NoOp"
}
node {
  name: "init_all_tables"
  op: "NoOp"
}
node {
  name: "init_3"
  op: "NoOp"
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^init_2"
  input: "^init_3"
  input: "^init_all_tables"
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/filename/input"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/filename"
  op: "PlaceholderWithDefault"
  input: "save/filename/input"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/Const"
  op: "PlaceholderWithDefault"
  input: "save/filename"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/StringJoin/inputs_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "_temp_d961c8f957de456caee204b408a22d04/part"
      }
    }
  }
}
node {
  name: "save/StringJoin"
  op: "StringJoin"
  input: "save/Const"
  input: "save/StringJoin/inputs_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "separator"
    value {
      s: ""
    }
  }
}
node {
  name: "save/num_shards"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "save/ShardedFilename/shard"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "save/ShardedFilename"
  op: "ShardedFilename"
  input: "save/StringJoin"
  input: "save/ShardedFilename/shard"
  input: "save/num_shards"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 29
          }
        }
        string_val: "Adam/beta_1"
        string_val: "Adam/beta_2"
        string_val: "Adam/decay"
        string_val: "Adam/dense_1/bias/m"
        string_val: "Adam/dense_1/bias/v"
        string_val: "Adam/dense_1/kernel/m"
        string_val: "Adam/dense_1/kernel/v"
        string_val: "Adam/dense_2/bias/m"
        string_val: "Adam/dense_2/bias/v"
        string_val: "Adam/dense_2/kernel/m"
        string_val: "Adam/dense_2/kernel/v"
        string_val: "Adam/dense_3/bias/m"
        string_val: "Adam/dense_3/bias/v"
        string_val: "Adam/dense_3/kernel/m"
        string_val: "Adam/dense_3/kernel/v"
        string_val: "Adam/dense_4/bias/m"
        string_val: "Adam/dense_4/bias/v"
        string_val: "Adam/dense_4/kernel/m"
        string_val: "Adam/dense_4/kernel/v"
        string_val: "Adam/learning_rate"
        string_val: "dense_1/bias"
        string_val: "dense_1/kernel"
        string_val: "dense_2/bias"
        string_val: "dense_2/kernel"
        string_val: "dense_3/bias"
        string_val: "dense_3/kernel"
        string_val: "dense_4/bias"
        string_val: "dense_4/kernel"
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 29
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/ShardedFilename"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "Adam/beta_1/Read/ReadVariableOp"
  input: "Adam/beta_2/Read/ReadVariableOp"
  input: "Adam/decay/Read/ReadVariableOp"
  input: "Adam/dense_1/bias/m/Read/ReadVariableOp"
  input: "Adam/dense_1/bias/v/Read/ReadVariableOp"
  input: "Adam/dense_1/kernel/m/Read/ReadVariableOp"
  input: "Adam/dense_1/kernel/v/Read/ReadVariableOp"
  input: "Adam/dense_2/bias/m/Read/ReadVariableOp"
  input: "Adam/dense_2/bias/v/Read/ReadVariableOp"
  input: "Adam/dense_2/kernel/m/Read/ReadVariableOp"
  input: "Adam/dense_2/kernel/v/Read/ReadVariableOp"
  input: "Adam/dense_3/bias/m/Read/ReadVariableOp"
  input: "Adam/dense_3/bias/v/Read/ReadVariableOp"
  input: "Adam/dense_3/kernel/m/Read/ReadVariableOp"
  input: "Adam/dense_3/kernel/v/Read/ReadVariableOp"
  input: "Adam/dense_4/bias/m/Read/ReadVariableOp"
  input: "Adam/dense_4/bias/v/Read/ReadVariableOp"
  input: "Adam/dense_4/kernel/m/Read/ReadVariableOp"
  input: "Adam/dense_4/kernel/v/Read/ReadVariableOp"
  input: "Adam/learning_rate/Read/ReadVariableOp"
  input: "dense_1/bias/Read/ReadVariableOp"
  input: "dense_1/kernel/Read/ReadVariableOp"
  input: "dense_2/bias/Read/ReadVariableOp"
  input: "dense_2/kernel/Read/ReadVariableOp"
  input: "dense_3/bias/Read/ReadVariableOp"
  input: "dense_3/kernel/Read/ReadVariableOp"
  input: "dense_4/bias/Read/ReadVariableOp"
  input: "dense_4/kernel/Read/ReadVariableOp"
  input: "global_step/Read/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_FLOAT
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/ShardedFilename"
  input: "^save/SaveV2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/ShardedFilename"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/MergeV2Checkpoints/checkpoint_prefixes"
  op: "Pack"
  input: "save/ShardedFilename"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "save/MergeV2Checkpoints"
  op: "MergeV2Checkpoints"
  input: "save/MergeV2Checkpoints/checkpoint_prefixes"
  input: "save/Const"
  device: "/device:CPU:0"
  attr {
    key: "delete_old_dirs"
    value {
      b: true
    }
  }
}
node {
  name: "save/Identity"
  op: "Identity"
  input: "save/Const"
  input: "^save/MergeV2Checkpoints"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 29
          }
        }
        string_val: "Adam/beta_1"
        string_val: "Adam/beta_2"
        string_val: "Adam/decay"
        string_val: "Adam/dense_1/bias/m"
        string_val: "Adam/dense_1/bias/v"
        string_val: "Adam/dense_1/kernel/m"
        string_val: "Adam/dense_1/kernel/v"
        string_val: "Adam/dense_2/bias/m"
        string_val: "Adam/dense_2/bias/v"
        string_val: "Adam/dense_2/kernel/m"
        string_val: "Adam/dense_2/kernel/v"
        string_val: "Adam/dense_3/bias/m"
        string_val: "Adam/dense_3/bias/v"
        string_val: "Adam/dense_3/kernel/m"
        string_val: "Adam/dense_3/kernel/v"
        string_val: "Adam/dense_4/bias/m"
        string_val: "Adam/dense_4/bias/v"
        string_val: "Adam/dense_4/kernel/m"
        string_val: "Adam/dense_4/kernel/v"
        string_val: "Adam/learning_rate"
        string_val: "dense_1/bias"
        string_val: "dense_1/kernel"
        string_val: "dense_2/bias"
        string_val: "dense_2/kernel"
        string_val: "dense_3/bias"
        string_val: "dense_3/kernel"
        string_val: "dense_4/bias"
        string_val: "dense_4/kernel"
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 29
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_FLOAT
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/Identity_1"
  op: "Identity"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp"
  op: "AssignVariableOp"
  input: "Adam/beta_1"
  input: "save/Identity_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_2"
  op: "Identity"
  input: "save/RestoreV2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_1"
  op: "AssignVariableOp"
  input: "Adam/beta_2"
  input: "save/Identity_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_3"
  op: "Identity"
  input: "save/RestoreV2:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_2"
  op: "AssignVariableOp"
  input: "Adam/decay"
  input: "save/Identity_3"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_4"
  op: "Identity"
  input: "save/RestoreV2:3"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_3"
  op: "AssignVariableOp"
  input: "Adam/dense_1/bias/m"
  input: "save/Identity_4"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "save/Identity_5"
  op: "Identity"
  input: "save/RestoreV2:4"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_4"
  op: "AssignVariableOp"
  input: "Adam/dense_1/bias/v"
  input: "save/Identity_5"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "save/Identity_6"
  op: "Identity"
  input: "save/RestoreV2:5"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_5"
  op: "AssignVariableOp"
  input: "Adam/dense_1/kernel/m"
  input: "save/Identity_6"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "save/Identity_7"
  op: "Identity"
  input: "save/RestoreV2:6"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_6"
  op: "AssignVariableOp"
  input: "Adam/dense_1/kernel/v"
  input: "save/Identity_7"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "save/Identity_8"
  op: "Identity"
  input: "save/RestoreV2:7"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_7"
  op: "AssignVariableOp"
  input: "Adam/dense_2/bias/m"
  input: "save/Identity_8"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "save/Identity_9"
  op: "Identity"
  input: "save/RestoreV2:8"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_8"
  op: "AssignVariableOp"
  input: "Adam/dense_2/bias/v"
  input: "save/Identity_9"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "save/Identity_10"
  op: "Identity"
  input: "save/RestoreV2:9"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_9"
  op: "AssignVariableOp"
  input: "Adam/dense_2/kernel/m"
  input: "save/Identity_10"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "save/Identity_11"
  op: "Identity"
  input: "save/RestoreV2:10"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_10"
  op: "AssignVariableOp"
  input: "Adam/dense_2/kernel/v"
  input: "save/Identity_11"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "save/Identity_12"
  op: "Identity"
  input: "save/RestoreV2:11"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_11"
  op: "AssignVariableOp"
  input: "Adam/dense_3/bias/m"
  input: "save/Identity_12"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "save/Identity_13"
  op: "Identity"
  input: "save/RestoreV2:12"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_12"
  op: "AssignVariableOp"
  input: "Adam/dense_3/bias/v"
  input: "save/Identity_13"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "save/Identity_14"
  op: "Identity"
  input: "save/RestoreV2:13"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_13"
  op: "AssignVariableOp"
  input: "Adam/dense_3/kernel/m"
  input: "save/Identity_14"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "save/Identity_15"
  op: "Identity"
  input: "save/RestoreV2:14"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_14"
  op: "AssignVariableOp"
  input: "Adam/dense_3/kernel/v"
  input: "save/Identity_15"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "save/Identity_16"
  op: "Identity"
  input: "save/RestoreV2:15"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_15"
  op: "AssignVariableOp"
  input: "Adam/dense_4/bias/m"
  input: "save/Identity_16"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "save/Identity_17"
  op: "Identity"
  input: "save/RestoreV2:16"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_16"
  op: "AssignVariableOp"
  input: "Adam/dense_4/bias/v"
  input: "save/Identity_17"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "save/Identity_18"
  op: "Identity"
  input: "save/RestoreV2:17"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_17"
  op: "AssignVariableOp"
  input: "Adam/dense_4/kernel/m"
  input: "save/Identity_18"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "save/Identity_19"
  op: "Identity"
  input: "save/RestoreV2:18"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_18"
  op: "AssignVariableOp"
  input: "Adam/dense_4/kernel/v"
  input: "save/Identity_19"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "save/Identity_20"
  op: "Identity"
  input: "save/RestoreV2:19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_19"
  op: "AssignVariableOp"
  input: "Adam/learning_rate"
  input: "save/Identity_20"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_21"
  op: "Identity"
  input: "save/RestoreV2:20"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_20"
  op: "AssignVariableOp"
  input: "dense_1/bias"
  input: "save/Identity_21"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "save/Identity_22"
  op: "Identity"
  input: "save/RestoreV2:21"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_21"
  op: "AssignVariableOp"
  input: "dense_1/kernel"
  input: "save/Identity_22"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "save/Identity_23"
  op: "Identity"
  input: "save/RestoreV2:22"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_22"
  op: "AssignVariableOp"
  input: "dense_2/bias"
  input: "save/Identity_23"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "save/Identity_24"
  op: "Identity"
  input: "save/RestoreV2:23"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_23"
  op: "AssignVariableOp"
  input: "dense_2/kernel"
  input: "save/Identity_24"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "save/Identity_25"
  op: "Identity"
  input: "save/RestoreV2:24"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_24"
  op: "AssignVariableOp"
  input: "dense_3/bias"
  input: "save/Identity_25"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "save/Identity_26"
  op: "Identity"
  input: "save/RestoreV2:25"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_25"
  op: "AssignVariableOp"
  input: "dense_3/kernel"
  input: "save/Identity_26"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "save/Identity_27"
  op: "Identity"
  input: "save/RestoreV2:26"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_26"
  op: "AssignVariableOp"
  input: "dense_4/bias"
  input: "save/Identity_27"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "save/Identity_28"
  op: "Identity"
  input: "save/RestoreV2:27"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_27"
  op: "AssignVariableOp"
  input: "dense_4/kernel"
  input: "save/Identity_28"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "save/Identity_29"
  op: "Identity"
  input: "save/RestoreV2:28"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_28"
  op: "AssignVariableOp"
  input: "global_step"
  input: "save/Identity_29"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "save/restore_shard"
  op: "NoOp"
  input: "^save/AssignVariableOp"
  input: "^save/AssignVariableOp_1"
  input: "^save/AssignVariableOp_10"
  input: "^save/AssignVariableOp_11"
  input: "^save/AssignVariableOp_12"
  input: "^save/AssignVariableOp_13"
  input: "^save/AssignVariableOp_14"
  input: "^save/AssignVariableOp_15"
  input: "^save/AssignVariableOp_16"
  input: "^save/AssignVariableOp_17"
  input: "^save/AssignVariableOp_18"
  input: "^save/AssignVariableOp_19"
  input: "^save/AssignVariableOp_2"
  input: "^save/AssignVariableOp_20"
  input: "^save/AssignVariableOp_21"
  input: "^save/AssignVariableOp_22"
  input: "^save/AssignVariableOp_23"
  input: "^save/AssignVariableOp_24"
  input: "^save/AssignVariableOp_25"
  input: "^save/AssignVariableOp_26"
  input: "^save/AssignVariableOp_27"
  input: "^save/AssignVariableOp_28"
  input: "^save/AssignVariableOp_3"
  input: "^save/AssignVariableOp_4"
  input: "^save/AssignVariableOp_5"
  input: "^save/AssignVariableOp_6"
  input: "^save/AssignVariableOp_7"
  input: "^save/AssignVariableOp_8"
  input: "^save/AssignVariableOp_9"
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/restore_shard"
}
library {
  function {
    signature {
      name: "global_step_cond_true_19"
      input_arg {
        name: "read_readvariableop_global_step"
        type: DT_RESOURCE
      }
      input_arg {
        name: "placeholder"
        type: DT_INT64
      }
      output_arg {
        name: "identity"
        type: DT_INT64
      }
      is_stateful: true
    }
    node_def {
      name: "Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "read_readvariableop_global_step"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      experimental_debug_info {
        original_node_names: "Read/ReadVariableOp"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "Read/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            unknown_rank: true
          }
          shape {
          }
        }
      }
    }
  }
  function {
    signature {
      name: "global_step_cond_false_20"
      input_arg {
        name: "placeholder"
        type: DT_RESOURCE
      }
      input_arg {
        name: "global_step_initializer_zeros_0"
        type: DT_INT64
      }
      output_arg {
        name: "global_step_initializer_zeros"
        type: DT_INT64
      }
    }
    ret {
      key: "global_step_initializer_zeros"
      value: "global_step_initializer_zeros_0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            unknown_rank: true
          }
          shape {
          }
        }
      }
    }
  }
}
versions {
  producer: 175
  min_consumer: 12
}
